schema: CLC
name: CREDITO_PARCELADO
routineType: PROCEDURE
returnParamater: null
parameters:
- name: V_DATA
  ordinalPosition: 1
  dataType: DATE
  parameterMode: IN
routineDefinition: |-
  PROCEDURE CREDITO_PARCELADO(V_DATA IN DATE) IS CURSOR C_CURSOR IS
  SELECT
    CD_CRDE,
    CD_EMSR,
    SUM(SOMAVALORAUTDIA) AS SOMAVALORAUTDIA,
    SUM(SOMAVALOROUTDIA) AS SOMAVALOROUTDIA,
    SUM(SOMAVALORAUTDIA) - SUM(SOMAVALOROUTDIA) AS DIFERENCADIA,
    CASE
      WHEN SUM(SOMAVALORAUTDIA) = 0 THEN 0
      ELSE (SUM(SOMAVALORAUTDIA) - SUM(SOMAVALOROUTDIA)) / SUM(SOMAVALORAUTDIA) * 100
    END AS VARIACAODIA,
    SUM(SOMAVALORAUTTOT) AS SOMAVALORAUTTOT,
    SUM(SOMAVALOROUTTOT) AS SOMAVALOROUTTOT,
    SUM(SOMAVALORAUTTOT) - SUM(SOMAVALORAUTDIA) AS DIFERENCAAUTORIZACAO,
    SUM(SOMAVALOROUTTOT) - SUM(SOMAVALOROUTDIA) AS DIFERENCAOUTGOING
  FROM
    (
      SELECT
        /*+ use_nl(T) ordered */
        T.CD_CRDE,
        T.CD_EMSR,
        SUM(
          CASE
            WHEN (
              T.DH_INCL_RGST < TO_DATE(V_DATA, 'DD/MM/YYYY') + 1
            ) THEN CASE
              WHEN (T.CD_TIPO_TRNS_ATZC <> '100') THEN (T.VL_TRNS) * -1
              ELSE (T.VL_TRNS)
            END
            ELSE 0
          END
        ) AS SOMAVALORAUTDIA,
        SUM(
          CASE
            WHEN (T.CD_TIPO_TRNS_ATZC <> '100') THEN (T.VL_TRNS) * -1
            ELSE (T.VL_TRNS)
          END
        ) AS SOMAVALORAUTTOT,
        0 AS SOMAVALOROUTDIA,
        0 AS SOMAVALOROUTTOT
      FROM
        ATZ.TBATZR_TRNS T,
        ATZ.TBATZR_TRNS_BNDR_ELO B
      WHERE
        T.NU_IDTF_TRNS = B.NU_IDTF_TRNS
        AND T.NU_NSU_REDE_CPTR = B.NU_NSU_REDE_CPTR
        AND T.DH_TRNI = B.DH_TRNI
        AND T.DT_LOCL_TRNS = B.DT_LOCL_TRNS
        AND T.CD_TIPO_STCO_TRNS IN (1, 2)
        AND T.DH_INCL_RGST >= TO_DATE(V_DATA, 'DD/MM/YYYY')
        AND T.DH_INCL_RGST < TO_DATE(V_DATA, 'DD/MM/YYYY') + 2
        AND T.DT_LOCL_TRNS = TO_DATE(V_DATA, 'DD/MM/YYYY')
        AND B.DT_LOCL_TRNS = TO_DATE(V_DATA, 'DD/MM/YYYY')
        AND T.CD_TIPO_STCO_TRNS = 1
        AND B.CD_TIPO_CNTA_TRNS_BNDR_ORGM = '30'
        AND COALESCE(T.CD_PRDT_BNDR, 70) = 72
        AND T.CD_CRDE <> 7120
      GROUP BY
        T.CD_CRDE,
        T.CD_EMSR
      UNION ALL
      SELECT
        LNCM.CD_CRDE,
        LNCM.CD_EMSR,
        0 AS SOMAVALORAUTDIA,
        0 AS SOMAVALORAUTTOT,
        SUM(
          CASE
            WHEN LNCM.TX_DATA_VNDA = TO_CHAR(TO_DATE(V_DATA, 'DD/MM/YYYY'), 'YYYYMMDD') THEN CASE
              WHEN LNCM.CD_TIPO_TRNS_BNDR_RECB = '06' THEN (CAST(LNCM.TX_VALR_TRNS AS NUMBER)) * -1
              ELSE (CAST(LNCM.TX_VALR_TRNS AS NUMBER))
            END
            ELSE 0
          END
        ) / 100 AS SOMAVALOROUTDIA,
        SUM(
          CASE
            WHEN LNCM.CD_TIPO_TRNS_BNDR_RECB = '06' THEN (CAST(LNCM.TX_VALR_TRNS AS NUMBER)) * -1
            ELSE (CAST(LNCM.TX_VALR_TRNS AS NUMBER))
          END
        ) / 100 AS SOMAVALOROUTTOT
      FROM
        CLC.TBCLCR_LNCM_RECB LNCM
      WHERE
        LNCM.CD_TIPO_PLTF_PGMN = 'C'
        AND (
          LNCM.CD_TIPO_TRNS_BNDR_RECB = '05'
          OR LNCM.CD_TIPO_TRNS_BNDR_RECB = '06'
        )
        AND LNCM.CD_PRDT_BNDR_RECB = 72
        AND LNCM.NU_PRCL IN (0, 1) --AND LNCM.CD_TIPO_APRS_TRNS_RECB = 1
        AND LNCM.SG_ORGM_IFMC_RECB = 'CRD'
        AND LNCM.CD_CRDE <> 7120
        AND LNCM.DT_RFRN_MVMN = TO_DATE(V_DATA, 'DD/MM/YYYY')
      GROUP BY
        LNCM.CD_CRDE,
        LNCM.CD_EMSR
      ORDER BY
        CD_CRDE,
        CD_EMSR
    ) Q1
  GROUP BY
    CD_CRDE,
    CD_EMSR;
  --ORDER BY CD_CRDE, CD_EMSR;
    TYPE TYPE_CURSOR IS TABLE OF C_CURSOR % ROWTYPE INDEX BY BINARY_INTEGER;
  R_CURSOR TYPE_CURSOR;
  V_TRUNC VARCHAR2(100): = 'TRUNCATE TABLE CLC.tab_teste1';
  BEGIN
    execute immediate v_trunc;
  OPEN C_CURSOR;
  LOOP
    --preenche a memória de 50000 em 50000 registros
    FETCH C_CURSOR BULK COLLECT INTO R_CURSOR
  LIMIT
    10000;
  EXIT
    WHEN R_CURSOR.COUNT = 0;
  --FOR I IN 1 .. R_CURSOR.COUNT LOOP
    FORALL I IN 1 .. R_CURSOR.COUNT
  INSERT INTO
    clc.tab_teste1
  VALUES
    (
      R_CURSOR(I) .CD_CRDE,
      R_CURSOR(I) .CD_EMSR,
      R_CURSOR(I) .SOMAVALORAUTDIA,
      R_CURSOR(I) .SOMAVALOROUTDIA,
      R_CURSOR(I) .DIFERENCADIA,
      R_CURSOR(I) .VARIACAODIA,
      R_CURSOR(I) .SOMAVALORAUTTOT,
      R_CURSOR(I) .SOMAVALOROUTTOT,
      R_CURSOR(I) .DIFERENCAAUTORIZACAO,
      R_CURSOR(I) .DIFERENCAOUTGOING
    );
  END
  LOOP;
  --VAI APLICAR COMMIT DE 50000 EM 50000;
    COMMIT;
  -- END LOOP C_CURSOR;
    CLOSE C_CURSOR;
  COMMIT;
  END;
