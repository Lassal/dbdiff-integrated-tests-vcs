schema: XDB
name: DBMS_XMLSCHEMA
routineType: PACKAGE
returnParamater:
  name: GENERATESCHEMAS.(--return--)
  ordinalPosition: 0
  dataType: VARRAY
  parameterMode: OUT
parameters:
- name: COMPILESCHEMA.SCHEMAURL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: CONVERTTODATE.STRVAL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: CONVERTTODATE.XMLTYPENAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: CONVERTTOTS.STRVAL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: CONVERTTOTS.XMLTYPENAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: CONVERTTOTSWITHTZ.STRVAL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: CONVERTTOTSWITHTZ.XMLTYPENAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: COPYEVOLVE.SCHEMAURLS
  ordinalPosition: 1
  dataType: VARRAY
  parameterMode: IN
- name: COPYEVOLVE.NEWSCHEMAS
  ordinalPosition: 2
  dataType: VARRAY
  parameterMode: IN
- name: COPYEVOLVE.TRANSFORMS
  ordinalPosition: 3
  dataType: VARRAY
  parameterMode: IN
- name: COPYEVOLVE.PRESERVEOLDDOCS
  ordinalPosition: 4
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: COPYEVOLVE.MAPTABNAME
  ordinalPosition: 5
  dataType: VARCHAR2
  parameterMode: IN
- name: COPYEVOLVE.GENERATETABLES
  ordinalPosition: 6
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: COPYEVOLVE.FORCE
  ordinalPosition: 7
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: COPYEVOLVE.SCHEMAOWNERS
  ordinalPosition: 8
  dataType: VARRAY
  parameterMode: IN
- name: COPYEVOLVE.PARALLELDEGREE
  ordinalPosition: 9
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: COPYEVOLVE.OPTIONS
  ordinalPosition: 10
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: DELETESCHEMA.SCHEMAURL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: DELETESCHEMA.DELETE_OPTION
  ordinalPosition: 2
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: GENERATEBEAN.SCHEMAURL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: GENERATESCHEMA.SCHEMANAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: GENERATESCHEMA.TYPENAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: GENERATESCHEMA.ELEMENTNAME
  ordinalPosition: 3
  dataType: VARCHAR2
  parameterMode: IN
- name: GENERATESCHEMA.RECURSE
  ordinalPosition: 4
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: GENERATESCHEMA.ANNOTATE
  ordinalPosition: 5
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: GENERATESCHEMA.EMBEDCOLL
  ordinalPosition: 6
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: GENERATESCHEMAS.SCHEMANAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: GENERATESCHEMAS.TYPENAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: GENERATESCHEMAS.ELEMENTNAME
  ordinalPosition: 3
  dataType: VARCHAR2
  parameterMode: IN
- name: GENERATESCHEMAS.SCHEMAURL
  ordinalPosition: 4
  dataType: VARCHAR2
  parameterMode: IN
- name: GENERATESCHEMAS.ANNOTATE
  ordinalPosition: 5
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: GENERATESCHEMAS.EMBEDCOLL
  ordinalPosition: 6
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: INPLACEEVOLVE.SCHEMAURL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: INPLACEEVOLVE.DIFFXML
  ordinalPosition: 2
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
- name: INPLACEEVOLVE.FLAGS
  ordinalPosition: 3
  dataType: NUMBER
  parameterMode: IN
- name: PURGESCHEMA.SCHEMA_ID
  ordinalPosition: 1
  dataType: RAW
  parameterMode: IN
- name: REGISTERSCHEMA(1).SCHEMAURL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERSCHEMA(1).SCHEMADOC
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERSCHEMA(1).LOCAL
  ordinalPosition: 3
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(1).GENTYPES
  ordinalPosition: 4
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(1).GENBEAN
  ordinalPosition: 5
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(1).GENTABLES
  ordinalPosition: 6
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(1).FORCE
  ordinalPosition: 7
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(1).OWNER
  ordinalPosition: 8
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERSCHEMA(1).ENABLEHIERARCHY
  ordinalPosition: 9
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERSCHEMA(1).OPTIONS
  ordinalPosition: 10
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERSCHEMA(2).SCHEMAURL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERSCHEMA(2).SCHEMADOC
  ordinalPosition: 2
  dataType: CLOB
  parameterMode: IN
- name: REGISTERSCHEMA(2).LOCAL
  ordinalPosition: 3
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(2).GENTYPES
  ordinalPosition: 4
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(2).GENBEAN
  ordinalPosition: 5
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(2).GENTABLES
  ordinalPosition: 6
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(2).FORCE
  ordinalPosition: 7
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(2).OWNER
  ordinalPosition: 8
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERSCHEMA(2).ENABLEHIERARCHY
  ordinalPosition: 9
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERSCHEMA(2).OPTIONS
  ordinalPosition: 10
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERSCHEMA(2).SCHEMAOID
  ordinalPosition: 11
  dataType: RAW
  parameterMode: IN
- name: REGISTERSCHEMA(2).IMPORT_OPTIONS
  ordinalPosition: 12
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERSCHEMA(3).SCHEMAURL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERSCHEMA(3).SCHEMADOC
  ordinalPosition: 2
  dataType: BLOB
  parameterMode: IN
- name: REGISTERSCHEMA(3).LOCAL
  ordinalPosition: 3
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(3).GENTYPES
  ordinalPosition: 4
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(3).GENBEAN
  ordinalPosition: 5
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(3).GENTABLES
  ordinalPosition: 6
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(3).FORCE
  ordinalPosition: 7
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(3).OWNER
  ordinalPosition: 8
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERSCHEMA(3).CSID
  ordinalPosition: 9
  dataType: NUMBER
  parameterMode: IN
- name: REGISTERSCHEMA(3).ENABLEHIERARCHY
  ordinalPosition: 10
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERSCHEMA(3).OPTIONS
  ordinalPosition: 11
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERSCHEMA(4).SCHEMAURL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERSCHEMA(4).SCHEMADOC
  ordinalPosition: 2
  dataType: BFILE
  parameterMode: IN
- name: REGISTERSCHEMA(4).LOCAL
  ordinalPosition: 3
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(4).GENTYPES
  ordinalPosition: 4
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(4).GENBEAN
  ordinalPosition: 5
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(4).GENTABLES
  ordinalPosition: 6
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(4).FORCE
  ordinalPosition: 7
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(4).OWNER
  ordinalPosition: 8
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERSCHEMA(4).CSID
  ordinalPosition: 9
  dataType: NUMBER
  parameterMode: IN
- name: REGISTERSCHEMA(4).ENABLEHIERARCHY
  ordinalPosition: 10
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERSCHEMA(4).OPTIONS
  ordinalPosition: 11
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERSCHEMA(5).SCHEMAURL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERSCHEMA(5).SCHEMADOC
  ordinalPosition: 2
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
- name: REGISTERSCHEMA(5).LOCAL
  ordinalPosition: 3
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(5).GENTYPES
  ordinalPosition: 4
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(5).GENBEAN
  ordinalPosition: 5
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(5).GENTABLES
  ordinalPosition: 6
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(5).FORCE
  ordinalPosition: 7
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(5).OWNER
  ordinalPosition: 8
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERSCHEMA(5).ENABLEHIERARCHY
  ordinalPosition: 9
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERSCHEMA(5).OPTIONS
  ordinalPosition: 10
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERSCHEMA(6).SCHEMAURL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERSCHEMA(6).SCHEMADOC
  ordinalPosition: 2
  dataType: OBJECT
  parameterMode: IN
- name: REGISTERSCHEMA(6).LOCAL
  ordinalPosition: 3
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(6).GENTYPES
  ordinalPosition: 4
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(6).GENBEAN
  ordinalPosition: 5
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(6).GENTABLES
  ordinalPosition: 6
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(6).FORCE
  ordinalPosition: 7
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERSCHEMA(6).OWNER
  ordinalPosition: 8
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERSCHEMA(6).ENABLEHIERARCHY
  ordinalPosition: 9
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERSCHEMA(6).OPTIONS
  ordinalPosition: 10
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERURI.SCHEMAURL
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERURI.SCHEMADOCURI
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERURI.LOCAL
  ordinalPosition: 3
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERURI.GENTYPES
  ordinalPosition: 4
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERURI.GENBEAN
  ordinalPosition: 5
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERURI.GENTABLES
  ordinalPosition: 6
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERURI.FORCE
  ordinalPosition: 7
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: REGISTERURI.OWNER
  ordinalPosition: 8
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTERURI.ENABLEHIERARCHY
  ordinalPosition: 9
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: REGISTERURI.OPTIONS
  ordinalPosition: 10
  dataType: BINARY_INTEGER
  parameterMode: IN
routineDefinition: |-
  package dbms_xmlschema authid current_user is ---------------------------------------------
  --  OVERVIEW
  --
  --  This package provides procedures to
  --  (*) register an XML schema
  --  (*) delete a previously registered XML schema
  --  (*) re-compile a previously registered XML schema
  --  (*) generate an XML schema
  --
  ---------------------------------------------
  ------------
  -- CONSTANTS
  --
  ------------
  DELETE_RESTRICT CONSTANT NUMBER: = 1;
  DELETE_INVALIDATE CONSTANT NUMBER: = 2;
  DELETE_CASCADE CONSTANT NUMBER: = 3;
  DELETE_CASCADE_FORCE CONSTANT NUMBER: = 4;
  DELETE_MIGRATE CONSTANT NUMBER: = 8;
  ENABLE_HIERARCHY_NONE CONSTANT PLS_INTEGER: = 1;
  ENABLE_HIERARCHY_CONTENTS CONSTANT PLS_INTEGER: = 2;
  ENABLE_HIERARCHY_RESMETADATA CONSTANT PLS_INTEGER: = 3;
  ENABLE_HIERARCHY_VERSION CONSTANT PLS_INTEGER: = 4;
  ENABLE_HIERARCHY_LINKS CONSTANT PLS_INTEGER: = 8;
  REGISTER_NODOCID CONSTANT NUMBER: = 1;
  REGISTER_BINARYXML CONSTANT NUMBER: = 2;
  REGISTER_NT_AS_IOT CONSTANT NUMBER: = 4;
  REGISTER_CSID_NULL CONSTANT NUMBER: = -1;
  COPYEVOLVE_BINARY_XML CONSTANT NUMBER: = 1;
  INPLACE_EVOLVE CONSTANT NUMBER: = 1;
  INPLACE_TRACE CONSTANT NUMBER: = 2;
  PRESERVE_PROP_NUMBERS CONSTANT NUMBER: = 1;
  ------------
  -- TYPES
  ------------
  TYPE URLARR is VARRAY(1000) of VARCHAR2(1000);
  TYPE XMLARR is VARRAY(1000) of XMLType;
  TYPE UNAME_ARR is VARRAY(1000) of VARCHAR2(100);
  ---------------------------------------------
  -- PROCEDURE - registerSchema
  -- PARAMETERS -
  --  schemaURL
  --     A name that uniquely identifies the schema document.
  --  schemaDoc
  --     a valid XML schema document
  --  local
  --     Is this a local or global schema ? By default, all schemas
  --     are registered as local schemas i.e. under
  --       /sys/schemas/<username>/...
  --     If a schema is registered as global, it is added under
  --       /sys/schemas/PUBLIC/...
  --     You need write privileges on the above directory to be
  --     able to register a schema as global.
  --  genTypes
  --     Should the schema compiler generate object types ?
  --  genbean
  --     Should the schema compiler generate Java beans ?
  --  genTables
  --     Should the schema compiler generate default tables ?
  --  force
  --     Should the schema be created/stored even with errors?
  --       Setting this to TRUE will register the schema in the
  --       hierarchy even if there were compilation errors, but
  --       the schema cannot be used until it is made valid.
  --  csid
  --     Character set id of the input blob or bfile.
  --     The value REGISTER_CSID_NULL indicates that the CSID was
  --     not passed in. If users pass in REGISTER_CSID_NULL as the value
  --     of the csid parameter, then the behavior will be the same as
  --     when csid was not passed in.
  --  options
  --     Additional options to specify how the schema should be
  --     registered. The various options are represented as bits
  --     of an integer and the options parameter should be
  --     constructed by doing a bitor of the desired bits.
  --     The possible bits for this are:
  --       REGISTER_NODOCID :: this will suppress the creation
  --       of the DOCID column for out of line tables. This is a
  --       storage optimization which might be desirable when
  --       we do not need to join back to the document table (for example
  --       if we do not care about rewriting certain queries that could
  --       be rewritten by making use of the DOCID column)
  --       REGISTER_BINARYXML :: this scema is used for CSX
  --      REGISTER_NT_AS_IOT  :: this will store the
  --       nested tables as IOTs instead of heap (which is the default storage)
  --  enableHierarchy
  --     Specifies how the tables generated during schema registration
  --     should be hierarchically enabled. It must be one of the following:
  --     ENABLE_HIERARCHY_NONE : none of the tables will have hierarchy
  --     enabled on them
  --     ENABLE_HIERARCHY_CONTENTS : enables hierarchy for contents i.e.
  --     the tables can be used to store contents of resources
  --     ENABLE_HIERARCHY_RESMETADATA : enables hierarchy for resource metadata
  --     i.e. the tables can be used to store resource metadata
  --     ENABLE_HIERARCHY_VERSION : version-enable all table created during
  --     registration. Must be combined with either ENABLE_HIERARCHY_CONTENTS
  --     or ENABLE_HIERARCHY_RESMETADATA.
  --     ENABLE_HIERARCHY_LINKS : enable hierarchy and enable link processing on
  --     the table. Must be combined with ENABLE_HIERARCHY_CONTENTS
  --
  -- EXCEPTIONS
  --   ORA-31001: Invalid resource handle or path name
  --   todo
  ---------------------------------------------
  procedure registerSchema(
    schemaURL IN varchar2,
    schemaDoc IN VARCHAR2,
    local IN BOOLEAN: = TRUE,
    genTypes IN BOOLEAN: = TRUE,
    genbean IN BOOLEAN: = FALSE,
    genTables IN BOOLEAN: = TRUE,
    force IN BOOLEAN: = FALSE,
    owner IN VARCHAR2: = '',
    enableHierarchy IN pls_integer: = ENABLE_HIERARCHY_CONTENTS,
    options IN pls_integer: = 0
  );
  procedure registerSchema(
    schemaURL IN varchar2,
    schemaDoc IN CLOB,
    local IN BOOLEAN: = TRUE,
    genTypes IN BOOLEAN: = TRUE,
    genbean IN BOOLEAN: = FALSE,
    genTables IN BOOLEAN: = TRUE,
    force IN BOOLEAN: = FALSE,
    owner IN VARCHAR2: = '',
    enableHierarchy IN pls_integer: = ENABLE_HIERARCHY_CONTENTS,
    options IN pls_integer: = 0,
    schemaoid IN RAW: = NULL,
    import_options IN pls_integer: = 0
  );
  procedure registerSchema(
    schemaURL IN varchar2,
    schemaDoc IN BLOB,
    local IN BOOLEAN: = TRUE,
    genTypes IN BOOLEAN: = TRUE,
    genbean IN BOOLEAN: = FALSE,
    genTables IN BOOLEAN: = TRUE,
    force IN BOOLEAN: = FALSE,
    owner IN VARCHAR2: = '',
    csid IN NUMBER: = REGISTER_CSID_NULL,
    enableHierarchy IN pls_integer: = ENABLE_HIERARCHY_CONTENTS,
    options IN pls_integer: = 0
  );
  procedure registerSchema(
    schemaURL IN varchar2,
    schemaDoc IN BFILE,
    local IN BOOLEAN: = TRUE,
    genTypes IN BOOLEAN: = TRUE,
    genbean IN BOOLEAN: = FALSE,
    genTables IN BOOLEAN: = TRUE,
    force IN BOOLEAN: = FALSE,
    owner IN VARCHAR2: = '',
    csid IN NUMBER: = REGISTER_CSID_NULL,
    enableHierarchy IN pls_integer: = ENABLE_HIERARCHY_CONTENTS,
    options IN pls_integer: = 0
  );
  procedure registerSchema(
    schemaURL IN varchar2,
    schemaDoc IN sys.XMLType,
    local IN BOOLEAN: = TRUE,
    genTypes IN BOOLEAN: = TRUE,
    genbean IN BOOLEAN: = FALSE,
    genTables IN BOOLEAN: = TRUE,
    force IN BOOLEAN: = FALSE,
    owner IN VARCHAR2: = '',
    enableHierarchy IN pls_integer: = ENABLE_HIERARCHY_CONTENTS,
    options IN pls_integer: = 0
  );
  procedure registerSchema(
    schemaURL IN varchar2,
    schemaDoc IN sys.UriType,
    local IN BOOLEAN: = TRUE,
    genTypes IN BOOLEAN: = TRUE,
    genbean IN BOOLEAN: = FALSE,
    genTables IN BOOLEAN: = TRUE,
    force IN BOOLEAN: = FALSE,
    owner IN VARCHAR2: = '',
    enableHierarchy IN pls_integer: = ENABLE_HIERARCHY_CONTENTS,
    options IN pls_integer: = 0
  );
  ---------------------------------------------
  -- PROCEDURE - registerURI
  -- PARAMETERS -
  --  schemaURL
  --     A name that uniquely identifies the schema document.
  --  schemaDocURI
  --     A pathname (URI) corresponding to the physical location of the
  --     schema document. The URI path could be based on HTTP, FTP, DB or XDB
  --     protocols. This function constructs a URIType instance using
  --     the URIFactory - and invokes the regiserSchema function above.
  --  <all other paramaters> Same as above
  ---------------------------------------------
  procedure registerURI(
    schemaURL IN varchar2,
    schemaDocURI IN varchar2,
    local IN BOOLEAN: = TRUE,
    genTypes IN BOOLEAN: = TRUE,
    genbean IN BOOLEAN: = FALSE,
    genTables IN BOOLEAN: = TRUE,
    force IN BOOLEAN: = FALSE,
    owner IN VARCHAR2: = '',
    enableHierarchy IN pls_integer: = ENABLE_HIERARCHY_CONTENTS,
    options IN pls_integer: = 0
  );
  ---------------------------------------------
  -- PROCEDURE - deleteSchema
  -- PARAMETERS -
  --  schemaURL : Name identifying the schema to be deleted
  --  option : one of the following
  --    DELETE_RESTRICT ::
  --      Schema deletion fails if there are any tables or schemas that
  --      depend on this schema.
  --    DELETE_INVALIDATE :
  --      Schema deletion does not fail if there are any dependencies.
  --      Instead, it simply invalidates all dependent objects.
  --    DELETE_CASCADE ::
  --      Schema deletion will also drop all default SQL types and
  --      default tables. However the deletion fails if there are
  --      any stored instances conforming to this schema.
  --    DELETE_CASCADE_FORCE ::
  --      Similar to CASCADE except that it does not check for any stored
  --      instances conforming to this schema. Also it ignores any errors.
  --    DELETE_MIGRATE
  --      This delete is happening during migrate mode.
  --
  -- EXCEPTIONS
  --   ORA-31001: Invalid resource handle or path name
  --   todo
  ---------------------------------------------
  procedure deleteSchema(
    schemaURL IN varchar2,
    delete_option IN pls_integer: = DELETE_RESTRICT
  );
  PRAGMA SUPPLEMENTAL_LOG_DATA(deleteSchema, AUTO_WITH_COMMIT);
  ---------------------------------------------
  -- PROCEDURE - purgeSchema
  --  Purges a schema that was previously marked delete with hide mode
  -- PARAMETERS -
  --  schemaURL : Name identifying the schema to be purge
  --
  -- EXCEPTIONS
  --   ORA-31001: Invalid resource handle or path name
  --   todo
  ---------------------------------------------
  procedure purgeSchema(schema_id IN raw);
  PRAGMA SUPPLEMENTAL_LOG_DATA(purgeSchema, AUTO_WITH_COMMIT);
  ---------------------------------------------
  -- PROCEDURE - generateBean
  --  This procedure can be used to generate the Java bean code
  --  corresponding to a registered XML schema.
  --  Note that there is also an option to generate the beans
  --  as part of the registration procedure itself.
  -- PARAMETERS -
  --  schemaURL : Name identifying a registered XML schema.
  -- EXCEPTIONS
  --   ORA-31001: Invalid resource handle or path name
  --   todo
  ---------------------------------------------
  procedure generateBean(schemaURL IN varchar2);
  PRAGMA SUPPLEMENTAL_LOG_DATA(generateBean, AUTO_WITH_COMMIT);
  ---------------------------------------------
  -- PROCEDURE - compileSchema
  --  This procedure can be used to re-compile an already registered XML
  --  schema. This is useful for bringing a schema in an invalid
  --  state to a valid state.
  -- PARAMETERS -
  --  schemaURL : URL identifying the schema
  -- EXCEPTIONS
  --   ORA-31001: Invalid resource handle or path name
  ---------------------------------------------
  procedure compileSchema(schemaURL IN varchar2);
  PRAGMA SUPPLEMENTAL_LOG_DATA(compileSchema, AUTO_WITH_COMMIT);
  ---------------------------------------------
  -- FUNCTION - generateSchema(s)
  --  These functions generate XML schema(s) from
  --  an oracle type name.  generateSchemas returns a collection
  --  of XMLTypes, one XMLSchema document for each database schema.
  --  generateSchema inlines them all in one schema (XMLType).
  -- PARAMETERS -
  --  schemaName  : the name of the database schema containing the type
  --  typeName    : the name of the oracle type
  --  elementName : the name of the toplevel element in the XMLSchema
  --                defaults to typeName
  --  schemaURL   : specifies base URL where schemas will be stored,
  --                needed by top level schema for import statement
  --  recurse     : whether or not to also generate schema for all types
  --                referred to by the type specified
  --  annotate    : whether or not to put the SQL annotations in the XMLSchema
  --  embedColl   : whether you want collections embedded in the type which
  --                refers to them or you want them to have a complexType
  --                created, can not be false with annotations true
  -- EXCEPTIONS
  --  TBD
  ---------------------------------------------
  function generateSchemas(
    schemaName IN varchar2,
    typeName IN varchar2,
    elementName IN varchar2: = NULL,
    schemaURL IN varchar2: = NULL,
    annotate IN BOOLEAN: = TRUE,
    embedColl IN BOOLEAN: = TRUE
  ) return sys.XMLSequenceType;
  function generateSchema(
    schemaName IN varchar2,
    typeName IN varchar2,
    elementName IN varchar2: = NULL,
    recurse IN BOOLEAN: = TRUE,
    annotate IN BOOLEAN: = TRUE,
    embedColl IN BOOLEAN: = TRUE
  ) return sys.XMLType;
  procedure CopyEvolve(
    schemaURLs IN XDB$STRING_LIST_T,
    newSchemas IN XMLSequenceType,
    transforms IN XMLSequenceType: = NULL,
    preserveOldDocs IN BOOLEAN: = FALSE,
    mapTabName IN VARCHAR2: = NULL,
    generateTables IN BOOLEAN: = TRUE,
    force IN BOOLEAN: = FALSE,
    schemaOwners IN XDB$STRING_LIST_T: = NULL,
    parallelDegree IN PLS_INTEGER: = 0,
    options IN PLS_INTEGER: = 0
  );
  PRAGMA SUPPLEMENTAL_LOG_DATA(CopyEvolve, UNSUPPORTED_WITH_COMMIT);
  procedure InPlaceEvolve(
    schemaURL IN VARCHAR2,
    diffXML IN SYS.XMLTYPE,
    flags IN NUMBER: = 1
  );
  PRAGMA SUPPLEMENTAL_LOG_DATA(InPlaceEvolve, AUTO_WITH_COMMIT);
  ---------------------------------------------
  -- FUNCTION - convertToDate
  --  This function converts the string representation of the following
  --  specified XML Schema types into the Oracle DATE representation
  --  using a default reference date and format mask.
  -- PARAMETERS -
  --  strval : string representation of valid value (per XML Schema)
  --  xmltypename : Name of the XML Schema datatype.
  --                Has to be one of the following:
  --                 * gDay
  --                 * gMonth
  --                 * gYear
  --                 * gYearMonth
  --                 * gMonthDay
  --                 * date
  ---------------------------------------------
  function convertToDate(strval varchar2, xmltypename varchar2) return DATE deterministic parallel_enable;
  ---------------------------------------------
  -- FUNCTION - convertToTS
  --  This function converts the string representation of the following
  --  specified XML Schema types into the Oracle TIMESTAMP representation
  --  using a default reference date and format mask.
  -- PARAMETERS -
  --  strval : string representation of valid value (per XML Schema)
  --  xmltypename : Name of the XML Schema datatype.
  --                Has to be one of the following:
  --                 * dateTime
  --                 * time
  ---------------------------------------------
  function convertToTS(strval varchar2, xmltypename varchar2) return TIMESTAMP deterministic parallel_enable;
  ---------------------------------------------
  -- FUNCTION - convertToTSWithTZ
  --  This function converts the string representation of the following
  --  specified XML Schema types into the Oracle
  --  TIMESTAMP WITH TIMEZONE representation using a default reference
  --  date and format mask.
  -- PARAMETERS -
  --  strval : string representation of valid value (per XML Schema)
  --  xmltypename : Name of the XML Schema datatype.
  --                Has to be one of the following:
  --                 * gDay
  --                 * gMonth
  --                 * gYear
  --                 * gYearMonth
  --                 * gMonthDay
  --                 * date
  --                 * dateTime
  --                 * time
  ---------------------------------------------
  function convertToTSWithTZ(strval varchar2, xmltypename varchar2) return TIMESTAMP WITH TIME ZONE deterministic parallel_enable;
  end dbms_xmlschema;
