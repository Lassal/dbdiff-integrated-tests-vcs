schema: XDB
name: DBMS_XDB_REPOS
routineType: PACKAGE
returnParamater:
  name: UNLOCKRESOURCE.(--return--)
  dataType: PL/SQL BOOLEAN
  parameterMode: OUT
  ordinalPosition: 0
parameters:
- name: ACLCHECKPRIVILEGES.ACL_PATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: ACLCHECKPRIVILEGES.OWNER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: ACLCHECKPRIVILEGES.PRIVS
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
  ordinalPosition: 3
- name: ADDRESOURCE.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: ADDRESOURCE.DATA
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: ADDTOLOCKTOKENLIST.TOKEN
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: APPENDRESOURCEMETADATA(1).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: APPENDRESOURCEMETADATA(1).DATA
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
  ordinalPosition: 2
- name: APPENDRESOURCEMETADATA(2).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: APPENDRESOURCEMETADATA(2).DATA
  dataType: REF
  parameterMode: IN
  ordinalPosition: 2
- name: CHANGEOWNER.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CHANGEOWNER.OWNER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: CHANGEOWNER.RECURSE
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 3
- name: CHANGEPRIVILEGES.RES_PATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CHANGEPRIVILEGES.ACE
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
  ordinalPosition: 2
- name: CHECKPRIVILEGES.RES_PATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CHECKPRIVILEGES.PRIVS
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
  ordinalPosition: 2
- name: CREATEFOLDER.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CREATEOIDPATH.OID
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: CREATERESOURCE(1).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CREATERESOURCE(1).DATA
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: CREATERESOURCE(1).SCHEMAURL
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CREATERESOURCE(1).ELEM
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: CREATERESOURCE(2).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CREATERESOURCE(2).DATA
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
  ordinalPosition: 2
- name: CREATERESOURCE(2).SCHEMAURL
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CREATERESOURCE(2).ELEM
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: CREATERESOURCE(3).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CREATERESOURCE(3).DATA
  dataType: REF
  parameterMode: IN
  ordinalPosition: 2
- name: CREATERESOURCE(3).STICKY
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 3
- name: CREATERESOURCE(3).CALCSIZE
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 4
- name: CREATERESOURCE(4).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CREATERESOURCE(4).DATA
  dataType: CLOB
  parameterMode: IN
  ordinalPosition: 2
- name: CREATERESOURCE(5).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CREATERESOURCE(5).DATA
  dataType: BFILE
  parameterMode: IN
  ordinalPosition: 2
- name: CREATERESOURCE(5).CSID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 3
- name: CREATERESOURCE(6).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CREATERESOURCE(6).DATA
  dataType: BLOB
  parameterMode: IN
  ordinalPosition: 2
- name: CREATERESOURCE(6).CSID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 3
- name: DELETEFROMLOCKTOKENLIST.TOKEN
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: DELETERESOURCE.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: DELETERESOURCE.DELETE_OPTION
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: DELETERESOURCEMETADATA(1).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: DELETERESOURCEMETADATA(1).METADATA
  dataType: REF
  parameterMode: IN
  ordinalPosition: 2
- name: DELETERESOURCEMETADATA(1).DELETE_OPTION
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 3
- name: DELETERESOURCEMETADATA(2).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: DELETERESOURCEMETADATA(2).METADATANS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: DELETERESOURCEMETADATA(2).METADATANAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: DELETERESOURCEMETADATA(2).DELETE_OPTION
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 4
- name: EXISTSRESOURCE.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: GETACLDOCUMENT.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: GETCONTENTBLOB.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: GETCONTENTBLOB.CSID
  dataType: BINARY_INTEGER
  parameterMode: OUT
  ordinalPosition: 2
- name: GETCONTENTBLOB.LOCKSRC
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 3
- name: GETCONTENTCLOB.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: GETCONTENTVARCHAR2.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: GETCONTENTXMLREF.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: GETCONTENTXMLTYPE.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: GETLOCKTOKEN.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: GETLOCKTOKEN.LOCKTOKEN
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 2
- name: GETPRIVILEGES.RES_PATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: GETRESOID.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: GETRESOURCE.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: HASBLOBCONTENT.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: HASCHARCONTENT.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: HASXMLCONTENT.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: HASXMLREFERENCE.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: ISFOLDER.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: LINK.SRCPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: LINK.LINKFOLDER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: LINK.LINKNAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: LINK.LINKTYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 4
- name: LOCKDISCOVERY.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: LOCKRESOURCE(1).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: LOCKRESOURCE(1).DEPTHZERO
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 2
- name: LOCKRESOURCE(1).SHARED
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 3
- name: LOCKRESOURCE(2).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: LOCKRESOURCE(2).DEPTHZERO
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 2
- name: LOCKRESOURCE(2).SHARED
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 3
- name: LOCKRESOURCE(2).TOKEN
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 4
- name: LOCKRESOURCE(2).TIMEOUT
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 5
- name: PROCESSLINKS.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: PROCESSLINKS.RECURSE
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 2
- name: PURGERESOURCEMETADATA.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: REFRESHCONTENTSIZE.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: REFRESHCONTENTSIZE.RECURSE
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 2
- name: REFRESHLOCK.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: REFRESHLOCK.TOKEN
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: REFRESHLOCK.NEWTIMEOUT
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 3
- name: RENAMERESOURCE.SRCPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: RENAMERESOURCE.DESTFOLDER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: RENAMERESOURCE.NEWNAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: SETACL.RES_PATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: SETACL.ACL_PATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: TOUCHRESOURCE.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: UNLOCKRESOURCE.ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: UNLOCKRESOURCE.DELTOKEN
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: UPDATERESOURCEMETADATA(1).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: UPDATERESOURCEMETADATA(1).OLDMETADATA
  dataType: REF
  parameterMode: IN
  ordinalPosition: 2
- name: UPDATERESOURCEMETADATA(1).NEWMETADATA
  dataType: REF
  parameterMode: IN
  ordinalPosition: 3
- name: UPDATERESOURCEMETADATA(2).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: UPDATERESOURCEMETADATA(2).OLDMETADATA
  dataType: REF
  parameterMode: IN
  ordinalPosition: 2
- name: UPDATERESOURCEMETADATA(2).NEWMETADATA
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
  ordinalPosition: 3
- name: UPDATERESOURCEMETADATA(3).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: UPDATERESOURCEMETADATA(3).OLDNS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: UPDATERESOURCEMETADATA(3).OLDNAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: UPDATERESOURCEMETADATA(3).NEWMETADATA
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
  ordinalPosition: 4
- name: UPDATERESOURCEMETADATA(4).ABSPATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: UPDATERESOURCEMETADATA(4).OLDNS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: UPDATERESOURCEMETADATA(4).OLDNAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: UPDATERESOURCEMETADATA(4).NEWMETADATA
  dataType: REF
  parameterMode: IN
  ordinalPosition: 4
routineDefinition: |-
  PACKAGE dbms_xdb_repos AUTHID CURRENT_USER IS ------------
  -- CONSTANTS
  --
  ------------
  DELETE_RESOURCE CONSTANT NUMBER: = 1;
  DELETE_RECURSIVE CONSTANT NUMBER: = 2;
  DELETE_FORCE CONSTANT NUMBER: = 3;
  DELETE_RECURSIVE_FORCE CONSTANT NUMBER: = 4;
  DELETE_RES_METADATA_CASCADE CONSTANT NUMBER: = 1;
  DELETE_RES_METADATA_NOCASCADE CONSTANT NUMBER: = 2;
  DEFAULT_LOCK_TIMEOUT CONSTANT PLS_INTEGER: = (60 * 60);
  LINK_TYPE_HARD CONSTANT NUMBER: = 1;
  LINK_TYPE_WEAK CONSTANT NUMBER: = 2;
  LINK_TYPE_SYMBOLIC CONSTANT NUMBER: = 3;
  ---------------------------------------------
  -- FUNCTION - LockResource
  --     Gets a webdav-like lock for XDB resource given its path
  -- PARAMETERS -
  --  abspath
  --     Absolute path in the Hierarchy of the resource
  --  depthzero
  --     depth zero boolean
  --  shared
  --     shared boolean
  -- RETURNS -
  --     Returns TRUE if successful
  ---------------------------------------------
  FUNCTION LockResource(
    abspath IN VARCHAR2,
    depthzero IN BOOLEAN,
    shared IN boolean
  ) RETURN boolean;
  ---------------------------------------------
  -- FUNCTION - LockResource
  --     Gets a webdav-like lock for XDB resource given its path
  -- PARAMETERS -
  --  abspath
  --     Absolute path in the Hierarchy of the resource
  --  depthzero
  --     depth zero boolean
  --  shared
  --     shared boolean
  --  token
  --     generated token
  --  timeout
  --     time (in seconds) after which lock expires
  -- RETURNS -
  --     Returns TRUE if successful
  ---------------------------------------------
  FUNCTION LockResource(
    abspath IN VARCHAR2,
    depthzero IN BOOLEAN,
    shared IN boolean,
    token OUT VARCHAR2,
    timeout IN PLS_INTEGER: = DEFAULT_LOCK_TIMEOUT
  ) RETURN boolean;
  ---------------------------------------------
  -- PROCEDURE - RefreshLock
  --     Refreshes a webdav-like lock for XDB resource given its path
  -- PARAMETERS -
  --  abspath
  --     Absolute path in the Hierarchy of the resource
  --  token
  --     token corresponding to the lock to be refreshed
  --  newTimeout
  --     new timeout (in seconds) after which lock will expire
  -- NOTE -
  --     If the timeout is less than the remaining time to expiry,
  --     lock will not be refreshed
  ---------------------------------------------
  PROCEDURE RefreshLock(
    abspath IN VARCHAR2,
    token IN VARCHAR2,
    newTimeout IN PLS_INTEGER: = DEFAULT_LOCK_TIMEOUT
  );
  ---------------------------------------------
  -- FUNCTION - LockDiscovery
  --     Gets Locks element on resource defined by abspath
  -- PARAMETERS -
  --  abspath
  --     Absolute path in the Hierarchy of the resource
  -- RETURNS -
  --     the Locks element as XMLType
  ---------------------------------------------
  FUNCTION LockDiscovery(abspath IN VARCHAR2) RETURN SYS.XMLType;
  ---------------------------------------------
  -- PROCEDURE - GetLockToken
  --     Gets lock token for current user for XDB resource given its path
  -- PARAMETERS -
  --  abspath
  --     Absolute path in the Hierarchy of the resource
  --  locktoken (OUT)
  --     Returns lock token
  ---------------------------------------------
  PROCEDURE GetLockToken(abspath IN VARCHAR2, locktoken OUT VARCHAR2);
  ---------------------------------------------
  -- FUNCTION - Unlock
  --     Removes lock for XDB resource given lock token
  -- PARAMETERS -
  --  abspath
  --     Absolute path in the Hierarchy of the resource
  --  delToken
  --     Lock token name to be removed
  -- RETURNS -
  --     Returns TRUE if successful
  ---------------------------------------------
  FUNCTION UnlockResource(
    abspath IN VARCHAR2,
    deltoken IN VARCHAR2: = NULL
  ) RETURN boolean;
  ---------------------------------------------
  -- PROCEDURE - AddToLockTokenList
  --     Adds specified token to the session lock token list
  -- PARAMETERS -
  --  token
  --     token to be added to token list
  ---------------------------------------------
  PROCEDURE AddToLockTokenList(token IN VARCHAR2);
  ---------------------------------------------
  -- FUNCTION - DeleteFromLockTokenList
  --     Deletes specified token from the session lock token list
  -- PARAMETERS -
  --  token
  --     token to be deleted from token list
  -- RETURNS -
  --     returns TRUE if delete was successful
  ---------------------------------------------
  FUNCTION DeleteFromLockTokenList(token IN VARCHAR2) RETURN boolean;
  ---------------------------------------------
  -- FUNCTION - GetLockTokenList
  --     Gets the session lock token list
  -- PARAMETERS -
  --  None
  -- RETURNS -
  --  The session lock token list
  ---------------------------------------------
  FUNCTION GetLockTokenList RETURN LockTokenListType;
  ---------------------------------------------
  -- FUNCTION - ExistsResource(VARCHAR2)
  --     Given a string, returns true if the resource exists in the hierarchy.
  -- PARAMETERS -
  --  abspath
  --     Absolute path to the resource
  -- RETURNS -
  --     Returns TRUE if resource was found in the hierarchy.
  ---------------------------------------------
  FUNCTION ExistsResource(abspath IN VARCHAR2) RETURN BOOLEAN;
  ---------------------------------------------
  -- FUNCTION - CreateResource(VARCHAR2, VARCHAR2, VARCHAR2, VARCHAR2)
  --     Given a string, inserts a new resource into the hierarchy with
  --     the string as the contents.
  -- PARAMETERS -
  --  abspath
  --     Absolute path to the resource
  --  data
  --     String buffer containing the resource contents
  --  schemaurl
  --     for XML data, schema URL data conforms to (default null)
  --  elem
  --     element name (default null)
  -- RETURNS -
  --     Returns TRUE if resource was successfully inserted or updated
  ---------------------------------------------
  FUNCTION CreateResource(
    abspath IN VARCHAR2,
    data IN VARCHAR2,
    schemaurl IN VARCHAR2: = NULL,
    elem IN VARCHAR2: = NULL
  ) RETURN BOOLEAN;
  ---------------------------------------------
  -- FUNCTION - CreateResource(VARCHAR2, SYS.XMLTYPE, VARCHAR2, VARCHAR2)
  --     Given an XMLTYPE and a schema URL, inserts a new resource
  --     into the hierarchy with the XMLTYPE as the contents.
  -- PARAMETERS -
  --  abspath
  --     Absolute path to the resource
  --  data
  --     XMLTYPE containing the resource contents
  --  schemaurl
  --     schema URL the XmlType conforms to (default null)
  --  elem
  --     element name (default null)
  -- RETURNS -
  --     Returns TRUE if resource was successfully inserted or updated
  ---------------------------------------------
  FUNCTION CreateResource(
    abspath IN VARCHAR2,
    data IN SYS.XMLTYPE,
    schemaurl IN VARCHAR2: = NULL,
    elem IN VARCHAR2: = NULL
  ) RETURN BOOLEAN;
  ---------------------------------------------
  -- FUNCTION - CreateResource(VARCHAR2, REF SYS.XMLTYPE, BOOLEAN, BOOLEAN)
  --     Given a PREF to an existing XMLType row, inserts a new resource
  --     whose contents point directly at that row.  That row should
  --     not already exist inside another resource.
  -- PARAMETERS -
  --  abspath
  --     Absolute path to the resource
  --  data
  --     REF to the XMLType row containing the resource contents
  --  sticky
  --     If TRUE creates a sticky REF, otherwise non-sticky.
  --     Default is TRUE (for backwards compatibility).
  --  calcSize
  --     If true, calculate the content size of the resource. Default is
  --     false for performance reasons.
  -- RETURNS -
  --     Returns TRUE if resource was successfully inserted or updated
  ---------------------------------------------
  FUNCTION CreateResource(
    abspath IN VARCHAR2,
    data IN REF SYS.xmltype,
    sticky IN BOOLEAN: = TRUE,
    calcSize IN BOOLEAN: = FALSE
  ) RETURN BOOLEAN;
  ---------------------------------------------
  -- FUNCTION - CreateResource(VARCHAR2, CLOB)
  --     Given a CLOB, inserts a new resource into the hierarchy with
  --     the CLOB as the contents.
  -- PARAMETERS -
  --  abspath
  --     Absolute path to the resource
  --  data
  --     CLOB containing the resource contents
  -- RETURNS -
  --     Returns TRUE if resource was successfully inserted or updated
  ---------------------------------------------
  FUNCTION CreateResource(
    abspath IN VARCHAR2,
    data IN CLOB
  ) RETURN BOOLEAN;
  ---------------------------------------------
  -- FUNCTION - CreateResource(VARCHAR2, BFILE, NUMBER)
  --     Given a BFILE, inserts a new resource into the hierarchy with
  --     the contents loaded from the BFILE.
  -- PARAMETERS -
  --  abspath
  --     Absolute path to the resource
  --  data
  --     BFILE containing the resource contents
  --  csid
  --     character set id of the input bfile
  -- RETURNS -
  --     Returns TRUE if resource was successfully inserted or updated
  ---------------------------------------------
  FUNCTION CreateResource(
    abspath IN VARCHAR2,
    data IN BFILE,
    csid IN NUMBER: = 0
  ) RETURN BOOLEAN;
  ---------------------------------------------
  -- FUNCTION - CreateResource(VARCHAR2, BLOB, NUMBER)
  --     Given a BLOB, inserts a new resource into the hierarchy with
  --     the BLOB as the contents.
  -- PARAMETERS -
  --  abspath
  --     Absolute path to the resource
  --  data
  --     BLOB containing the resource contents
  --  csid
  --     character set id of the input blob
  -- RETURNS -
  --     Returns TRUE if resource was successfully inserted or updated
  ---------------------------------------------
  FUNCTION CreateResource(
    abspath IN VARCHAR2,
    data IN BLOB,
    csid IN NUMBER: = 0
  ) RETURN BOOLEAN;
  ---------------------------------------------
  -- FUNCTION - CreateFolder
  --     Creates a folder in the Repository
  -- PARAMETERS -
  --  abspath
  --     Absolute path iin the Hierarchy were the resource will be stored
  -- RETURNS -
  --     Returns TRUE if folder was created succesfully in Repository
  ---------------------------------------------
  FUNCTION CreateFolder(abspath IN VARCHAR2) RETURN BOOLEAN;
  ---------------------------------------------
  -- FUNCTION - AddResource(VARCHAR2, VARCHAR2)
  --     Given a string, inserts a new resource into the hierarchy with
  --     the string as the contents.
  -- PARAMETERS -
  --  abspath
  --     Absolute path to the resource
  --  data
  --     String buffer containing the resource contents
  -- RETURNS -
  --     Returns 2 if resource already exists
  --             1 if resource was successfully inserted
  --             0 otherwise
  ---------------------------------------------
  FUNCTION AddResource(
    abspath IN VARCHAR2,
    data IN VARCHAR2
  ) RETURN NUMBER;
  ---------------------------------------------
  -- PROCEDURE - DeleteResource
  --     Deletes a resource from the Hierarchy
  -- PARAMETERS -
  --  abspath
  --     Absolute path in the Hierarchy for resource to be deleted
  --  delete_option : one of the following
  --    DELETE_RESOURCE ::
  --      delete the resource alone. Fails if the resource has children
  --    DELETE_RECURSIVE ::
  --      delete the resource with the children, if any.
  --    DELETE_FORCE ::
  --      delete the resource even if the object it contains is invalid.
  --    DELETE_RECURSIVE_FORCE ::
  --      delete the resource and all children, ignoring any errors raised
  --      by contained objects being invalid
  ---------------------------------------------
  PROCEDURE DeleteResource(
    abspath IN VARCHAR2,
    delete_option IN pls_integer: = DELETE_RESOURCE
  );
  ---------------------------------------------
  -- PROCEDURE - Link
  --     Creates a link from a specified folder to a specified resource.
  -- PARAMETERS -
  --  srcpath
  --     Path name of the resource to which a link is created.
  --  linkfolder
  --     Folder in which the new link is placed.
  --  linkname
  --     Name of the new link.
  --  linktype
  --     Type of link to be created.
  --     One of the following:
  --         DBMS_XDB.LINK_TYPE_HARD (default)
  --         DBMS_XDB.LINK_TYPE_WEAK
  --         DBMS_XDB.LINK_TYPE_SYMBOLIC
  ---------------------------------------------
  PROCEDURE Link(
    srcpath IN VARCHAR2,
    linkfolder IN VARCHAR2,
    linkname IN VARCHAR2,
    linktype IN PLS_INTEGER: = DBMS_XDB.LINK_TYPE_HARD
  );
  ---------------------------------------------
  -- PROCEDURE - Rename
  --     Renames a XDB resource
  -- PARAMETERS -
  --  srcpath
  --     Absolute path in the Hierarchy of the source resource
  --  destfolder
  --     Absolute path in the Hierarchy of the dest folder
  --  newname
  --     Name of the child in the destination folder
  ---------------------------------------------
  PROCEDURE RenameResource(
    srcpath IN VARCHAR2,
    destfolder IN VARCHAR2,
    newname IN VARCHAR2
  );
  ---------------------------------------------
  -- FUNCTION - getAclDoc
  --     gets acl document that protects resource given in path
  -- PARAMETERS -
  --  abspath
  --     Absolute path in the Hierarchy of the resource whose acl doc is required
  -- RETURNS -
  --     Returns xmltype for acl document
  ---------------------------------------------
  FUNCTION getAclDocument(abspath IN VARCHAR2) RETURN sys.xmltype;
  ---------------------------------------------
  -- FUNCTION - getPrivileges
  --     Gets all system and user privileges granted to the current user
  --     on the given XDB resource
  -- PARAMETERS -
  --  res_path
  --     Absolute path in the Hierarchy for XDB resource
  -- RETURNS -
  --     Returns a XMLType instance of <privilege> element
  --     which contains the list of all (leaf) privileges
  --     granted on this resource to the current user.
  --     It includes all granted system and user privileges.
  --     Example :
  --       <privilege xmlns="http://xmlns.oracle.com/xdb/acl.xsd"
  --                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  --                  xsi:schemaLocation="http://xmlns.oracle.com/xdb/acl.xsd
  --                                      http://xmlns.oracle.com/xdb/acl.xsd"
  --                  xmlns:dav="DAV:"
  --                  xmlns:emp="http://www.example.com/emp.xsd">
  --          <read-contents/>
  --          <read-properties/>
  --          <resolve/>
  --          <dav:read-acl/>
  --          <emp:Hire/>
  --       </privilege>
  ---------------------------------------------
  FUNCTION getPrivileges(res_path IN VARCHAR2) RETURN sys.xmltype;
  ---------------------------------------------
  -- FUNCTION - changePrivileges
  --     change access privileges on given XDB resource
  -- PARAMETERS -
  --  res_path
  --     Absolute path in the Hierarchy for XDB resource
  --  ace
  --     an XMLType instance of the <ace> element which specifies
  --     the <principal>, the operation <grant> and the list of
  --     privileges.
  --     If no ACE with the same principal and the same operation
  --     (grant/deny) already exists in the ACL, the new ACE is added
  --     at the end of the ACL.
  --  replace
  --    This argument determines the result of changePrivileges if
  --    an ACE with the same principal and same operation (grant/deny)
  --    already exists in the ACL.
  --
  --    If set to TRUE,
  --       the old ACE is replaced with the new one.
  --    else
  --       the privileges of the old and new ACEs are combined into a
  --       single ACE.
  --
  -- RETURNS -
  --     Returns positive integer if ACL was successfully modified
  ---------------------------------------------
  FUNCTION changePrivileges(
    res_path IN VARCHAR2,
    ace IN xmltype
  ) RETURN pls_integer;
  ---------------------------------------------
  -- FUNCTION - checkPrivileges
  --     checks access privileges granted on specified XDB resource
  -- PARAMETERS -
  --  res_path
  --     Absolute path in the Hierarchy for XDB resource
  --  privs
  --     Requested set of access privileges
  --     This argument is a XMLType instance of the <privilege> element.
  -- RETURNS -
  --     Returns positive integer if all requested privileges granted
  ---------------------------------------------
  FUNCTION checkPrivileges(
    res_path IN VARCHAR2,
    privs IN xmltype
  ) RETURN pls_integer;
  ---------------------------------------------
  -- PROCEDURE - setacl
  --     sets the ACL on given XDB resource to be the specified in the acl path
  -- PARAMETERS -
  --  res_path
  --     Absolute path in the Hierarchy for XDB resource
  --  acl_path
  --     Absolute path in the Hierarchy for XDB acl
  ---------------------------------------------
  PROCEDURE setacl(res_path IN VARCHAR2, acl_path IN VARCHAR2);
  ---------------------------------------------
  -- FUNCTION - AclCheckPrivileges
  --     checks access privileges granted by specified ACL document
  -- PARAMETERS -
  --  acl_path
  --     Absolute path in the Hierarchy for ACL document
  --  owner
  --     Resource owner name. The pseudo user "XDBOWNER" is replaced
  --     by this user during ACL privilege resolution
  --  privs
  --     Requested set of access privileges
  --     This argument is a XMLType instance of the <privilege> element.
  -- RETURNS -
  --     Returns positive integer if all requested privileges granted
  ---------------------------------------------
  FUNCTION AclCheckPrivileges(
    acl_path IN VARCHAR2,
    owner IN VARCHAR2,
    privs IN xmltype
  ) RETURN pls_integer;
  ---------------------------------------------
  -- FUNCTION - GetResOID(abspath VARCHAR2)
  --     Returns the OID of the resource, given its absolute path
  --
  -- PARAMETERS -
  --  abspath
  --     Absolute path to the resource
  -- RETURNS -
  --     OID of resource if present, NULL otherwise
  ---------------------------------------------
  FUNCTION GetResOID(abspath IN VARCHAR2) RETURN RAW;
  ---------------------------------------------
  -- FUNCTION - CreateOIDPath(oid RAW)
  --     Returns the OID-based virtual path to the resource
  --
  -- PARAMETERS -
  --  OID
  --     OID of the resource
  -- RETURNS -
  --     the OID-based virtual path to the resource
  ---------------------------------------------
  FUNCTION CreateOIDPath(oid IN RAW) RETURN VARCHAR2;
  -----------------------------------------------------------
  -- PROCEDURE - appendResourceMetadata
  --     Appends the given piece of metadata to the resource
  --
  -- PARAMETERS -
  --  abspath
  --     Absolute path of the resource
  --  data
  --     Metadata (can be schema based or NSB). SB metadata
  --     will be stored in its own table.
  -- RETURNS -
  --     Nothing
  -----------------------------------------------------------
  PROCEDURE appendResourceMetadata(
    abspath IN VARCHAR2,
    data IN SYS.xmltype
  );
  -----------------------------------------------------------
  -- PROCEDURE - appendResourceMetadata
  --     Appends the given piece of metadata identified by a REF
  --     to the resource
  --
  -- PARAMETERS -
  --  abspath
  --     Absolute path of the resource
  --  data
  --     REF to the piece of metadata (schema based)
  -- RETURNS -
  --     Nothing
  -----------------------------------------------------------
  PROCEDURE appendResourceMetadata(
    abspath IN VARCHAR2,
    data IN REF SYS.xmltype
  );
  -----------------------------------------------------------
  -- PROCEDURE - deleteResourceMetadata
  --     Deletes metadata from a resource (can only be used for SB metadata)
  --
  -- PARAMETERS -
  --  abspath
  --     Absolute path of the resource
  --  metadata
  --     REF to the piece of metadata (schema based) to be deleted
  --  delete_option
  --     Can be one of the following:
  --     DELETE_RES_METADATA_CASCADE : deletes the corresponding row
  --     in the metadata table
  --     DELETE_RES_METADATA_NOCASCADE : does not delete the row in
  --     the metadata table
  -- RETURNS -
  --     Nothing
  -----------------------------------------------------------
  PROCEDURE deleteResourceMetadata(
    abspath IN VARCHAR2,
    metadata IN REF SYS.XMLTYPE,
    delete_option IN pls_integer: = DELETE_RES_METADATA_CASCADE
  );
  -----------------------------------------------------------
  -- PROCEDURE - deleteResourceMetadata
  --     Deletes metadata from a resource (can be used for SB or
  --     NSB metadata)
  --
  -- PARAMETERS -
  --  abspath
  --     Absolute path of the resource
  --  metadatans
  --     Namespace of the metadata fragment to be removed
  --  metadataname
  --     Local name of the metadata fragment to be removed
  --  delete_option
  --     This is only applicable for SB metadata.
  --     Can be one of the following:
  --     DELETE_RES_METADATA_CASCADE : deletes the corresponding row
  --     in the metadata table
  --     DELETE_RES_METADATA_NOCASCADE : does not delete the row in
  --     the metadata table
  -- RETURNS -
  --     Nothing
  -----------------------------------------------------------
  procedure deleteResourceMetadata(
    abspath IN VARCHAR2,
    metadatans IN VARCHAR2,
    metadataname IN VARCHAR2,
    delete_option IN pls_integer: = DELETE_RES_METADATA_CASCADE
  );
  -----------------------------------------------------------
  -- PROCEDURE - updateResourceMetadata
  --     Updates metadata for a resource (can be used to update SB
  --     metadata only). The new metadata must be SB.
  --
  -- PARAMETERS -
  --  abspath
  --     Absolute path of the resource
  --  oldmetadata
  --     REF to the old piece of metadata
  --  newmetadata
  --     REF to the new piece of metadata to replace it with
  -- RETURNS -
  --     Nothing
  -----------------------------------------------------------
  PROCEDURE updateResourceMetadata(
    abspath IN VARCHAR2,
    oldmetadata IN REF SYS.XMLTYPE,
    newmetadata IN REF SYS.XMLTYPE
  );
  -----------------------------------------------------------
  -- PROCEDURE - updateResourceMetadata
  --     Updates metadata for a resource (can be used to update SB
  --     metadata only). The new metadata can be either SB or NSB
  --
  -- PARAMETERS -
  --  abspath
  --     Absolute path of the resource
  --  oldmetadata
  --     REF to the old piece of metadata
  --  newmetadata
  --     New piece of metadata (can be either SB or NSB)
  -- RETURNS -
  --     Nothing
  -----------------------------------------------------------
  PROCEDURE updateResourceMetadata(
    abspath IN VARCHAR2,
    oldmetadata IN REF SYS.XMLTYPE,
    newmetadata IN XMLTYPE
  );
  -----------------------------------------------------------
  -- PROCEDURE - updateResourceMetadata
  --     Updates metadata for a resource - can be used for both
  --     SB or NSB metadata.
  --
  -- PARAMETERS -
  --  abspath
  --     Absolute path of the resource
  --  oldns, oldname
  --     namespace and local name pair identifying old metadata
  --  newmetadata
  --     New piece of metadata (can be either SB or NSB)
  -- RETURNS -
  --     Nothing
  -----------------------------------------------------------
  PROCEDURE updateResourceMetadata(
    abspath IN VARCHAR2,
    oldns IN VARCHAR2,
    oldname IN VARCHAR,
    newmetadata IN XMLTYPE
  );
  -----------------------------------------------------------
  -- PROCEDURE - updateResourceMetadata
  --     Updates metadata for a resource - can be used for both
  --     SB or NSB metadata. New metadata must be SB.
  --
  -- PARAMETERS -
  --  abspath
  --     Absolute path of the resource
  --  oldns, oldname
  --     namespace and local name pair identifying old metadata
  --  newmetadata
  --     REF to new metadata
  -- RETURNS -
  --     Nothing
  -----------------------------------------------------------
  PROCEDURE updateResourceMetadata(
    abspath IN VARCHAR2,
    oldns IN VARCHAR2,
    oldname IN VARCHAR,
    newmetadata IN REF SYS.XMLTYPE
  );
  -----------------------------------------------------------
  -- PROCEDURE - purgeResourceMetadata
  --     Deletes all user metadata from a resource
  --     SB metadata is removed in cascade mode i.e. the rows
  --     are deleted from the corresponding metadata tables
  --
  -- PARAMETERS -
  --  abspath
  --     Absolute path of the resource
  -- RETURNS -
  --     Nothing
  -----------------------------------------------------------
  PROCEDURE purgeResourceMetadata(abspath IN VARCHAR2);
  ---------------------------------------------
  -- FUNCTION - getResource
  --    Given a path in the repository, returns the XDBResource
  -- PARAMETERS -
  --    abspath - absolute path in the repository
  -- RETURNS -
  --    The XDBResource.
  ---------------------------------------------
  FUNCTION getResource(abspath IN VARCHAR2) return dbms_xdbresource.XDBResource;
  -----------------------------------------------------------
  -- PROCEDURE - refreshContentSize
  --     Recompute the content size of the specified resource,
  --     disregarding the existing content size. Store it in the Size
  --     element in the resource schema, and set the SizeAccurate flag
  --     appropriately.
  --
  -- PARAMETERS -
  --  abspath (IN)
  --     Absolute path of the resource. If the path is a folder, then
  --     use the recurse flag as below.
  --  recurse (IN)
  --     Used only if abspath specifies a folder. If true, refresh the
  --     size of all resources in the resource tree rooted at the
  --     specified resource. If false, compute the size of all
  --     documents/subfolders in this folder only.
  -- RETURNS -
  --     Nothing.
  -----------------------------------------------------------
  PROCEDURE refreshContentSize (
    abspath IN VARCHAR2,
    recurse IN BOOLEAN: = FALSE
  );
  -----------------------------------------------------------
  -- PROCEDURE - ProcessLinks
  --     Process document links in the specified resource,
  --     looking at the current resource configuration parameters.
  --
  -- PARAMETERS -
  --  abspath (IN)
  --     Absolute path of the resource. If the path is a folder, then
  --     use the recurse flag as below.
  --  recurse (IN)
  --     Used only if abspath specifies a folder. If true, process
  --     links of all resources in the resource tree rooted at the
  --     specified resource. If false, process links of all
  --     documents in this folder only.
  -- RETURNS -
  --     Nothing.
  -----------------------------------------------------------
  PROCEDURE ProcessLinks (
    abspath IN VARCHAR2,
    recurse IN BOOLEAN: = FALSE
  );
  -----------------------------------------------------------
  -- FUNCTION - isFolder
  --
  -- PARAMETERS -
  --  abspath (IN)
  --     Absolute path of the resource.
  -- RETURNS -
  --     True if the resource is a folder / container.
  -----------------------------------------------------------
  FUNCTION isFolder (abspath IN VARCHAR2) return BOOLEAN;
  -----------------------------------------------------------
  -- PROCEDURE - touchResource
  --  Change the last mod time of the resource to the current time.
  --
  -- PARAMETERS -
  --  abspath (IN)
  --     Absolute path of the resource.
  -----------------------------------------------------------
  PROCEDURE touchResource (abspath IN VARCHAR2);
  -----------------------------------------------------------
  -- PROCEDURE - changeOwner
  --  Change the owner of the resource to the given user.
  --
  -- PARAMETERS -
  --  abspath (IN)
  --     Absolute path of the resource.
  --  owner (IN)
  --     Owner
  --  recurse (IN)
  --     If true, recursively change owner of all resources in the
  --     folder tree.
  -----------------------------------------------------------
  PROCEDURE changeOwner (
    abspath IN VARCHAR2,
    owner IN VARCHAR2,
    recurse IN BOOLEAN: = FALSE
  );
  -----------------------------------------------------------
  -- FUNCTION - hascharcontent
  --
  -- PARAMETERS -
  --  abspath (IN)
  --     Absolute path of the resource.
  -- RETURNS -
  --     True if the resource has character content.
  -----------------------------------------------------------
  function HASCHARCONTENT (abspath IN VARCHAR2) return BOOLEAN;
  -----------------------------------------------------------
  -- FUNCTION - hasxmlcontent
  --
  -- PARAMETERS -
  --  abspath (IN)
  --     Absolute path of the resource.
  -- RETURNS -
  --     True if the resource has xml content.
  -----------------------------------------------------------
  function HASXMLCONTENT (abspath IN VARCHAR2) return BOOLEAN;
  -----------------------------------------------------------
  -- FUNCTION - hasxmlreference
  --
  -- PARAMETERS -
  --  abspath (IN)
  --     Absolute path of the resource.
  -- RETURNS -
  --     True if the resource has a ref to xml content.
  -----------------------------------------------------------
  function HASXMLREFERENCE (abspath IN VARCHAR2) return BOOLEAN;
  -----------------------------------------------------------
  -- FUNCTION - hasblobcontent
  --
  -- PARAMETERS -
  --  abspath (IN)
  --     Absolute path of the resource.
  -- RETURNS -
  --     True if the resource has blob content.
  -----------------------------------------------------------
  function HASBLOBCONTENT (abspath IN VARCHAR2) return BOOLEAN;
  ---------------------------------------------
  -- FUNCTION - getContentClob
  --    Returns the contents of the resource as a clob.
  -- PARAMETERS -
  --    abspath - Absolute path of the resource
  -- RETURNS -
  --    The contents as CLOB.
  ---------------------------------------------
  FUNCTION getContentClob(abspath IN VARCHAR2) return CLOB;
  ---------------------------------------------
  -- FUNCTION - getContentBlob
  --    Returns the contents of the resource as a blob.
  -- PARAMETERS -
  --    abspath - Absolute path of the resource.
  --    csid - OUT - The character set id of the blob returned.
  --    locksrc - if true, lock and return the source lob. If false,
  --    return a temp lob copy.
  -- RETURNS -
  --    The contents as BLOB.
  ---------------------------------------------
  FUNCTION getContentBlob (
    abspath IN VARCHAR2,
    csid OUT PLS_INTEGER,
    locksrc IN BOOLEAN: = FALSE
  ) return BLOB;
  ---------------------------------------------
  -- FUNCTION - getContentXMLType
  --    Returns the contents of the resource as an XMLType.
  -- PARAMETERS -
  --    abspath - Absolute path of the resource.
  -- RETURNS -
  --    The contents as XMLType.
  ---------------------------------------------
  FUNCTION getContentXMLType (abspath IN VARCHAR2) return SYS.XMLType;
  ---------------------------------------------
  -- FUNCTION - getContentVarchar2
  --    Returns the contents of the resource as an Varchar2.
  -- PARAMETERS -
  --    abspath - Absolute path of the resource.
  -- RETURNS -
  --    The contents as Varchar2.
  ---------------------------------------------
  FUNCTION getContentVarchar2 (abspath IN VARCHAR2) return VARCHAR2;
  ---------------------------------------------
  -- FUNCTION - getContentXMLRef
  --    Returns the contents of the resource as a ref to an xmltype.
  -- PARAMETERS -
  --    abspath - Absolute path of the resource.
  -- RETURNS -
  --    The contents as a ref to an xmltype if the resource is ref
  --    based, else null.
  ---------------------------------------------
  FUNCTION getContentXMLRef (abspath IN VARCHAR2) return ref SYS.XMLType;
  ---------------------------------------------
  ---------------------------------------------
  -- FUNCTION - getxdb_tablespace
  --     Returns the current tablespace of xdb, on the assumption
  --     that that is the tablespace of XDB.XDB$RESOURCE.
  -- PARAMETERS - None.
  --
  -- NOTE: Currently used by DBMS_XDBT, which is AUTHID CURRENT_USER
  --       package, so this API will not be moved to DBMS_XDB_ADMIN.
  --       This API is useful if we envision having XDB's objects
  --       span multiple tablespaces. Otherwise, DBA_USERS can be queried.
  ---------------------------------------------
  FUNCTION getxdb_tablespace RETURN VARCHAR2;
  end dbms_xdb_repos;
