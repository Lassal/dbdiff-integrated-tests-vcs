schema: SYS
name: DBMS_CREDENTIAL
routineType: PACKAGE
returnParamater: null
parameters:
- name: CREATE_CREDENTIAL.CREDENTIAL_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: CREATE_CREDENTIAL.USERNAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: CREATE_CREDENTIAL.PASSWORD
  ordinalPosition: 3
  dataType: VARCHAR2
  parameterMode: IN
- name: CREATE_CREDENTIAL.DATABASE_ROLE
  ordinalPosition: 4
  dataType: VARCHAR2
  parameterMode: IN
- name: CREATE_CREDENTIAL.WINDOWS_DOMAIN
  ordinalPosition: 5
  dataType: VARCHAR2
  parameterMode: IN
- name: CREATE_CREDENTIAL.COMMENTS
  ordinalPosition: 6
  dataType: VARCHAR2
  parameterMode: IN
- name: CREATE_CREDENTIAL.ENABLED
  ordinalPosition: 7
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: DISABLE_CREDENTIAL.CREDENTIAL_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: DISABLE_CREDENTIAL.FORCE
  ordinalPosition: 2
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: DROP_CREDENTIAL.CREDENTIAL_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: DROP_CREDENTIAL.FORCE
  ordinalPosition: 2
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: ENABLE_CREDENTIAL.CREDENTIAL_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: UPDATE_CREDENTIAL.CREDENTIAL_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: UPDATE_CREDENTIAL.ATTRIBUTE
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: UPDATE_CREDENTIAL.VALUE
  ordinalPosition: 3
  dataType: VARCHAR2
  parameterMode: IN
routineDefinition: |-
  PACKAGE dbms_credential AUTHID CURRENT_USER AS ---Allowed credential logging levels
  /*************************************************************

   * Credential Administration Procedures

   *************************************************************

   */
  -- Create a new credential. The credential name can be optionally qualified
  -- with a schema.
  PROCEDURE create_credential(
    credential_name IN VARCHAR2,
    username IN VARCHAR2,
    password IN VARCHAR2,
    database_role IN VARCHAR2 DEFAULT NULL,
    windows_domain IN VARCHAR2 DEFAULT NULL,
    comments IN VARCHAR2 DEFAULT NULL,
    enabled IN BOOLEAN DEFAULT TRUE
  );
  -- Drops an existing credential (or a comma separated list of credentials).
  -- When force is set to false the credential must not be
  -- referred to by any job or extproc.  When force is set to true,
  -- any jobs referring to this credential will be disabled (same behavior
  -- as calling the disable routine on those jobs with the force option).
  -- exproc alias libraries that reference the credential will become invalid
  PROCEDURE drop_credential(
    credential_name IN VARCHAR2,
    force IN BOOLEAN DEFAULT FALSE
  );
  -- Update credential changes the value of an attribute for a given credential
  -- credential attributes which can be updated with the following call:
  --
  -- username           - VARCHAR2
  --                      user to execute the job as.
  -- password           - VARCHAR2
  --                      password to use to authenticate the user
  -- comments           - VARCHAR2
  --                      an optional comment. This can describe what the
  --                      credential is intended to be used for.
  -- windows_domain     - VARCHAR2
  --                      Windows domain to use when logging in
  -- NOTE-------------------------
  -- The ENABLED attribute can not be updated with this call
  PROCEDURE update_credential(
    credential_name IN VARCHAR2,
    attribute IN VARCHAR2,
    value IN VARCHAR2
  );
  -- Disables an existing Oracle credential
  -- If force is set to FALSE, the credential must not be referenced by any
  -- object or library. If the credential is referenced by an object, the call
  -- returns error
  -- If force is set to TRUE, the credential will be disabled either way
  PROCEDURE disable_credential(
    credential_name IN VARCHAR2,
    force IN BOOLEAN DEFAULT FALSE
  );
  -- Enables an existing oracle credential
  --This will NOT return an error if the credential was enabled already
  PROCEDURE enable_credential(credential_name IN VARCHAR2);
  END dbms_credential;
