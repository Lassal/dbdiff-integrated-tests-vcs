schema: SYS
name: DBMS_DB_VERSION
routineType: PACKAGE
returnParamater: null
parameters: []
routineDefinition: |-
  package dbms_db_version is version constant pls_integer: = 12;
  -- RDBMS version number
  release constant pls_integer: = 1;
  -- RDBMS release number
  /* The following boolean constants follow a naming convention. Each

       constant gives a name for a boolean expression. For example,

       ver_le_9_1  represents version <=  9 and release <= 1

       ver_le_10_2 represents version <= 10 and release <= 2

       ver_le_10   represents version <= 10



       A typical usage of these boolean constants is



           $if dbms_db_version.ver_le_10 $then

             version 10 and ealier code

           $elsif dbms_db_version.ver_le_11 $then

             version 11 code

           $else

             version 12 and later code

           $end



       This code structure will protect any reference to the code

       for version 12. It also prevents the controlling package

       constant dbms_db_version.ver_le_11 from being referenced

       when the program is compiled under version 10. A similar

       observation applies to version 11. This scheme works even

       though the static constant ver_le_11 is not defined in

       version 10 database because conditional compilation protects

       the $elsif from evaluation if the dbms_db_version.ver_le_10 is

       TRUE.

    */
  ver_le_9_1 constant boolean: = FALSE;
  ver_le_9_2 constant boolean: = FALSE;
  ver_le_9 constant boolean: = FALSE;
  ver_le_10_1 constant boolean: = FALSE;
  ver_le_10_2 constant boolean: = FALSE;
  ver_le_10 constant boolean: = FALSE;
  ver_le_11_1 constant boolean: = FALSE;
  ver_le_11_2 constant boolean: = FALSE;
  ver_le_11 constant boolean: = FALSE;
  ver_le_12_1 constant boolean: = TRUE;
  ver_le_12 constant boolean: = TRUE;
  end dbms_db_version;
