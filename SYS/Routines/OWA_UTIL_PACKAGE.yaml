schema: SYS
name: OWA_UTIL
routineType: PACKAGE
returnParamater:
  name: VALIDATE_ARG.(--return--)
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 0
parameters:
- name: BIND_VARIABLES.THEQUERY
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: BIND_VARIABLES.BV1NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: BIND_VARIABLES.BV1VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: BIND_VARIABLES.BV2NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: BIND_VARIABLES.BV2VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 5
- name: BIND_VARIABLES.BV3NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 6
- name: BIND_VARIABLES.BV3VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 7
- name: BIND_VARIABLES.BV4NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 8
- name: BIND_VARIABLES.BV4VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 9
- name: BIND_VARIABLES.BV5NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 10
- name: BIND_VARIABLES.BV5VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 11
- name: BIND_VARIABLES.BV6NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 12
- name: BIND_VARIABLES.BV6VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 13
- name: BIND_VARIABLES.BV7NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 14
- name: BIND_VARIABLES.BV7VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 15
- name: BIND_VARIABLES.BV8NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 16
- name: BIND_VARIABLES.BV8VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 17
- name: BIND_VARIABLES.BV9NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 18
- name: BIND_VARIABLES.BV9VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 19
- name: BIND_VARIABLES.BV10NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 20
- name: BIND_VARIABLES.BV10VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 21
- name: BIND_VARIABLES.BV11NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 22
- name: BIND_VARIABLES.BV11VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 23
- name: BIND_VARIABLES.BV12NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 24
- name: BIND_VARIABLES.BV12VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 25
- name: BIND_VARIABLES.BV13NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 26
- name: BIND_VARIABLES.BV13VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 27
- name: BIND_VARIABLES.BV14NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 28
- name: BIND_VARIABLES.BV14VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 29
- name: BIND_VARIABLES.BV15NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 30
- name: BIND_VARIABLES.BV15VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 31
- name: BIND_VARIABLES.BV16NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 32
- name: BIND_VARIABLES.BV16VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 33
- name: BIND_VARIABLES.BV17NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 34
- name: BIND_VARIABLES.BV17VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 35
- name: BIND_VARIABLES.BV18NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 36
- name: BIND_VARIABLES.BV18VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 37
- name: BIND_VARIABLES.BV19NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 38
- name: BIND_VARIABLES.BV19VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 39
- name: BIND_VARIABLES.BV20NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 40
- name: BIND_VARIABLES.BV20VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 41
- name: BIND_VARIABLES.BV21NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 42
- name: BIND_VARIABLES.BV21VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 43
- name: BIND_VARIABLES.BV22NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 44
- name: BIND_VARIABLES.BV22VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 45
- name: BIND_VARIABLES.BV23NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 46
- name: BIND_VARIABLES.BV23VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 47
- name: BIND_VARIABLES.BV24NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 48
- name: BIND_VARIABLES.BV24VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 49
- name: BIND_VARIABLES.BV25NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 50
- name: BIND_VARIABLES.BV25VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 51
- name: CALENDARPRINT(1).P_QUERY
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CALENDARPRINT(1).P_MF_ONLY
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: CALENDARPRINT(2).P_CURSOR
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 1
- name: CALENDARPRINT(2).P_MF_ONLY
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: CELLSPRINT(1).P_COLCNT
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 1
- name: CELLSPRINT(1).P_RESULTTBL
  dataType: PL/SQL TABLE
  parameterMode: IN
  ordinalPosition: 2
- name: CELLSPRINT(1).P_FORMAT_NUMBERS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CELLSPRINT(2).P_THEQUERY
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CELLSPRINT(2).P_MAX_ROWS
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: CELLSPRINT(2).P_FORMAT_NUMBERS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CELLSPRINT(3).P_THECURSOR
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 1
- name: CELLSPRINT(3).P_MAX_ROWS
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: CELLSPRINT(3).P_FORMAT_NUMBERS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CELLSPRINT(4).P_THEQUERY
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CELLSPRINT(4).P_MAX_ROWS
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: CELLSPRINT(4).P_FORMAT_NUMBERS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CELLSPRINT(4).P_SKIP_REC
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 4
- name: CELLSPRINT(4).P_MORE_DATA
  dataType: PL/SQL BOOLEAN
  parameterMode: OUT
  ordinalPosition: 5
- name: CELLSPRINT(5).P_THECURSOR
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 1
- name: CELLSPRINT(5).P_MAX_ROWS
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: CELLSPRINT(5).P_FORMAT_NUMBERS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CELLSPRINT(5).P_SKIP_REC
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 4
- name: CELLSPRINT(5).P_MORE_DATA
  dataType: PL/SQL BOOLEAN
  parameterMode: OUT
  ordinalPosition: 5
- name: CELLSPRINT(6).P_THEQUERY
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CELLSPRINT(6).P_MAX_ROWS
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: CELLSPRINT(6).P_FORMAT_NUMBERS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CELLSPRINT(6).P_RECCNT
  dataType: NUMBER
  parameterMode: OUT
  ordinalPosition: 4
- name: CELLSPRINT(7).P_THECURSOR
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 1
- name: CELLSPRINT(7).P_MAX_ROWS
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: CELLSPRINT(7).P_FORMAT_NUMBERS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CELLSPRINT(7).P_RECCNT
  dataType: NUMBER
  parameterMode: OUT
  ordinalPosition: 4
- name: CELLSPRINT(8).P_THEQUERY
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CELLSPRINT(8).P_MAX_ROWS
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: CELLSPRINT(8).P_FORMAT_NUMBERS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CELLSPRINT(8).P_SKIP_REC
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 4
- name: CELLSPRINT(8).P_MORE_DATA
  dataType: PL/SQL BOOLEAN
  parameterMode: OUT
  ordinalPosition: 5
- name: CELLSPRINT(8).P_RECCNT
  dataType: NUMBER
  parameterMode: OUT
  ordinalPosition: 6
- name: CELLSPRINT(9).P_THECURSOR
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 1
- name: CELLSPRINT(9).P_MAX_ROWS
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: CELLSPRINT(9).P_FORMAT_NUMBERS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CELLSPRINT(9).P_SKIP_REC
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 4
- name: CELLSPRINT(9).P_MORE_DATA
  dataType: PL/SQL BOOLEAN
  parameterMode: OUT
  ordinalPosition: 5
- name: CELLSPRINT(9).P_RECCNT
  dataType: NUMBER
  parameterMode: OUT
  ordinalPosition: 6
- name: CHOOSE_DATE.P_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CHOOSE_DATE.P_DATE
  dataType: DATE
  parameterMode: IN
  ordinalPosition: 2
- name: COMMA_TO_IDENT_ARR(1).LIST
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: COMMA_TO_IDENT_ARR(1).ARR
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 2
- name: COMMA_TO_IDENT_ARR(1).LENARR
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 3
- name: COMMA_TO_IDENT_ARR(1).ARRLEN
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: OUT
  ordinalPosition: 4
- name: COMMA_TO_IDENT_ARR(2).LIST
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: COMMA_TO_IDENT_ARR(2).ARR
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 2
- name: COMMA_TO_IDENT_ARR(2).LENARR
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 3
- name: COMMA_TO_IDENT_ARR(2).ARRLEN
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: OUT
  ordinalPosition: 4
- name: DESCRIBE_COLS.CTABLE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: DESCRIBE_COLS.CCOLUMNS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: DESCRIBE_COLS.COL_NAMES
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 3
- name: DESCRIBE_COLS.COL_DTYPES
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 4
- name: DESCRIBE_COLS.NNUM_COLS
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: OUT
  ordinalPosition: 5
- name: GET_CGI_ENV.PARAM_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: ITE.TF
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 1
- name: ITE.YES
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: ITE.NO
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: LISTPRINT(1).P_THECURSOR
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 1
- name: LISTPRINT(1).P_CNAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: LISTPRINT(1).P_NSIZE
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 3
- name: LISTPRINT(1).P_MULTIPLE
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 4
- name: LISTPRINT(2).P_THEQUERY
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: LISTPRINT(2).P_CNAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: LISTPRINT(2).P_NSIZE
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 3
- name: LISTPRINT(2).P_MULTIPLE
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 4
- name: MIME_HEADER.CCONTENT_TYPE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: MIME_HEADER.BCLOSE_HEADER
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 2
- name: MIME_HEADER.CCHARSET
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: NAME_RESOLVE.CNAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: NAME_RESOLVE.O_PROCOWNER
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 2
- name: NAME_RESOLVE.O_PROCNAME
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 3
- name: REDIRECT_URL.CURL
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: REDIRECT_URL.BCLOSE_HEADER
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 2
- name: RESOLVE_TABLE.COBJECT
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: RESOLVE_TABLE.CSCHEMA
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: RESOLVE_TABLE.RESOLVED_NAME
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 3
- name: RESOLVE_TABLE.RESOLVED_OWNER
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 4
- name: RESOLVE_TABLE.RESOLVED_DB_LINK
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 5
- name: SHOW_QUERY_COLUMNS.CTABLE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: SHOWSOURCE.CNAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: SIGNATURE(2).CNAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: STATUS_LINE.NSTATUS
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 1
- name: STATUS_LINE.CREASON
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: STATUS_LINE.BCLOSE_HEADER
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 3
- name: TABLECAPTION.CCAPTION
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: TABLECAPTION.CALIGN
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: TABLECAPTION.NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 3
- name: TABLECLOSE(1).NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 1
- name: TABLECLOSE(2).NTABLE_WIDTH
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 1
- name: TABLECLOSE(2).NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 2
- name: TABLEDATA.CDATA
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: TABLEDATA.NCOLUMN_SIZE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 2
- name: TABLEDATA.CALIGN
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: TABLEDATA.CROWSTRING
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 4
- name: TABLEDATA.NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 5
- name: TABLEHEADER(1).CCOLUMN_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: TABLEHEADER(1).NCOLUMN_SIZE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 2
- name: TABLEHEADER(1).CALIGN
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: TABLEHEADER(1).CROWSTRING
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 4
- name: TABLEHEADER(1).NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 5
- name: TABLEHEADER(2).CCOLUMN_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: TABLEHEADER(2).NCOLUMN_SIZE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 2
- name: TABLEHEADER(2).CALIGN
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: TABLEHEADER(2).CROWSTRING
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 4
- name: TABLEHEADER(2).NTABLE_WIDTH
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: INOUT
  ordinalPosition: 5
- name: TABLEHEADER(2).NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 6
- name: TABLEHEADERROWCLOSE(1).CROWSTRING
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 1
- name: TABLEHEADERROWCLOSE(1).NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 2
- name: TABLEHEADERROWCLOSE(2).CROWSTRING
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 1
- name: TABLEHEADERROWCLOSE(2).NTABLE_WIDTH
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 2
- name: TABLEHEADERROWCLOSE(2).NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 3
- name: TABLEHEADERROWOPEN(1).CROWSTRING
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 1
- name: TABLEHEADERROWOPEN(1).NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 2
- name: TABLEHEADERROWOPEN(2).CROWSTRING
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 1
- name: TABLEHEADERROWOPEN(2).NTABLE_WIDTH
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: OUT
  ordinalPosition: 2
- name: TABLEHEADERROWOPEN(2).NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 3
- name: TABLENODATA.CALIGN
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: TABLENODATA.CROWSTRING
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 2
- name: TABLENODATA.NNUM_COLS
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 3
- name: TABLENODATA.NTABLE_WIDTH
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 4
- name: TABLENODATA.NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 5
- name: TABLEOPEN.CATTRIBUTES
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: TABLEOPEN.NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 2
- name: TABLEPRINT.CTABLE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: TABLEPRINT.CATTRIBUTES
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: TABLEPRINT.NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 3
- name: TABLEPRINT.CCOLUMNS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: TABLEPRINT.CCLAUSES
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 5
- name: TABLEPRINT.CCOL_ALIASES
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 6
- name: TABLEPRINT.NROW_MIN
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 7
- name: TABLEPRINT.NROW_MAX
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 8
- name: TABLEROWCLOSE.CROWSTRING
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 1
- name: TABLEROWCLOSE.NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 2
- name: TABLEROWOPEN.CROWSTRING
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 1
- name: TABLEROWOPEN.NTABLE_TYPE
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 2
- name: TODATE.P_DATEARRAY
  dataType: PL/SQL TABLE
  parameterMode: IN
  ordinalPosition: 1
- name: VALIDATE_ARG.PARAM
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: WHO_CALLED_ME.OWNER
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 1
- name: WHO_CALLED_ME.NAME
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 2
- name: WHO_CALLED_ME.LINENO
  dataType: NUMBER
  parameterMode: OUT
  ordinalPosition: 3
- name: WHO_CALLED_ME.CALLER_T
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 4
routineDefinition: "package OWA_UTIL is type ident_arr is table of varchar2(30) index\
  \ by binary_integer;\ntype ident_narr is table of nvarchar2(30) index by binary_integer;\n\
  type num_arr is table of number index by binary_integer;\ntype ip_address is table\
  \ of integer index by binary_integer;\ntype vc_arr is table of varchar2(32000) index\
  \ by binary_integer;\ntype nc_arr is table of nvarchar2(16000) index by binary_integer;\n\
  type raw_arr is table of raw(32000) index by binary_integer;\n-- Functions/Procedures\n\
  procedure name_resolve(\n  cname in varchar2,\n  o_procowner out varchar2,\n  o_procname\
  \ out varchar2\n);\n/******************************************************************/\n\
  /* Procedure to link back to the PL/SQL source for your procedure */\n/******************************************************************/\n\
  /* SHOWSOURCE can take as an argument a procedure, function,     */\n/*   package,\
  \ package.procedure or package.function.             */\n/* SHOWSOURCE prints the\
  \ source for the specified stored PL/SQL. */\n/* If package.procedure or package.function\
  \ are passed, it will  */\n/* print the entire package.                        \
  \             */\nprocedure showsource(cname in varchar2);\n/**************************************************/\n\
  /* Procedures for printing out an OWA \"signature\" */\n/**************************************************/\n\
  /* SIGNATURE prints an HTML line followed by a line like:               */\n/* \
  \  This page was produced by the Oracle Web Agent on 09/07/95 09:39   */\nprocedure\
  \ signature;\n/* SIGNATURE (cname) prints an HTML line followed by 2 lines like:\
  \      */\n/*   This page was produced by the Oracle Web Agent on August 9, 1995\n\
  \n         9:39 AM                                                            */\n\
  /*   View PL/SQL source code (hypertext-link)                           */\n/* SIGNATURE\
  \ can take as an argument a procedure, function, or package, */\n/*   but not package.procedure\
  \ or package.function.  See SHOWSOURCE.    */\nprocedure signature(\n  cname in\
  \ varchar2 character\n  set\n    any_cs\n);\n/******************************************************/\n\
  /* Procedure for printing a page generated by htp/htf */\n/* in SQL*Plus or SQL*DBA\
  \                             */\n/******************************************************/\n\
  /* SHOWPAGE can be called to print out the results, */\n/* in SQL*Plus or SQL*DBA,\
  \ of an htp/htf generated  */\n/* page. This is done using dbms_output, and thus\
  \   */\n/* is limited to 255 characters per line and an     */\n/* overall buffer\
  \ size of 1,000,000 bytes.          */\nprocedure showpage;\n/**************************************************************/\n\
  /* Procedure/function for accessing CGI environment variables */\n/**************************************************************/\n\
  /* GET_CGI_ENV will return the value of the requested CGI     */\n/* environment\
  \ variable, or NULL if that value is not set.    */\nfunction get_cgi_env(param_name\
  \ in varchar2) return varchar2;\n/* PRINT_CGI_ENV will print all of the CGI environment\
  \        */\n/* variables which OWA has made available to PL/SQL.          */\n\
  procedure print_cgi_env;\n/* MIME_HEADER will output \"Content-type: <ccontent_type>\\\
  n\\n\" */\n/* This allows changing the default MIME header which the Web  */\n/*\
  \ Agent returns.  This MUST be come before any htp.print or   */\n/* htp.prn calls\
  \ in order to signal the Web Agent not to use   */\n/* the default.            \
  \                                    */\nprocedure mime_header(\n  ccontent_type\
  \ in varchar2 DEFAULT 'text/html',\n  bclose_header in boolean DEFAULT TRUE,\n \
  \ ccharset in varchar2 DEFAULT 'MaGiC_KeY'\n);\n/* REDIRECT_URL will output \"Location:\
  \ <curl>\\n\\n\"               */\n/* This allows the PL/SQL program to tell the\
  \ HTTP server to     */\n/* visit the specified URL instead of returning output\
  \ from the  */\n/* current URL.  By \"visit\" it is meant that if the specified\
  \    */\n/* URL is an HTML page, then it will be returned, but if the URL */\n/*\
  \ specifies another CGI program, or call to the Web Agent, then */\n/* the Web Server\
  \ will make that call.                           */\n/* The call to REDIRECT_URL\
  \ MUST be come before any htp calls in */\n/* order to signal the HTTP server to\
  \ do the redirect.           */\n/* This functionality is only available with OWA\
  \ 1.0.2 or above. */\nprocedure redirect_url(\n  curl in varchar2 character\n  set\n\
  \    any_cs,\n    bclose_header in boolean DEFAULT TRUE\n);\n/* STATUS_LINE will\
  \ output \"Status: <nstatus> <creason>\\n\\n\"     */\n/* This allows the PL/SQL\
  \ program to tell the HTTP server to     */\n/* return a standard HTTP status code\
  \ to the client.             */\n/* The call to STATUS_LINE MUST be come before\
  \ any htp calls in  */\n/* order to signal the HTTP server to return the status\
  \ as part  */\n/* of the HTTP header instead of as \"content data\".           \
  \   */\n/* This functionality is only available with OWA 1.5 or above.   */\nprocedure\
  \ status_line(\n  nstatus in integer,\n  creason in varchar2 character\n  set\n\
  \    any_cs DEFAULT NULL,\n    bclose_header in boolean DEFAULT TRUE\n);\n/* HTTP_HEADER_CLOSE\
  \ should be called after calls to either       */\n/* MIME_HEADER, REDIRECT_URL,\
  \ or STATUS_LINE, where bclose_header */\n/* is set to FALSE.  HTTP_HEADER_CLOSE\
  \ will close the HTTP header */\nprocedure http_header_close;\n/* GET_OWA_SERVICE_PATH\
  \ returns the name of the currently           */\n/* with its full virtual path,\
  \ plus the currently active service    */\n/*  For example, a call to get_owa_service_path\
  \ could return:       */\n/*     /ows-bin/myservice/owa/                       \
  \               */\nfunction get_owa_service_path return varchar2;\n/******************************************************************/\n\
  /* Procedures and functions for building HTML and non-HTML tables */\n/******************************************************************/\n\
  /* TABLE_TYPE constants */\nHTML_TABLE constant integer: = 1;\nPRE_TABLE constant\
  \ integer: = 2;\nprocedure show_query_columns(ctable in varchar2);\n/* TABLEPRINT\
  \ will print out an entire Oracle table either as   */\n/* an HTML table, or as\
  \ a \"pre-formatted\" table.  The table     */\n/* alignment follows the HTML 3.0\
  \ current standards for default */\n/* alignment - column headings are CENTERED\
  \ while table data is */\n/* LEFT justified.                                   \
  \           */\n/*                                                             \
  \ */\n/* TABLEPRINT takes the following parameters:                   */\n/*   \
  \                                                           */\n/* ctable      \
  \ - the table, view, or synonym name              */\n/* cattributes  - allows you\
  \ to pass any of the attributes that */\n/*                can be passed to the\
  \ HTML <TABLE> tag.        */\n/* ntable_type  - HTML_TABLE or PRE_TABLE       \
  \                */\n/* ccolumns     - a comma-delimited list of columns from ctable\
  \ */\n/* cclauses     - any SQL \"where\" or \"order by clauses\",        */\n/*\
  \  for example : \"where deptno = 10\"                           */\n/*        \
  \        \"where deptno = 10 order by ename\"            */\n/*                \"\
  order by deptno\"                             */\n/* ccol_aliases - a comma-delimited\
  \ list of column headings     */\n/* nrow_min     - the first row, of those fetched,\
  \ to print     */\n/* nrow_max     - the last row, of those fetched, to print  \
  \    */\n/*                                                              */\n/*\
  \ Note that RAW COLUMNS are supported, however LONG RAW        */\n/*  are not.\
  \  References to LONG RAW columns will print the     */\n/*  result 'Not Printable'.\
  \                                     */\nfunction tablePrint(\n  ctable in varchar2,\n\
  \  cattributes in varchar2 DEFAULT NULL,\n  ntable_type in integer DEFAULT HTML_TABLE,\n\
  \  ccolumns in varchar2 DEFAULT '*',\n  cclauses in varchar2 DEFAULT NULL,\n  ccol_aliases\
  \ in varchar2 character\n  set\n    any_cs DEFAULT NULL,\n    nrow_min in number\
  \ DEFAULT 0,\n    nrow_max in number DEFAULT 500\n) return boolean;\n/* Lower-level\
  \ routines for printing out the table */\nprocedure comma_to_ident_arr(\n  list\
  \ in varchar2 character\n  set\n    any_cs,\n    arr out ident_arr,\n    lenarr\
  \ out num_arr,\n    arrlen out integer\n);\nprocedure comma_to_ident_arr(\n  list\
  \ in varchar2 character\n  set\n    any_cs,\n    arr out ident_narr,\n    lenarr\
  \ out num_arr,\n    arrlen out integer\n);\nprocedure tableOpen(\n  cattributes\
  \ in varchar2 DEFAULT NULL,\n  ntable_type in integer DEFAULT HTML_TABLE\n);\nprocedure\
  \ tableCaption(\n  ccaption in varchar2 character\n  set\n    any_cs,\n    calign\
  \ in varchar2 DEFAULT 'center',\n    ntable_type in integer DEFAULT HTML_TABLE\n\
  );\nprocedure tableHeaderRowOpen(\n  crowstring in out varchar2,\n  ntable_type\
  \ in integer DEFAULT HTML_TABLE\n);\nprocedure tableHeaderRowOpen(\n  crowstring\
  \ in out varchar2,\n  ntable_width out integer,\n  ntable_type in integer DEFAULT\
  \ HTML_TABLE\n);\nprocedure tableHeader(\n  ccolumn_name in varchar2 character\n\
  \  set\n    any_cs,\n    ncolumn_size in integer,\n    calign in varchar2 DEFAULT\
  \ 'center',\n    crowstring in out varchar2,\n    ntable_type in integer DEFAULT\
  \ HTML_TABLE\n);\nprocedure tableHeader(\n  ccolumn_name in varchar2 character\n\
  \  set\n    any_cs,\n    ncolumn_size in integer,\n    calign in varchar2 DEFAULT\
  \ 'center',\n    crowstring in out varchar2,\n    ntable_width in out integer,\n\
  \    ntable_type in integer DEFAULT HTML_TABLE\n);\nprocedure tableHeaderRowClose(\n\
  \  crowstring in out varchar2,\n  ntable_type in integer DEFAULT HTML_TABLE\n);\n\
  procedure tableHeaderRowClose(\n  crowstring in out varchar2,\n  ntable_width in\
  \ integer,\n  ntable_type in integer DEFAULT HTML_TABLE\n);\nprocedure tableRowOpen(\n\
  \  crowstring in out varchar2,\n  ntable_type in integer DEFAULT HTML_TABLE\n);\n\
  procedure tableData(\n  cdata in varchar2 character\n  set\n    any_cs,\n    ncolumn_size\
  \ in integer,\n    calign in varchar2 DEFAULT 'left',\n    crowstring in out varchar2,\n\
  \    ntable_type in integer DEFAULT HTML_TABLE\n);\nprocedure tableNoData(\n  calign\
  \ in varchar2 DEFAULT 'left',\n  crowstring in out varchar2,\n  nnum_cols in integer,\n\
  \  ntable_width in integer,\n  ntable_type in integer DEFAULT HTML_TABLE\n);\nprocedure\
  \ tableRowClose(\n  crowstring in out varchar2,\n  ntable_type in integer DEFAULT\
  \ HTML_TABLE\n);\nprocedure tableClose(ntable_type in integer DEFAULT HTML_TABLE);\n\
  procedure tableClose(\n  ntable_width in integer,\n  ntable_type in integer DEFAULT\
  \ HTML_TABLE\n);\nprocedure resolve_table(\n  cobject in varchar2,\n  cschema in\
  \ varchar2,\n  resolved_name out varchar2,\n  resolved_owner out varchar2,\n  resolved_db_link\
  \ out varchar2\n);\n/* DESCRIBE_COLS returns the column_names and datatypes as */\n\
  /* arrays for passing to calc_col_sizes                    */\nprocedure describe_cols(\n\
  \  ctable in varchar2,\n  ccolumns in varchar2,\n  col_names out ident_arr,\n  col_dtypes\
  \ out ident_arr,\n  nnum_cols out integer\n);\n/**********************************************************************/\n\
  /* Function to obtain the procedure being invoked by the PL/SQL Agent */\n/**********************************************************************/\n\
  function get_procedure return varchar2;\nPRAGMA RESTRICT_REFERENCES(get_cgi_env,\
  \ WNDS, WNPS, RNDS);\n/******************************************************************/\n\
  /* Procedures and functions for new utilities for 2.1             */\n/******************************************************************/\n\
  /* Exception raised when a query fails to be parsed of when a \t*/\n/* non SELECT\
  \ statement is passed down\t\t\t\t\t\t \t*/\nINVALID_QUERY\nexception;\n  /* Utility\
  \ routine used to figure out who called you.  Can be \t*/\n  /* used in standard\
  \ footer routine.  \t\t\t\t\t\t\t*/\n  procedure who_called_me(\n    owner out varchar2,\n\
  \    name out varchar2,\n    lineno out number,\n    caller_t out varchar2\n  );\n\
  \  /* Ite = Macro for If then Else\t\t\t\t\t\t\t\t\t*/\n  /* only for internal usage.\
  \ Not exposed \t\t\t\t\t\t*/\n  function ite(tf in boolean, yes in varchar2, no\
  \ in varchar2) return varchar2;\n  /* shorthand for owa_util.get_cgi_env( 'SCRIPT_NAME'\
  \ );\t\t\t*/\n  /* only for internal usage. Not exposed \t\t\t\t\t\t*/\n  function\
  \ path_to_me return varchar2;\n  /* This prepares a sql query and binds  variables\
  \ to it   \t\t*/\n  function bind_variables (\n    theQuery in varchar2,\n    bv1Name\
  \ in varchar2 default NULL,\n    bv1Value in varchar2 character\n    set\n     \
  \ any_cs default NULL,\n      bv2Name in varchar2 default NULL,\n      bv2Value\
  \ in varchar2 character\n    set\n      any_cs default NULL,\n      bv3Name in varchar2\
  \ default NULL,\n      bv3Value in varchar2 character\n    set\n      any_cs default\
  \ NULL,\n      bv4Name in varchar2 default NULL,\n      bv4Value in varchar2 character\n\
  \    set\n      any_cs default NULL,\n      bv5Name in varchar2 default NULL,\n\
  \      bv5Value in varchar2 character\n    set\n      any_cs default NULL,\n   \
  \   bv6Name in varchar2 default NULL,\n      bv6Value in varchar2 character\n  \
  \  set\n      any_cs default NULL,\n      bv7Name in varchar2 default NULL,\n  \
  \    bv7Value in varchar2 character\n    set\n      any_cs default NULL,\n     \
  \ bv8Name in varchar2 default NULL,\n      bv8Value in varchar2 character\n    set\n\
  \      any_cs default NULL,\n      bv9Name in varchar2 default NULL,\n      bv9Value\
  \ in varchar2 character\n    set\n      any_cs default NULL,\n      bv10Name in\
  \ varchar2 default NULL,\n      bv10Value in varchar2 character\n    set\n     \
  \ any_cs default NULL,\n      bv11Name in varchar2 default NULL,\n      bv11Value\
  \ in varchar2 character\n    set\n      any_cs default NULL,\n      bv12Name in\
  \ varchar2 default NULL,\n      bv12Value in varchar2 character\n    set\n     \
  \ any_cs default NULL,\n      bv13Name in varchar2 default NULL,\n      bv13Value\
  \ in varchar2 character\n    set\n      any_cs default NULL,\n      bv14Name in\
  \ varchar2 default NULL,\n      bv14Value in varchar2 character\n    set\n     \
  \ any_cs default NULL,\n      bv15Name in varchar2 default NULL,\n      bv15Value\
  \ in varchar2 character\n    set\n      any_cs default NULL,\n      bv16Name in\
  \ varchar2 default NULL,\n      bv16Value in varchar2 character\n    set\n     \
  \ any_cs default NULL,\n      bv17Name in varchar2 default NULL,\n      bv17Value\
  \ in varchar2 character\n    set\n      any_cs default NULL,\n      bv18Name in\
  \ varchar2 default NULL,\n      bv18Value in varchar2 character\n    set\n     \
  \ any_cs default NULL,\n      bv19Name in varchar2 default NULL,\n      bv19Value\
  \ in varchar2 character\n    set\n      any_cs default NULL,\n      bv20Name in\
  \ varchar2 default NULL,\n      bv20Value in varchar2 character\n    set\n     \
  \ any_cs default NULL,\n      bv21Name in varchar2 default NULL,\n      bv21Value\
  \ in varchar2 character\n    set\n      any_cs default NULL,\n      bv22Name in\
  \ varchar2 default NULL,\n      bv22Value in varchar2 character\n    set\n     \
  \ any_cs default NULL,\n      bv23Name in varchar2 default NULL,\n      bv23Value\
  \ in varchar2 character\n    set\n      any_cs default NULL,\n      bv24Name in\
  \ varchar2 default NULL,\n      bv24Value in varchar2 character\n    set\n     \
  \ any_cs default NULL,\n      bv25Name in varchar2 default NULL,\n      bv25Value\
  \ in varchar2 character\n    set\n      any_cs default NULL\n  ) return integer;\n\
  \  /* Many forms of cellsprint.  First parm is always a query or\t    */\n  /* an\
  \ open cursor (from owa_util.bind_variables above).\t \t    */\n  /* use max_rows\
  \ to limit the number of rows displayed (default 100) */\n  /* set p_format_numbers\
  \ to any NON-NULL value to have any field\t    */\n  /* that is an oracle number\
  \ right justified with commas and rounded */\n  /* off to 2 decimal places (if it\
  \ has decimals)\t\t\t    */\n  procedure cellsprint(\n    p_colCnt in integer,\n\
  \    p_resultTbl in vc_arr,\n    p_format_numbers in varchar2 default NULL\n  );\n\
  procedure cellsprint(\n    p_theQuery in varchar2,\n    p_max_rows in number default\
  \ 100,\n    p_format_numbers in varchar2 default NULL\n  );\nprocedure cellsprint(\n\
  \    p_theCursor in integer,\n    p_max_rows in number default 100,\n    p_format_numbers\
  \ in varchar2 default NULL\n  );\n  /* More involved cellsprint allows you to slice\
  \ and dice a \t    */\n  /* result set.  Can be used to page up and down thru queries.\
  \  In   */\n  /* addition to the above you can tell it what row to start printing\
  \ */\n  /* at (eg: skip the first 25 records and then print the next 25     */\n\
  \  /* records) and it will tell you. if there are more rows to print.  */\n  /*\
  \ You would save the offset within the query in a hidden field to  */\n  /* paginate.\t\
  \t\t\t\t\t\t    */\n  procedure cellsprint(\n    p_theQuery in varchar2,\n    p_max_rows\
  \ in number default 100,\n    p_format_numbers in varchar2 default NULL,\n    p_skip_rec\
  \ in number default 0,\n    p_more_data out boolean\n  );\nprocedure cellsprint(\n\
  \    p_theCursor in integer,\n    p_max_rows in number default 100,\n    p_format_numbers\
  \ in varchar2 default NULL,\n    p_skip_rec in number default 0,\n    p_more_data\
  \ out boolean\n  );\nprocedure cellsprint(\n    p_theQuery in varchar2,\n    p_max_rows\
  \ in number default 100,\n    p_format_numbers in varchar2 default NULL,\n    p_reccnt\
  \ out number\n  );\nprocedure cellsprint(\n    p_theCursor in integer,\n    p_max_rows\
  \ in number default 100,\n    p_format_numbers in varchar2 default NULL,\n    p_reccnt\
  \ out number\n  );\nprocedure cellsprint(\n    p_theQuery in varchar2,\n    p_max_rows\
  \ in number default 100,\n    p_format_numbers in varchar2 default NULL,\n    p_skip_rec\
  \ in number default 0,\n    p_more_data out boolean,\n    p_reccnt out number\n\
  \  );\nprocedure cellsprint(\n    p_theCursor in integer,\n    p_max_rows in number\
  \ default 100,\n    p_format_numbers in varchar2 default NULL,\n    p_skip_rec in\
  \ number default 0,\n    p_more_data out boolean,\n    p_reccnt out number\n  );\n\
  \  /* Create a multi select list, a drop down list or a single select \t*/\n  /*\
  \ list.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n  /* You send it a query that selects out\
  \ in ORDER:\t\t\t\t\t*/\n  /* COLUMN 1 - What your procedure will get back\t\t\t\
  \t\t\t*/\n  /* COLUMN 2 - What your user will see in the list box\t\t\t\t*/\n  /*\
  \ COLUMN 3 - a null or non-null field.  If the field is non-null,\t*/\n  /*    \
  \        \tthe current row will be flagged as SELECTED in the\t*/\n  /*\t\t\t\t\
  list box\t\t\t\t\t\t\t\t\t\t\t*/\n  procedure listprint(\n    p_theCursor in integer,\n\
  \    p_cname in varchar2,\n    p_nsize in number,\n    p_multiple in boolean default\
  \ FALSE\n  );\nprocedure listprint(\n    p_theQuery in varchar2,\n    p_cname in\
  \ varchar2,\n    p_nsize in number,\n    p_multiple in boolean default FALSE\n \
  \ );\n  /* procedure for displaying a Date field in html and allowing \t*/\n  /*\
  \ the user to pick an arbritrary date.  This procedure uses \t*/\n  /* 3 html input\
  \ fields to get the DAY, MONTH, and YEAR fields. \t*/\n  /* The procedure you write\
  \ that recieves the input should have\t*/\n  /* an input variable of type owa_util.datetype.\t\
  \t\t\t\t*/\n  type dateType is table of varchar2(10) index by binary_integer;\n\
  procedure choose_date(\n    p_name in varchar2,\n    p_date in date default sysdate\n\
  \  );\nfunction todate(p_dateArray in dateType) return date;\nempty_date owa_util.datetype;\n\
  \  /* routines to print calendars in html format \t\t\t*/\n  procedure calendarprint(\n\
  \    p_query in varchar2,\n    p_mf_only in varchar2 default 'N'\n  );\nprocedure\
  \ calendarprint(\n    p_cursor in integer,\n    p_mf_only in varchar2 default 'N'\n\
  \  );\n  /**********************************************************************/\n\
  \  /* Function to obtain the version number                              */\n  /**********************************************************************/\n\
  \  function get_version return varchar2;\nPRAGMA RESTRICT_REFERENCES(get_version,\
  \ WNDS, WNPS, RNDS);\n  /**********************************************************************/\n\
  \  /* Procedure to print the version number                              */\n  /**********************************************************************/\n\
  \  procedure print_version;\n  /************************************************************************/\n\
  \  /* Function to validate strings that gets set in HTTP header,cookie etc */\n\
  \  /************************************************************************/\n\
  \  function validate_arg(\n    param in varchar2 character\n    set\n      any_cs\n\
  \  ) return varchar2;\nend;"
