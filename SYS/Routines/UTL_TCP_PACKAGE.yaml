schema: SYS
name: UTL_TCP
routineType: PACKAGE
returnParamater:
  name: WRITE_TEXT.(--return--)
  dataType: BINARY_INTEGER
  parameterMode: OUT
  ordinalPosition: 0
parameters:
- name: AVAILABLE.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: AVAILABLE.TIMEOUT
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: CLOSE_CONNECTION.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: FLUSH.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: GET_LINE.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: GET_LINE.REMOVE_CRLF
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 2
- name: GET_LINE.PEEK
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 3
- name: GET_LINE_NCHAR.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: GET_LINE_NCHAR.REMOVE_CRLF
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 2
- name: GET_LINE_NCHAR.PEEK
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 3
- name: GET_RAW.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: GET_RAW.LEN
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: GET_RAW.PEEK
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 3
- name: GET_TEXT.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: GET_TEXT.LEN
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: GET_TEXT.PEEK
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 3
- name: GET_TEXT_NCHAR.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: GET_TEXT_NCHAR.LEN
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: GET_TEXT_NCHAR.PEEK
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 3
- name: OPEN_CONNECTION.REMOTE_HOST
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: OPEN_CONNECTION.REMOTE_PORT
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: OPEN_CONNECTION.LOCAL_HOST
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: OPEN_CONNECTION.LOCAL_PORT
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 4
- name: OPEN_CONNECTION.IN_BUFFER_SIZE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 5
- name: OPEN_CONNECTION.OUT_BUFFER_SIZE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 6
- name: OPEN_CONNECTION.CHARSET
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 7
- name: OPEN_CONNECTION.NEWLINE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 8
- name: OPEN_CONNECTION.TX_TIMEOUT
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 9
- name: OPEN_CONNECTION.WALLET_PATH
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 10
- name: OPEN_CONNECTION.WALLET_PASSWORD
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 11
- name: READ_LINE.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: READ_LINE.DATA
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 2
- name: READ_LINE.REMOVE_CRLF
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 3
- name: READ_LINE.PEEK
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 4
- name: READ_RAW.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: READ_RAW.DATA
  dataType: RAW
  parameterMode: INOUT
  ordinalPosition: 2
- name: READ_RAW.LEN
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 3
- name: READ_RAW.PEEK
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 4
- name: READ_TEXT.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: READ_TEXT.DATA
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 2
- name: READ_TEXT.LEN
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 3
- name: READ_TEXT.PEEK
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 4
- name: SECURE_CONNECTION.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: WRITE_LINE.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: WRITE_LINE.DATA
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: WRITE_RAW.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: WRITE_RAW.DATA
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: WRITE_RAW.LEN
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 3
- name: WRITE_TEXT.C
  dataType: PL/SQL RECORD
  parameterMode: INOUT
  ordinalPosition: 1
- name: WRITE_TEXT.DATA
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: WRITE_TEXT.LEN
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 3
routineDefinition: "PACKAGE utl_tcp AUTHID CURRENT_USER AS\n/*******************************************************************\n\
  \n  * OVERVIEW\n\n  *\n\n  * This package provides TCP/IP client-side access functionality\
  \ in PL/SQL.\n\n  * With this package, a PL/SQL program can communicate with external\
  \ TCP/IP\n\n  * services and retrieve data.  The API only allows connections to\
  \ be\n\n  * initiated by the PL/SQL program.  It does not allow the PL/SQL program\n\
  \n  * to accept connections initiated from outside of the program.\n\n  *\n\n  *\
  \ USES\n\n  *\n\n  * A TCP/IP connection is initiated by a call to open_connection,\
  \ which\n\n  * returns a TCP/IP connection.  Text and binary data can be sent or\n\
  \n  * received on the connection.  It is also possible to look ahead at the\n\n\
  \  * data before it is actually read.  The connection is terminated by\n\n  * a\
  \ call to close_connection.\n\n  *\n\n  * EXAMPLES\n\n  *   Retrieve the home page\
  \ from http://www.acme.com/\n\n  *\n\n  *   DECLARE\n\n  *     c   utl_tcp.connection;\
  \  -- TCP/IP connection to the Web server\n\n  *     len PLS_INTEGER;\n\n  *   BEGIN\n\
  \n  *     -- open connection\n\n  *     c := utl_tcp.open_connection(remote_host\
  \ => 'www.acme.com',\n\n  *                                  remote_port => 80,\n\
  \n  *                                  charset     => 'US7ASCII');\n\n  *\n\n  *\
  \     len := utl_tcp.write_line(c, 'GET / HTTP/1.0');    -- send HTTP request\n\n\
  \  *     len := utl_tcp.write_line(c);\n\n  *     BEGIN\n\n  *       LOOP\n\n  *\
  \         dbms_output.put_line(utl_tcp.get_line(c, TRUE));  -- read result\n\n \
  \ *       END LOOP;\n\n  *     EXCEPTION\n\n  *       WHEN utl_tcp.end_of_input\
  \ THEN\n\n  *         NULL; -- end of input\n\n  *     END;\n\n  *     utl_tcp.close_connection(c);\n\
  \n  *   END;\n\n  */\n/*\n\n   * TCP connection type\n\n   */\nTYPE connection IS\
  \ RECORD (\n  remote_host VARCHAR2(255),\n  -- Remote host name\n  remote_port PLS_INTEGER,\n\
  \  -- Remote port number\n  local_host VARCHAR2(255),\n  -- Local host name\n  local_port\
  \ PLS_INTEGER,\n  -- Local port number\n  charset VARCHAR2(30),\n  -- Character\
  \ set for on-the-wire comm.\n  newline VARCHAR2(2),\n  -- Newline character sequence\n\
  \  tx_timeout PLS_INTEGER,\n  -- Transfer time-out value (in seconds)\n  private_sd\
  \ PLS_INTEGER -- For internal use only\n);\n/*\n\n   * Carriage-return line-feed\
  \ character sequence.\n\n   */\nCRLF CONSTANT VARCHAR2(2 CHAR): = unistr('\\000D\\\
  000A');\n/*\n\n   * Exceptions\n\n   */\nbuffer_too_small\nEXCEPTION;\n-- Buffer\
  \ is too small for I/O\n  end_of_input\nEXCEPTION;\n-- End of input from the connection\n\
  \  network_error\nEXCEPTION;\n-- Network error\n  bad_argument\nEXCEPTION;\n-- Bad\
  \ argument passed in API call\n  partial_multibyte_char\nEXCEPTION;\n-- A partial\
  \ multi-byte character found\n  transfer_timeout\nEXCEPTION;\n-- Transfer time-out\
  \ occurred\n  network_access_denied\nEXCEPTION;\n-- Network access denied\n  buffer_too_small_errcode\
  \ CONSTANT PLS_INTEGER: = -29258;\nend_of_input_errcode CONSTANT PLS_INTEGER: =\
  \ -29259;\nnetwork_error_errcode CONSTANT PLS_INTEGER: = -29260;\nbad_argument_errcode\
  \ CONSTANT PLS_INTEGER: = -29261;\npartial_multibyte_char_errcode CONSTANT PLS_INTEGER:\
  \ = -29275;\ntransfer_timeout_errcode CONSTANT PLS_INTEGER: = -29276;\nnetwork_access_denied_errcode\
  \ CONSTANT PLS_INTEGER: = -24247;\nPRAGMA EXCEPTION_INIT(buffer_too_small, -29258);\n\
  PRAGMA EXCEPTION_INIT(end_of_input, -29259);\nPRAGMA EXCEPTION_INIT(network_error,\
  \ -29260);\nPRAGMA EXCEPTION_INIT(bad_argument, -29261);\nPRAGMA EXCEPTION_INIT(partial_multibyte_char,\
  \ -29275);\nPRAGMA EXCEPTION_INIT(transfer_timeout, -29276);\nPRAGMA EXCEPTION_INIT(network_access_denied,\
  \ -24247);\n  /**\n  \n     * Opens a connection to a TCP/IP service.  When connection\
  \ is made\n  \n     * succesfully, the remote host name and remote port number will\
  \ be stored in\n  \n     * the connection.  If local_host, local_port or charset\
  \ is specified,\n  \n     * it will be stored in the connection as well.\n  \n \
  \    *\n  \n     * Communication with the remote service may be secured using Secure\
  \ Socket\n  \n     * Layer / Transport Layer Security (SSL/TLS). To start SSL/TLS\
  \ in the\n  \n     * connection, the user must specify an Oracle wallet when opening\
  \ the\n  \n     * connection and call the SECURE_CONNECTION procedure. The wallet\
  \ must\n  \n     * contain the trusted certificate of the certificate authority\
  \ who signs\n  \n     * the remote server's certificate for UTL_TCP to validate\
  \ the remote\n  \n     * server's certificate.\n  \n     *\n  \n     * UTL_TCP supports\
  \ client authentication over SSL/TLS using the client\n  \n     * certificate in\
  \ the wallet. The client certificate will be sent to the\n  \n     * remote server\
  \ if it is present in the wallet and if the caller has the\n  \n     * \"use-client-certificates\"\
  \ ACL privilege on the wallet.\n  \n     *\n  \n     * For more information on Oracle\
  \ wallets, see Oracle Wallet Manager\n  \n     * documentation.\n  \n     *\n  \n\
  \     * PARAMETERS\n  \n     *   remote_host     remote host name to connect to\n\
  \  \n     *   remote_port     remote port number to connect to\n  \n     *   local_host\
  \      local host name to connect from\n  \n     *   local_port      local port\
  \ number to connect from\n  \n     *   in_buffer_size  input buffer size\n  \n \
  \    *   out_buffer_size output buffer size\n  \n     *   charset         character\
  \ set for on-the-wire communication\n  \n     *   newline         newline character\
  \ sequence\n  \n     *   tx_timeout      a time in seconds this package should wait\
  \ before\n  \n     *                   giving up in a read or write operation in\
  \ this\n  \n     *                   connection. In read operations, this package\
  \ will give\n  \n     *                   up if no data is available for reading\
  \ immediately.\n  \n     *                   In write operations, this package will\
  \ give if the\n  \n     *                   output buffer is full and no data be\
  \ sent in the\n  \n     *                   network without being blocked.  0 indicates\
  \ not to wait\n  \n     *                   at all.  NULL indicates to wait forever.\n\
  \  \n     *   wallet_path     the directory path that contains the Oracle wallet\
  \ for\n  \n     *                   SSL/TLS. The format is \"file:<directory-path>\"\
  .\n  \n     *   wallet_password the password to open the wallet. When the wallet\
  \ is\n  \n     *                   auto-login enabled, the password may be set to\
  \ NULL.\n  \n     * RETURN\n  \n     *   a connection to the destinated TCP/IP service.\n\
  \  \n     * EXCEPTIONS\n  \n     *   network_error  - network error\n  \n     *\
  \ NOTES\n  \n     *   In the current release of this package, the parameters local_host\
  \ and\n  \n     * local_port are ignored when open_connection makes a TCP/IP connection.\n\
  \  \n     * It does not attempt to use the specified local host and port number\n\
  \  \n     * when the connection is made.  The local_host and local_port fields\n\
  \  \n     * will not be set in the connection record returned by this function.\n\
  \  \n     *   Time-out on write operations is not supported in the current release\n\
  \  \n     * of this package.\n  \n     */\n  FUNCTION open_connection(\n    remote_host\
  \ IN VARCHAR2,\n    remote_port IN PLS_INTEGER,\n    local_host IN VARCHAR2 DEFAULT\
  \ NULL,\n    local_port IN PLS_INTEGER DEFAULT NULL,\n    in_buffer_size IN PLS_INTEGER\
  \ DEFAULT NULL,\n    out_buffer_size IN PLS_INTEGER DEFAULT NULL,\n    charset IN\
  \ VARCHAR2 DEFAULT NULL,\n    newline IN VARCHAR2 DEFAULT CRLF,\n    tx_timeout\
  \ IN PLS_INTEGER DEFAULT NULL,\n    wallet_path IN VARCHAR2 DEFAULT NULL,\n    wallet_password\
  \ IN VARCHAR2 DEFAULT NULL\n  ) RETURN connection;\n  /**\n  \n     * Secure a TCP/IP\
  \ connection using Secure Socket Layer / Transport Layer\n  \n     * Security (SSL/TLS).\
  \ SSL/TLS requires an Oracle wallet which must be\n  \n     * specified when the\
  \ connection was opened by the OPEN_CONNECTION function.\n  \n     *\n  \n     *\
  \ PARAMETERS\n  \n     *   c                TCP/IP connection\n  \n     * RETURN\n\
  \  \n     *   None\n  \n     * EXCEPTIONS\n  \n     *   SSL/TLS errors - error occurred\
  \ in SSL/TLS communication\n  \n     * NOTES\n  \n     *   See the OPEN_CONNECTION\
  \ function.\n  \n     */\n  PROCEDURE secure_connection(c IN OUT NOCOPY connection);\n\
  \  /**\n  \n     * Determines the number of bytes available for reading from a TCP/IP\n\
  \  \n     * connection.  It is the number of bytes that can be read immediately\n\
  \  \n     * without blocking.\n  \n     *\n  \n     * PARAMETERS\n  \n     *   c\
  \          TCP/IP connection\n  \n     *   timemout   a time in seconds to wait\
  \ before giving up and reporting\n  \n     *              no data available.  0\
  \ indicates not to wait at all.  NULL\n  \n     *              indicates to wait\
  \ forever.\n  \n     * RETURN\n  \n     *   The number of bytes available for reading\
  \ without blocking.\n  \n     * EXCEPTIONS\n  \n     *   network_error  - network\
  \ error\n  \n     * NOTES\n  \n     *   The number of bytes available for reading\
  \ returned by this function\n  \n     * may be a conservative estimate in some situations.\
  \  It may be less than\n  \n     * what is actually available for reading.  On some\
  \ platforms, this function\n  \n     * may only be able to return just 1 to indicate\
  \ the fact that some data is\n  \n     * available for reading.  Users who are concerned\
  \ with the portability of\n  \n     * their applications should assume that this\
  \ function returns a positive\n  \n     * value when data is available for reading,\
  \ and zero when no data is\n  \n     * available.  This is an example that illustrates\
  \ how to use this function\n  \n     * in a portable manner:\n  \n     *\n  \n \
  \    *    DECLARE\n  \n     *      c     utl_tcp.connection;\n  \n     *      data\
  \  VARCHAR2(256);\n  \n     *      len   PLS_INTEGER;\n  \n     *    BEGIN\n  \n\
  \     *      c := utl_tcp.open_connection(...);\n  \n     *      LOOP\n  \n    \
  \ *        IF (utl_tcp.available(c) > 0) THEN\n  \n     *          len := utl_tcp.read_text(c,\
  \ data, 256);\n  \n     *        ELSE\n  \n     *          -- do some other things\n\
  \  \n     *          ...\n  \n     *        END IF;\n  \n     *      END LOOP;\n\
  \  \n     *    END;\n  \n     */\n  FUNCTION available(\n    c IN OUT NOCOPY connection,\n\
  \    timeout IN PLS_INTEGER DEFAULT 0\n  ) RETURN PLS_INTEGER;\n  /*-----------------------\
  \ Binary Input/Output API -----------------------*/\n  /**\n  \n     * Reads binary\
  \ data from a TCP/IP connection.  This function does not\n  \n     * return until\
  \ the specified number of bytes have been read, or the end\n  \n     * of input\
  \ has been reached.\n  \n     *\n  \n     * PARAMETERS\n  \n     *   c      TCP/IP\
  \ connection\n  \n     *   data   the data read (OUT)\n  \n     *   len    the max\
  \ number of bytes to read\n  \n     *   peek   should this call be peek-only (i.e.\
  \ keep the data read\n  \n     *          in the input buffer to be read again later)?\n\
  \  \n     * RETURN\n  \n     *   The number of bytes read.  The actual number of\
  \ bytes read may be\n  \n     * less than specified because the end of input has\
  \ been reached.\n  \n     * EXCEPTIONS\n  \n     *   value_error    - the buffer\
  \ \"data\" is not big enough to hold the\n  \n     *                    requested\
  \ amount of data.\n  \n     *   end_of_input   - no data is read and the end of\
  \ input is reached\n  \n     *   transfer_timeout - no data is read and a read time-out\
  \ occurred\n  \n     *   network_error  - network error\n  \n     * NOTES\n  \n\
  \     *   If transfer time-out is set when the connection is opened, this\n  \n\
  \     * function will wait for each data packet to be ready to read until\n  \n\
  \     * time-out occurs.  If it occurs, this function will stop reading and\n  \n\
  \     * return all the data read successfully.  If no data is read successfully,\n\
  \  \n     * the transfer_timeout exception will be raised.  The exception can be\n\
  \  \n     * handled and the read operation can be retried at a later time.\n  \n\
  \     */\n  FUNCTION read_raw(\n    c IN OUT NOCOPY connection,\n    data IN OUT\
  \ NOCOPY RAW,\n    len IN PLS_INTEGER DEFAULT 1,\n    peek IN BOOLEAN DEFAULT FALSE\n\
  \  ) RETURN PLS_INTEGER;\n  /**\n  \n     * Writes binary data to a TCP/IP connection.\
  \  This function does not\n  \n     * return until the specified number of bytes\
  \ have been written.\n  \n     *\n  \n     * PARAMETERS\n  \n     *   c      TCP/IP\
  \ connection\n  \n     *   data   the data to be written\n  \n     *   len    the\
  \ number of bytes to write.  When len is NULL, the\n  \n     *          whole length\
  \ of data is written.  The actual amount of\n  \n     *          data written may\
  \ be less because of network condition\n  \n     * RETURN\n  \n     *   The actual\
  \ number of bytes written to the connection.\n  \n     * EXCEPTIONS\n  \n     *\
  \   network_error  - network error\n  \n     */\n  FUNCTION write_raw(\n    c IN\
  \ OUT NOCOPY connection,\n    data IN RAW,\n    len IN PLS_INTEGER DEFAULT NULL\n\
  \  ) RETURN PLS_INTEGER;\n  /*------------------------- Text Input/Output API ----------------------*/\n\
  \  /**\n  \n     * Reads text data from a TCP/IP connection.  This function does\
  \ not\n  \n     * return until the specified number of characters have been read,\
  \ or the end\n  \n     * of input has been reached.\n  \n     *\n  \n     * PARAMETERS\n\
  \  \n     *   c      TCP/IP connection\n  \n     *   data   the data read (OUT)\n\
  \  \n     *   len    the max number of characters to read\n  \n     *   peek   should\
  \ this call be peek-only (i.e. keep the data read\n  \n     *          in the input\
  \ buffer to be read again later)?\n  \n     * RETURN\n  \n     *   The number of\
  \ characters read.  The actual umber of characters read\n  \n     * may be less\
  \ than specified because the end of input has been reached.\n  \n     * EXCEPTIONS\n\
  \  \n     *   value_error    - the buffer \"data\" is not big enough to hold the\n\
  \  \n     *                    requested amount of data.\n  \n     *   end_of_input\
  \   - no data is read and the end of input is reached\n  \n     *   transfer_timeout\
  \ - no data is read and a read time-out occurred\n  \n     *   partial_multibyte_char\
  \ - no data is read and a partial multi-byte\n  \n     *                    character\
  \ is found at the end of input\n  \n     *   network_error  - network error\n  \n\
  \     * NOTES\n  \n     *   If transfer time-out is set when the connection is opened,\
  \ this\n  \n     * function will wait for each data packet to be ready to read until\n\
  \  \n     * time-out occurs.  If it occurs, this function will stop reading and\n\
  \  \n     * return all the data read successfully.  If no data is read successfully,\n\
  \  \n     * the transfer_timeout exception will be raised.  The exception can be\n\
  \  \n     * handled and the read operation can be retried at a later time.\n  \n\
  \     *   Text messages will be converted from the on-the-wire character set,\n\
  \  \n     * specified when the connection was opened, to the database character\
  \ set\n  \n     * before they are returned to the caller.\n  \n     *   Note that\
  \ unless it is explicitly overridden as in terms of characters,\n  \n     * the\
  \ size of a VARCHAR2 buffer is normally specified in terms of bytes,\n  \n     *\
  \ while the parameter len refers to the max. number of characters to be\n  \n  \
  \   * read.  When the database character set is multi-byte where a single\n  \n\
  \     * character may consist of more than 1 byte, user should make sure that\n\
  \  \n     * the buffer is big enough to hold the max. number of characters.  In\n\
  \  \n     * general, the size of the VARCHAR2 buffer should equal to the number\n\
  \  \n     * of characters to read multiplied by the max. number of bytes of a\n\
  \  \n     * character of the database character set.\n  \n     *   If a partial\
  \ multi-byte character is found at the end of input,\n  \n     * this function will\
  \ stop reading and return all the complete multi-byte\n  \n     * characters read\
  \ successfully.  If no complete character is read\n  \n     * successfully, the\
  \ partial_multibyte_char exception will be raised.\n  \n     * The exception can\
  \ be handled and the bytes of that partial multi-byte\n  \n     * character can\
  \ be read as binary by the read_raw function.  If a partial\n  \n     * multi-byte\
  \ character is seen in the middle of the input because the\n  \n     * remaining\
  \ bytes of the character have not arrived and read time-out\n  \n     * occurs,\
  \ the transfer_timeout exception will be raised instead.\n  \n     * The exception\
  \ can be handled and the read operation can be retried\n  \n     * at a later time.\n\
  \  \n     */\n  FUNCTION read_text(\n    c IN OUT NOCOPY connection,\n    data IN\
  \ OUT NOCOPY VARCHAR2 CHARACTER\n    SET\n      ANY_CS,\n      len IN PLS_INTEGER\
  \ DEFAULT 1,\n      peek IN BOOLEAN DEFAULT FALSE\n  ) RETURN PLS_INTEGER;\n  /**\n\
  \  \n     * Writes text data to a TCP/IP connection.  This function does not\n \
  \ \n     * return until the specified number of characters have been written.\n\
  \  \n     *\n  \n     * PARAMETERS\n  \n     *   c      TCP/IP connection\n  \n\
  \     *   data   the data to be written\n  \n     *   len    the number of characters\
  \ to write.   When len is NULL,\n  \n     *          the whole length of data is\
  \ written.  The amount of\n  \n     *          data returned may be less because\
  \ of network condition\n  \n     * RETURN\n  \n     *   The number of characters\
  \ of data written to the connection.\n  \n     * EXCEPTIONS\n  \n     *   network_error\
  \  - network error\n  \n     * NOTES\n  \n     *   Text messages will be converted\
  \ from the database character set\n  \n     * to the on-the-wire character set,\
  \ specified when the connection was\n  \n     * opened, before they are transmitted\
  \ on the wire.\n  \n     */\n  FUNCTION write_text(\n    c IN OUT NOCOPY connection,\n\
  \    data IN VARCHAR2 CHARACTER\n    SET\n      ANY_CS,\n      len IN PLS_INTEGER\
  \ DEFAULT NULL\n  ) RETURN PLS_INTEGER;\n  /*------------------- Line-oriented Input/Output\
  \ API ----------------------*/\n  /**\n  \n     * Reads a text line from a TCP/IP\
  \ connection.  A line is terminated by\n  \n     * a line-feed, a carriage-return\
  \ or a carriage-return followed by a\n  \n     * line-feed.  The function does not\
  \ return until the end of line or the\n  \n     * end of input is reached.\n  \n\
  \     *\n  \n     * PARAMETERS\n  \n     *   c           TCP/IP connection\n  \n\
  \     *   data        the data read (OUT)\n  \n     *   remove_crlf remove the trailing\
  \ new-line character(s) or not\n  \n     *   peek        should this call be peek-only\
  \ (i.e. keep the data read\n  \n     *               in the input buffer to be read\
  \ again later)?\n  \n     * RETURN\n  \n     *   The number of characters read.\n\
  \  \n     * EXCEPTIONS\n  \n     *   value_error    - the buffer \"data\" is not\
  \ big enough to hold the\n  \n     *                    requested amount of data.\n\
  \  \n     *   end_of_input   - no data is read and the end of input is reached\n\
  \  \n     *   transfer_timeout - no data is read and a read time-out occurred\n\
  \  \n     *   partial_multibyte_char - no data is read and a partial multi-byte\n\
  \  \n     *                    character is found at the end of input\n  \n    \
  \ *   network_error  - network error\n  \n     * NOTES\n  \n     *   If transfer\
  \ time-out is set when the connection is opened, this\n  \n     * function will\
  \ wait for each data packet to be ready to read until\n  \n     * time-out occurs.\
  \  If it occurs, this function will stop reading and\n  \n     * return all the\
  \ data read successfully.  If no data is read successfully,\n  \n     * the transfer_timeout\
  \ exception will be raised.  The exception can be\n  \n     * handled and the read\
  \ operation can be retried at a later time.\n  \n     *   Text messages will be\
  \ converted from the on-the-wire character set,\n  \n     * specified when the connection\
  \ was opened, to the database character set\n  \n     * before they are returned\
  \ to the caller.\n  \n     *   Note that unless it is explicitly overridden as in\
  \ terms of characters,\n  \n     * the size of a VARCHAR2 buffer is normally specified\
  \ in terms of bytes,\n  \n     * while the parameter len refers to the max. number\
  \ of characters to be\n  \n     * read.  When the database character set is multi-byte\
  \ where a single\n  \n     * character may consist of more than 1 byte, user should\
  \ make sure that\n  \n     * the buffer is big enough to hold the max. number of\
  \ characters.  In\n  \n     * general, the size of the VARCHAR2 buffer should equal\
  \ to the number\n  \n     * of characters to read multiplied by the max. number\
  \ of bytes of a\n  \n     * character of the database character set.\n  \n     *\
  \   If a partial multi-byte character is found at the end of input,\n  \n     *\
  \ this function will stop reading and return all the complete multi-byte\n  \n \
  \    * characters read successfully.  If no complete character is read\n  \n   \
  \  * successfully, the partial_multibyte_char exception will be raised.\n  \n  \
  \   * The exception can be handled and the bytes of that partial multi-byte\n  \n\
  \     * character can be read as binary by the read_raw function.  If a partial\n\
  \  \n     * multi-byte character is seen in the middle of the input because the\n\
  \  \n     * remaining bytes of the character have not arrived and read time-out\n\
  \  \n     * occurs, the transfer_timeout exception will be raised instead.\n  \n\
  \     * The exception can be handled and the read operation can be retried\n  \n\
  \     * at a later time.\n  \n     */\n  FUNCTION read_line(\n    c IN OUT NOCOPY\
  \ connection,\n    data IN OUT NOCOPY VARCHAR2 CHARACTER\n    SET\n      ANY_CS,\n\
  \      remove_crlf IN BOOLEAN DEFAULT FALSE,\n      peek IN BOOLEAN DEFAULT FALSE\n\
  \  ) RETURN PLS_INTEGER;\n  /**\n  \n     * Writes a text line to a TCP/IP connection.\
  \  The line is terminated\n  \n     * with the new-line character sequence sepecified\
  \ when this connection\n  \n     * is opened.\n  \n     *\n  \n     * PARAMETERS\n\
  \  \n     *   c     TCP/IP connection\n  \n     *   data  the data to be written\n\
  \  \n     * RETURN\n  \n     *   Then number of characters of data written to the\
  \ connection.\n  \n     * EXCEPTIONS\n  \n     *   network_error  - network error\n\
  \  \n     * NOTES\n  \n     *   Text messages will be converted from the database\
  \ character set\n  \n     * to the on-the-wire character set, specified when the\
  \ connection was\n  \n     * opened, before they are transmitted on the wire.\n\
  \  \n     */\n  FUNCTION write_line(\n    c IN OUT NOCOPY connection,\n    data\
  \ IN VARCHAR2 CHARACTER\n    SET\n      ANY_CS DEFAULT NULL\n  ) RETURN PLS_INTEGER;\n\
  \  /*----------------- Convenient functions for Input API ------------------*/\n\
  \  /**\n  \n     * A convenient form of the read functions, which return the data\
  \ read\n  \n     * instead of the amount of data read.\n  \n     *\n  \n     * PARAMETERS\n\
  \  \n     *   c            TCP/IP connection\n  \n     *   len          the max\
  \ number of bytes or characters to read\n  \n     *   removle_crlf remove the trailing\
  \ new-line character(s) or not\n  \n     *   peek         should this call be peek-only\
  \ (i.e. keep the data read\n  \n     *                in the input buffer to be\
  \ read again later)?\n  \n     * RETURN\n  \n     *   The data (or line) read.\n\
  \  \n     * EXCEPTIONS\n  \n     *   end_of_input   - no data is read and the end\
  \ of input is reached\n  \n     *   partial_multibyte_char - no data is read and\
  \ a partial multi-byte\n  \n     *                    character is found at the\
  \ end of input\n  \n     *   transfer_timeout - no data is read and a read time-out\
  \ occurred\n  \n     *   network_error  - network error\n  \n     * NOTES\n  \n\
  \     *   For all get_XXX API, see the corresponding read_XXX API for the\n  \n\
  \     * read time-out issue.\n  \n     *   For get_text and get_line, see the corresponding\
  \ read_XXX API for\n  \n     * character set conversion, buffer size, and multi-byte\
  \ character issues.\n  \n     */\n  FUNCTION get_raw(\n    c IN OUT NOCOPY connection,\n\
  \    len IN PLS_INTEGER DEFAULT 1,\n    peek IN BOOLEAN DEFAULT FALSE\n  ) RETURN\
  \ RAW;\nFUNCTION get_text(\n    c IN OUT NOCOPY connection,\n    len IN PLS_INTEGER\
  \ DEFAULT 1,\n    peek IN BOOLEAN DEFAULT FALSE\n  ) RETURN VARCHAR2;\nFUNCTION\
  \ get_line(\n    c IN OUT NOCOPY connection,\n    remove_crlf IN BOOLEAN DEFAULT\
  \ false,\n    peek IN BOOLEAN DEFAULT FALSE\n  ) RETURN VARCHAR2;\nFUNCTION get_text_nchar(\n\
  \    c IN OUT NOCOPY connection,\n    len IN PLS_INTEGER DEFAULT 1,\n    peek IN\
  \ BOOLEAN DEFAULT FALSE\n  ) RETURN NVARCHAR2;\nFUNCTION get_line_nchar(\n    c\
  \ IN OUT NOCOPY connection,\n    remove_crlf IN BOOLEAN DEFAULT false,\n    peek\
  \ IN BOOLEAN DEFAULT FALSE\n  ) RETURN NVARCHAR2;\n  /**\n  \n     * Transmits all\
  \ the output data in the output queue to the connection\n  \n     * immediately.\n\
  \  \n     *\n  \n     * PARAMETERS\n  \n     *   c   TCP/IP connection\n  \n   \
  \  * RETURN\n  \n     *   None.\n  \n     * EXCEPTIONS\n  \n     *   network_error\
  \  - network error\n  \n     */\n  PROCEDURE flush(c IN OUT NOCOPY connection);\n\
  \  /**\n  \n     * Closes a TCP/IP connection.  After the connection is closed,\
  \ all the\n  \n     * in the connection will be set to NULL.\n  \n     *\n  \n \
  \    * PARAMETERS\n  \n     *   c    TCP/IP connection\n  \n     * RETURN\n  \n\
  \     *   None.\n  \n     * EXCEPTIONS\n  \n     *   network_error  - network error\n\
  \  \n     */\n  PROCEDURE close_connection(c IN OUT NOCOPY connection);\n  /**\n\
  \  \n     * Closes all open TCP/IP connections.\n  \n     *\n  \n     * PARAMETERS\n\
  \  \n     *   None\n  \n     * RETURN\n  \n     *   None\n  \n     * EXCEPTIONS\n\
  \  \n     *   None\n  \n     */\n  PROCEDURE close_all_connections;\nEND;"
