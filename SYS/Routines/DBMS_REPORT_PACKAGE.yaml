schema: SYS
name: DBMS_REPORT
routineType: PACKAGE
returnParamater:
  name: ZLIB2BASE64_REPORT_XML.(--return--)
  ordinalPosition: 0
  dataType: OPAQUE/XMLTYPE
  parameterMode: OUT
parameters:
- name: BUILD_GENERIC_TAG.TAG_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: BUILD_GENERIC_TAG.TAG_INPUTS
  ordinalPosition: 2
  dataType: UNDEFINED
  parameterMode: IN
- name: BUILD_REPORT_REFERENCE_STRUCT.COMPONENT_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: BUILD_REPORT_REFERENCE_STRUCT.REPORT_NAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: BUILD_REPORT_REFERENCE_STRUCT.ID_PARAM_VAL
  ordinalPosition: 3
  dataType: PL/SQL TABLE
  parameterMode: IN
- name: BUILD_REPORT_REFERENCE_VARG.COMPONENT_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: BUILD_REPORT_REFERENCE_VARG.REPORT_NAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: BUILD_REPORT_REFERENCE_VARG.ID_PARAM_VAL
  ordinalPosition: 3
  dataType: UNDEFINED
  parameterMode: IN
- name: CLEAR_FRAMEWORK.COMPONENT_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.MESSAGE_NUMBER
  ordinalPosition: 1
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: FORMAT_MESSAGE.MESSAGE_FACILITY
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.LANGUAGE
  ordinalPosition: 3
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.ARG1
  ordinalPosition: 4
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.ARG2
  ordinalPosition: 5
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.ARG3
  ordinalPosition: 6
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.ARG4
  ordinalPosition: 7
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.ARG5
  ordinalPosition: 8
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.ARG6
  ordinalPosition: 9
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.ARG7
  ordinalPosition: 10
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.ARG8
  ordinalPosition: 11
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.ARG9
  ordinalPosition: 12
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.ARG10
  ordinalPosition: 13
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.ARG11
  ordinalPosition: 14
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_MESSAGE.ARG12
  ordinalPosition: 15
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_REPORT(1).REPORT
  ordinalPosition: 1
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
- name: FORMAT_REPORT(1).FORMAT_NAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_REPORT(1).COMPRESS_XML
  ordinalPosition: 3
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: FORMAT_REPORT(2).REPORT
  ordinalPosition: 1
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
- name: FORMAT_REPORT(2).FORMAT_NAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: FORMAT_REPORT(2).FORMAT_CONTENT_TYPE
  ordinalPosition: 3
  dataType: NUMBER
  parameterMode: OUT
- name: FORMAT_REPORT(2).COMPRESS_XML
  ordinalPosition: 4
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: GET_AWR_CONTEXT.P_START_TIME
  ordinalPosition: 1
  dataType: DATE
  parameterMode: IN
- name: GET_AWR_CONTEXT.P_END_TIME
  ordinalPosition: 2
  dataType: DATE
  parameterMode: IN
- name: GET_AWR_CONTEXT.P_DBID
  ordinalPosition: 3
  dataType: NUMBER
  parameterMode: INOUT
- name: GET_AWR_CONTEXT.P_BEGIN_SNAP
  ordinalPosition: 4
  dataType: NUMBER
  parameterMode: INOUT
- name: GET_AWR_CONTEXT.P_END_SNAP
  ordinalPosition: 5
  dataType: NUMBER
  parameterMode: INOUT
- name: GET_IMPORTED_REPORT_ATTRS.P_DBID
  ordinalPosition: 1
  dataType: NUMBER
  parameterMode: IN
- name: GET_IMPORTED_REPORT_ATTRS.P_INST_COUNT
  ordinalPosition: 2
  dataType: NUMBER
  parameterMode: OUT
- name: GET_IMPORTED_REPORT_ATTRS.P_CPU_CORES
  ordinalPosition: 3
  dataType: NUMBER
  parameterMode: OUT
- name: GET_IMPORTED_REPORT_ATTRS.P_HYPERTHREADED
  ordinalPosition: 4
  dataType: NUMBER
  parameterMode: OUT
- name: GET_IMPORTED_REPORT_ATTRS.P_CON_ID
  ordinalPosition: 5
  dataType: NUMBER
  parameterMode: OUT
- name: GET_IMPORTED_REPORT_ATTRS.P_CON_NAME
  ordinalPosition: 6
  dataType: VARCHAR2
  parameterMode: OUT
- name: GET_IMPORTED_REPORT_ATTRS.P_IS_EXA
  ordinalPosition: 7
  dataType: NUMBER
  parameterMode: OUT
- name: GET_IMPORTED_REPORT_ATTRS.P_TIMEZONE_OFFSET
  ordinalPosition: 8
  dataType: NUMBER
  parameterMode: OUT
- name: GET_IMPORTED_REPORT_ATTRS.P_PACKS
  ordinalPosition: 9
  dataType: NUMBER
  parameterMode: OUT
- name: GET_PARAM.PARAM_VAL
  ordinalPosition: 1
  dataType: PL/SQL TABLE
  parameterMode: IN
- name: GET_PARAM.PARAM_NAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: GET_PARAM.MANDATORY
  ordinalPosition: 3
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: GET_PARAM.DEFAULT_VALUE
  ordinalPosition: 4
  dataType: CLOB
  parameterMode: IN
- name: GET_PARAM.NULLABLE
  ordinalPosition: 5
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
- name: GET_REPORT(1).REPORT_REFERENCE
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: GET_REPORT(1).COMPRESS_XML
  ordinalPosition: 2
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: GET_REPORT(2).REPORT_REFERENCE
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: GET_REPORT(2).CONTENT_TYPE
  ordinalPosition: 2
  dataType: NUMBER
  parameterMode: OUT
- name: GET_REPORT(2).COMPRESS_XML
  ordinalPosition: 3
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: GET_REPORT_WITH_SUMMARY.REPORT_REFERENCE
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: GET_SNAP_ID.P_TIME
  ordinalPosition: 1
  dataType: DATE
  parameterMode: IN
- name: GET_SNAP_ID.P_DBID
  ordinalPosition: 2
  dataType: NUMBER
  parameterMode: IN
- name: GET_TIMING_INFO.PHASE
  ordinalPosition: 1
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: GET_TIMING_INFO.ELAPSED
  ordinalPosition: 2
  dataType: NUMBER
  parameterMode: INOUT
- name: GET_TIMING_INFO.CPU
  ordinalPosition: 3
  dataType: NUMBER
  parameterMode: INOUT
- name: GZIP_REPORT_XML.REPORT
  ordinalPosition: 1
  dataType: CLOB
  parameterMode: IN
- name: LOOKUP_COMPONENT_ID.COMPONENT_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: LOOKUP_REPORT_ID.COMPONENT_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: LOOKUP_REPORT_ID.REPORT_NAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: PARSE_REPORT_REFERENCE.REPORT_REFERENCE
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: PARSE_REPORT_REFERENCE.COMPONENT_NAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: OUT
- name: PARSE_REPORT_REFERENCE.REPORT_NAME
  ordinalPosition: 3
  dataType: VARCHAR2
  parameterMode: OUT
- name: PARSE_REPORT_REFERENCE.ID_PARAM_VAL
  ordinalPosition: 4
  dataType: PL/SQL TABLE
  parameterMode: OUT
- name: REGISTER_COMPONENT.COMPONENT_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_COMPONENT.COMPONENT_DESC
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_COMPONENT.COMPONENT_OBJECT
  ordinalPosition: 3
  dataType: OBJECT
  parameterMode: IN
- name: REGISTER_CUSTOM_FORMAT.COMPONENT_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_CUSTOM_FORMAT.REPORT_NAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_CUSTOM_FORMAT.FORMAT_NAME
  ordinalPosition: 3
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_CUSTOM_FORMAT.FORMAT_DESC
  ordinalPosition: 4
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_CUSTOM_FORMAT.FORMAT_CONTENT_TYPE
  ordinalPosition: 5
  dataType: NUMBER
  parameterMode: IN
- name: REGISTER_REPORT.COMPONENT_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_REPORT.REPORT_NAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_REPORT.REPORT_DESC
  ordinalPosition: 3
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_REPORT.SCHEMA_ID
  ordinalPosition: 4
  dataType: NUMBER
  parameterMode: IN
- name: REGISTER_SWF.COMPONENT_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_SWF.REPORT_NAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_SWF.SWF_ID
  ordinalPosition: 3
  dataType: NUMBER
  parameterMode: IN
- name: REGISTER_TEXT_FORMAT.COMPONENT_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_TEXT_FORMAT.REPORT_NAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_TEXT_FORMAT.FORMAT_NAME
  ordinalPosition: 3
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_TEXT_FORMAT.FORMAT_DESC
  ordinalPosition: 4
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_TEXT_FORMAT.HTML_STYLESHEET_ID
  ordinalPosition: 5
  dataType: NUMBER
  parameterMode: IN
- name: REGISTER_TEXT_FORMAT.TEXT_MAX_LINESIZE
  ordinalPosition: 6
  dataType: NUMBER
  parameterMode: IN
- name: REGISTER_XSLT_FORMAT.COMPONENT_NAME
  ordinalPosition: 1
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_XSLT_FORMAT.REPORT_NAME
  ordinalPosition: 2
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_XSLT_FORMAT.FORMAT_NAME
  ordinalPosition: 3
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_XSLT_FORMAT.FORMAT_DESC
  ordinalPosition: 4
  dataType: VARCHAR2
  parameterMode: IN
- name: REGISTER_XSLT_FORMAT.FORMAT_CONTENT_TYPE
  ordinalPosition: 5
  dataType: NUMBER
  parameterMode: IN
- name: REGISTER_XSLT_FORMAT.STYLESHEET_ID
  ordinalPosition: 6
  dataType: NUMBER
  parameterMode: IN
- name: RESTORE_REPORT_ENV.ORIG_ENV
  ordinalPosition: 1
  dataType: TABLE
  parameterMode: IN
- name: SETUP_REPORT_ENV.ORIG_ENV
  ordinalPosition: 1
  dataType: TABLE
  parameterMode: INOUT
- name: TRANSFORM_HTML_TO_TEXT.DOCUMENT
  ordinalPosition: 1
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
- name: TRANSFORM_HTML_TO_TEXT.MAX_LINESIZE
  ordinalPosition: 2
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: TRANSFORM_REPORT_XML.REPORT_XML
  ordinalPosition: 1
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
- name: TRANSFORM_REPORT_XML.ZLIB2BASE64
  ordinalPosition: 2
  dataType: BINARY_INTEGER
  parameterMode: IN
- name: VALIDATE_REPORT.REPORT
  ordinalPosition: 1
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
- name: ZLIB2BASE64_CLOB.REPORT
  ordinalPosition: 1
  dataType: CLOB
  parameterMode: IN
- name: ZLIB2BASE64_REPORT_XML.REPORT_XML
  ordinalPosition: 1
  dataType: OPAQUE/XMLTYPE
  parameterMode: IN
routineDefinition: |-
  PACKAGE dbms_report AUTHID CURRENT_USER IS --=========================================================================--
  --                             GLOBAL TYPES                                --
  --=========================================================================--
  TYPE string_number_map IS TABLE OF NUMBER INDEX BY VARCHAR2(32767);
  --=========================================================================--
  --                           GLOBAL CONSTANTS                              --
  --=========================================================================--
  -- date format from flex
  -- date_fmt_mod is used when generating/checking the URL parameters
  DATE_FMT_MOD CONSTANT varchar2(21): = 'mm:dd:yyyy hh24:mi:ss';
  -- date_fmt is used for any dates printed out and can be consumed
  -- by flex Formatter.dateXML()
  DATE_FMT CONSTANT varchar2(21): = 'mm/dd/yyyy hh24:mi:ss';
  -- Content type constants (used by servlet, stored in wri$_rept_formats)
  CONTENT_TYPE_XML CONSTANT NUMBER: = 1;
  CONTENT_TYPE_HTML CONSTANT NUMBER: = 2;
  CONTENT_TYPE_TEXT CONSTANT NUMBER: = 3;
  CONTENT_TYPE_BINARY CONSTANT NUMBER: = 4;
  -- Directory name that clients use passing for their files
  SHARED_DIRECTORY_OBJECT CONSTANT VARCHAR2(64): = 'ORAREP_DIR';
  --=========================================================================--
  --                                 TYPES                                   --
  --=========================================================================--
  TYPE ref_string_idspec IS TABLE OF VARCHAR2(32767) INDEX BY VARCHAR2(32767);
  -- record for storing canonical values of certain parameters we wish to
  -- set before any report is generated. These parameters influence the way
  -- data is formatted in the reports and the canonical values will ensure
  -- consistent formatting irrespective of other umbrella parameter changes
  -- We set the following parameters:
  -- NLS_NUMERIC_CHARACTERS - to control how numbers are formatted (decimal
  --                          and group separator characters)
  -- NLS_DATE_FORMAT        - to control date format
  -- NLS_TIMESTAMP_FORMAT, NLS_TIMESTAMP_TZ_FORMAT - to control timestamp
  -- format
  TYPE format_param_value IS RECORD (
    param_num NUMBER,
    param_value VARCHAR2(32767)
  );
  TYPE format_param_values IS TABLE OF format_param_value;
  --=========================================================================--
  --                    COMPONENT MAPPING SERVICE FUNCTIONS                  --
  --=========================================================================--
  ------------------------------ register_component ---------------------------
  -- NAME:
  --     register_component
  --
  -- DESCRIPTION:
  --     This procedure registers a new component with the XML reporting
  --     framework.  It should be called at database startup from within the
  --     dbms_report_registry package.
  --
  -- PARAMETERS:
  --     component_name   (IN) - name of the component to register
  --                             (converted to lower case)
  --     component_desc   (IN) - description of the component to register
  --     component_object (IN) - object to store for this component, used for
  --                             requesting reports
  --
  -- RETURN:
  --     VOID
  -----------------------------------------------------------------------------
  PROCEDURE register_component(
    component_name IN VARCHAR2,
    component_desc IN VARCHAR2,
    component_object IN wri$_rept_abstract_t
  );
  -------------------------------- register_report ----------------------------
  -- NAME:
  --     register_report
  --
  -- DESCRIPTION:
  --     This procedure registers a report with the framework.  One components
  --     can have multiple reports but must have at least 1.  Having multiple
  --     reports is the best way for components to generate XML documents that
  --     link to each other through the <report_ref> mechanism.
  --
  -- PARAMETERS:
  --     component_name (IN)   - name of the component to register
  --     report_name    (IN)   - name of the report to register
  --                             (converted to lower case)
  --     report_desc    (IN)   - description of the report to register
  --     schema_id      (IN)   - file id of schema for this report, can be NULL
  --                             (returned from store_file)
  --
  -- RETURN:
  --     VOID
  -----------------------------------------------------------------------------
  PROCEDURE register_report(
    component_name IN VARCHAR2,
    report_name IN VARCHAR2,
    report_desc IN VARCHAR2,
    schema_id IN NUMBER
  );
  ------------- build_report_reference - vararg and structure versions --------
  -- NAME:
  --     build_report_reference _varg/_struct - vararg and structure versions
  --
  -- DESCRIPTION:
  --     This function builds a report ref string given the necessary inputs.
  --     The report_id is given as a variable-argument list of name/value
  --     pairs, or as an instance of the ref_string_idspec type.
  --
  --     For example, to generate the reference for the string
  --     /orarep/cname/rname?foo=1AMPbar=2
  --     (substituting AMP for the ampersand in the ref string)
  --     call this function as
  --
  --     build_report_reference_varg('cname','rname','foo','1','bar','2');
  --
  --     or as
  --
  --     build_report_reference_struct('cname','rname',params) where params
  --     has been initialized to hold 'foo' and 'bar'.
  --
  --     Parameter names and values are case-sensitive
  --
  -- NOTES:
  --     build_report_reference_vararg cannot be called from SQL due to a known
  --     limitation in the PL/SQL vararg implementation.  Clients can, however,
  --     create a PL/SQL non-vararg wrapper around it and call that in SQL if
  --     they have the need.
  --
  --     The framework reserves some parameter names for internal use.  See
  --     dbms_report.get_report.
  --
  -- PARAMETERS:
  --     component_name (IN)   - name of the component for ref string
  --     report_name    (IN)   - name of the report for ref string
  --     id_param_val   (IN)   - list of parameter names and values for
  --                             the report_id portion of the string
  --
  -- RETURN:
  --     report reference string, as VARCHAR2
  -----------------------------------------------------------------------------
  FUNCTION build_report_reference_varg(
    component_name IN VARCHAR2,
    report_name IN VARCHAR2,
    id_param_val ...
  ) RETURN VARCHAR2;
  FUNCTION build_report_reference_struct(
    component_name IN VARCHAR2,
    report_name IN VARCHAR2,
    id_param_val IN ref_string_idspec
  ) RETURN VARCHAR2;
  ----------------------------- parse_report_reference ------------------------
  -- NAME:
  --     parse_report_reference
  --
  -- DESCRIPTION:
  --     This function parses a report reference to reveal its constituent
  --     parts.  Each one is returned as an OUT parameter, converted to lower
  --     case.  Parameter names and values are case-sensitive.
  --
  -- PARAMETERS:
  --     report_reference (IN)   - report ref string to parse
  --     component_name   (OUT)  - name of the component for ref string
  --     report_name      (OUT)  - name of the report for ref string
  --     id_param_val     (OUT)  - parameter names and values for ref string
  --
  -- RETURN:
  --     report reference string, as VARCHAR2
  -----------------------------------------------------------------------------
  PROCEDURE parse_report_reference(
    report_reference IN VARCHAR2,
    component_name OUT VARCHAR2,
    report_name OUT VARCHAR2,
    id_param_val OUT ref_string_idspec
  );
  --------------------------------- get_param ---------------------------------
  -- NAME:
  --     get_param
  --
  -- DESCRIPTION:
  --     Internal, get parameter from parsed report reference
  --
  -- PARAMETERS:
  --     param_val     (IN)  - parameter names and value pairs for ref string
  --     param_name    (IN)  - parameter name
  --     mandatory     (IN)  - TRUE if parameter is mandatory. Default is FALSE
  --     default_value (IN)  - Default value, null by default
  --     nullable      (IN)  - TRUE if null string should be interpreted as
  --                           a NULL value. Default is FALSE
  --
  -- RETURN:
  --     parameter value, a clob. null if parameter is null or does not exists
  -----------------------------------------------------------------------------
  FUNCTION get_param(
    param_val IN ref_string_idspec,
    param_name IN VARCHAR2,
    mandatory IN BOOLEAN: = FALSE,
    default_value IN CLOB: = null,
    nullable IN BOOLEAN: = FALSE
  ) RETURN CLOB;
  ----------------------------------- get_report ------------------------------
  -- NAME:
  --     get_report
  --
  -- DESCRIPTION:
  --     This procedure fetches a report from its component.
  --
  -- PARAMETERS:
  --     report_reference (IN) - report_ref string to use for fetching this
  --                             report, of the form
  --                             /orarep/component/report_name?<PARAMS>.
  --
  --                             Components can build a report reference by
  --                             calling build_report_reference, or parse one
  --                             by calling parse_report_reference.
  --
  --                             The following parameter names are reserved and
  --                             interpreted by this function.  They will be
  --                             removed from the reference string before
  --                             dispatching the get_report call, and applied
  --                             to the XML returned by the component.  Add
  --                             them to your ref strings to get the related
  --                             functionality.
  --
  --                               + format: maps to format name.  When
  --                                 specified, we will apply the format before
  --                                 returning the report
  --                               + validate: y/n according to whether
  --                                 framework should validate the xml report.
  --
  --    compress_xml      (IN) - compress xml portion of the report
  --
  -- RETURN:
  --     report
  --
  -- NOTES:
  --     See build_report_reference comments for sample ref strings.
  -----------------------------------------------------------------------------
  FUNCTION get_report(
    report_reference IN VARCHAR2,
    compress_xml IN BINARY_INTEGER: = 0
  ) RETURN CLOB;
  ------------------------------ get_report_with_summary ----------------------
  -- NAME:
  --     get_report_with_summary
  --
  -- DESCRIPTION:
  --     This procedure fetches a report from its component.
  --
  -- PARAMETERS:
  --     report_reference (IN) - report_ref string to use for fetching this
  --                             report, of the form
  --                             /orarep/component/report_name?<PARAMS>.
  --
  --                             Components can build a report reference by
  --                             calling build_report_reference, or parse one
  --                             by calling parse_report_reference.
  --
  --                             The following parameter names are reserved and
  --                             interpreted by this function.  They will be
  --                             removed from the reference string before
  --                             dispatching the get_report call, and applied
  --                             to the XML returned by the component.  Add
  --                             them to your ref strings to get the related
  --                             functionality.
  --
  --                               + format: maps to format name.  When
  --                                 specified, we will apply the format before
  --                                 returning the report
  --                               + validate: y/n according to whether
  --                                 framework should validate the xml report.
  --
  -- RETURN:
  --     report
  --
  -- NOTES:
  --     See build_report_reference comments for sample ref strings.
  -----------------------------------------------------------------------------
  FUNCTION get_report_with_summary(report_reference IN VARCHAR2) RETURN CLOB;
  --=========================================================================--
  --                  TRANSFORMATION AND VALIDATION FUNCTIONS                --
  --=========================================================================--
  ------------------------------ register_xslt_format -------------------------
  -- NAME:
  --     register_xslt_format
  --
  -- DESCRIPTION:
  --     This function registers a format mapping for a report via XSLT.  Prior
  --     to calling this function the XSLT should have been stored in XDB by
  --     calling STORE_FILE.  After a format has been registered it can be
  --     used by calling format_report.
  --
  -- PARAMETERS:
  --     component_name      (IN) - name of component that this format
  --                                belongs to
  --     report_name         (IN) - name of report that this format belongs to
  --     format_name         (IN) - format name (names are unique by report)
  --                                  note: the name 'em' is reserved
  --     format_desc         (IN) - format description
  --     format_content_type (IN) - content type of format output, one of
  --                                 + CONTENT_TYPE_TEXT: plain text
  --                                 + CONTENT_TYPE_XML: xml
  --                                 + CONTENT_TYPE_HTML: html
  --                                 + CONTENT_TYPE_BINARY: other
  --     stylesheet_id       (IN) - File ID for the XSLT
  --                                (returned by store_file)
  --
  -----------------------------------------------------------------------------
  PROCEDURE register_xslt_format(
    component_name IN VARCHAR2,
    report_name IN VARCHAR2,
    format_name IN VARCHAR2,
    format_desc IN VARCHAR2,
    format_content_type IN NUMBER: = CONTENT_TYPE_HTML,
    stylesheet_id IN NUMBER
  );
  ------------------------------ register_text_format -------------------------
  -- NAME:
  --     register_text_format
  --
  -- DESCRIPTION:
  --     This function registers a format mapping for a text report.  Text
  --     reports are created by first transforming an XML document to HTML
  --     using an XSLT provided by the component, and then turning the HTML to
  --     formatted text using the framework's own internal engine.  Prior
  --     to calling this function the XSLT should have been stored in XDB by
  --     calling STORE_FILE.  After a format has been registered it can be
  --     used by calling format_report.
  --
  -- PARAMETERS:
  --     component_name      (IN) - name of component for this format
  --     report_name         (IN) - name of report for this format
  --     format_name         (IN) - format name (names are unique by report)
  --                                  note: the name 'em' is reserved
  --     format_desc         (IN) - format description
  --     html_stylesheet_id  (IN) - file id to the stylesheet that transforms
  --                                from XML to HTML (returned by store_file)
  --     text_max_linesize   (IN) - maximum linesize for text report
  --
  -----------------------------------------------------------------------------
  PROCEDURE register_text_format(
    component_name IN VARCHAR2,
    report_name IN VARCHAR2,
    format_name IN VARCHAR2,
    format_desc IN VARCHAR2,
    html_stylesheet_id IN NUMBER,
    text_max_linesize IN NUMBER: = 80
  );
  ----------------------------- register_custom_format ------------------------
  -- NAME:
  --     register_custom_format
  --
  -- DESCRIPTION:
  --     This function registers a custom format for an XML document. It allows
  --     components to format their document for viewing manually,by performing
  --     any kind of programmatic manipulation of the XML tree and outputting
  --     CLOB.
  --
  --     To apply custom formats, the framework will call the custom_format()
  --     member function in the object type for the component.
  --
  -- PARAMETERS:
  --     component_name      (IN) - name of component for this format
  --     report_name         (IN) - name of report for this format
  --     format_name         (IN) - format name (names are unique by report)
  --                                  note: the name 'em' is reserved
  --     format_desc         (IN) - format description
  --     format_content_type (IN) - content type of format output, one of
  --                                 + CONTENT_TYPE_TEXT: plain text
  --                                 + CONTENT_TYPE_XML: xml
  --                                 + CONTENT_TYPE_HTML: html
  --                                 + CONTENT_TYPE_BINARY: other
  --
  -----------------------------------------------------------------------------
  PROCEDURE register_custom_format(
    component_name IN VARCHAR2,
    report_name IN VARCHAR2,
    format_name IN VARCHAR2,
    format_desc IN VARCHAR2,
    format_content_type IN NUMBER
  );
  ---------------------------------- register_swf -----------------------------
  -- NAME:
  --     register_swf
  --
  -- DESCRIPTION:
  --     This function registers a swf file for a report.  Each report
  --     corresponds to one swf file.  The swf file displays the report
  --     in flash UI.
  --
  -- PARAMETERS:
  --     component_name      (IN) - name of component for this swf
  --     report_name         (IN) - name of report for this swf
  --     swf_id              (IN) - id of the swf file
  --
  -----------------------------------------------------------------------------
  PROCEDURE register_swf(
    component_name IN VARCHAR2,
    report_name IN VARCHAR2,
    swf_id IN NUMBER
  );
  --------------------------------- format_report -----------------------------
  -- NAME:
  --     format_report
  --
  -- DESCRIPTION:
  --     This function transforms an XML document into another format, as
  --     declared through one of the register_xxx_format calls above.
  --
  -- PARAMETERS:
  --     report              (IN) - document to format
  --     format_name         (IN) - format name to apply
  --     compress_xml        (IN) - compress xml
  -----------------------------------------------------------------------------
  FUNCTION format_report(
    report IN XMLTYPE,
    format_name IN VARCHAR2,
    compress_xml IN BINARY_INTEGER: = 0
  ) RETURN CLOB;
  ------------------------------- validate_report -----------------------------
  -- NAME:
  --     validate_report
  --
  -- DESCRIPTION:
  --     This procedure applies the XML schema registered with the framework
  --     corresponding to the report specified to verify that it was built
  --     correctly.
  --
  -- PARAMETERS:
  --     report  (IN) - report to validate
  --
  -- RETURN:
  --     None
  --
  -- ERRORS:
  --     Raises error 31011 if document is not valid
  -----------------------------------------------------------------------------
  PROCEDURE validate_report(report IN XMLTYPE);
  ------------------------------ lookup_component_id --------------------------
  -- NAME:
  --     lookup_component_id
  --
  -- DESCRIPTION:
  --     This function fetches a component id and returns it.  If the component
  --     does not exist, it signals ERR_UNKNOWN_OBJECT. Note that this function
  --     does the lookup in the view, so it can be called in an invoker rights
  --     situation by any user.
  --
  -- PARAMETERS:
  --     component_name (IN) - name of component to look up
  --
  -- RETURN:
  --     component id
  -----------------------------------------------------------------------------
  FUNCTION lookup_component_id(component_name IN VARCHAR2) RETURN NUMBER;
  ------------------------------- lookup_report_id ----------------------------
  -- NAME:
  --     lookup_report_id
  --
  -- DESCRIPTION:
  --     This function fetches a report id and returns it.  If the report
  --     does not exist, it signals ERR_UNKNOWN_OBJECT. Note that this function
  --     does the lookup in the view, so it can be called in an invoker rights
  --     situation by any user.
  --
  -- PARAMETERS:
  --     component_name (IN) - name of component to look up
  --     report_name    (IN) - name of report to look up
  --
  -- RETURN:
  --     unique report id
  -----------------------------------------------------------------------------
  FUNCTION lookup_report_id(
    component_name IN VARCHAR2,
    report_name IN VARCHAR2
  ) RETURN NUMBER;
  --=========================================================================--
  --                       UNDOCUMENTED  FUNCTIONS                           --
  --                       ** INTERNAL USE ONLY **                           --
  --=========================================================================--
  PROCEDURE clear_framework(component_name IN VARCHAR2: = NULL);
  FUNCTION build_generic_tag(
    tag_name IN VARCHAR2,
    tag_inputs ...
  ) RETURN XMLTYPE;
  FUNCTION get_report(
    report_reference IN VARCHAR2,
    content_type OUT NUMBER,
    compress_xml IN BINARY_INTEGER: = 0
  ) RETURN CLOB;
  FUNCTION format_report(
    report IN XMLTYPE,
    format_name IN VARCHAR2,
    format_content_type OUT NUMBER,
    compress_xml IN BINARY_INTEGER: = 0
  ) RETURN CLOB;
  FUNCTION transform_html_to_text(
    document IN XMLTYPE,
    max_linesize IN POSITIVE
  ) RETURN CLOB;
  -------------------------  zlib2base64_report_xml ---------------------------
  FUNCTION zlib2base64_report_xml(report_xml IN xmltype) RETURN XMLTYPE;
  --------------------------  transform_report_xml ---------------------------
  FUNCTION transform_report_xml(
    report_xml IN xmltype,
    zlib2base64 IN binary_integer: = 1
  ) RETURN XMLTYPE;
  -----------------------------  gzip_report_xml ------------------------------
  FUNCTION gzip_report_xml(report IN CLOB) RETURN BLOB;
  -------------------------------- zlib2base64_clob ---------------------------
  FUNCTION zlib2base64_clob(report IN CLOB) RETURN CLOB;
  ------------------------------- setup_report_env ----------------------------
  -- NAME:
  --     setup_report_env
  --
  -- DESCRIPTION:
  --     This function sets canonical values for a few session parameters and
  --     also returns their original values as a record type.
  --
  -- PARAMETERS:
  --
  -- RETURN:
  --     record containing original values of parameters
  ----------------------------------------------------------------------------
  FUNCTION setup_report_env(orig_env IN OUT NOCOPY format_param_values) RETURN BOOLEAN;
  ----------------------------- restore_report_env ----------------------------
  -- NAME:
  --     restore_report_env
  --
  -- DESCRIPTION:
  --     This procedure reverts back the values of some session parameters
  --     based on the input value.
  --
  -- PARAMETERS:
  --      orig_env   (IN)   names and values of session parameters
  --
  -- RETURN:
  --     void
  -----------------------------------------------------------------------------
  PROCEDURE restore_report_env(orig_env IN format_param_values);
  ------------------------------ get_timing_info ------------------------------
  -- NAME:
  --     get_timing_info
  --
  -- DESCRIPTION:
  --     This function allows one to get elapsed and CPU timing information
  --     for a section of PL/SQL code
  --
  -- PARAMETERS:
  --     phase          (IN)      - When called: 0 for start, 1 for end
  --     elapsed_time  (IN/OUT)  - When "phase" is 0, OUT parameter storing
  --                               current timestamp. When "phase" is 1, used
  --                               both as IN/OUT to return elpased time.
  --     cpu_time      (IN/OUT)  - When "phase" is 0, OUT parameter storing
  --                               current cpu time. When "phase" is 1, used
  --                               both as IN/OUT to return cpu time.
  --
  -- DESCRIPTION
  --   Use this procedure to measure the elapsed/cpu time of a region of
  --   code:
  --     get_timing_info(0, elapsed, cpu_time);
  --     ...
  --     get_timing_info(1, elapsed, cpu_time);
  --
  -- RETURN:
  --     None
  --
  ----------------------------------------------------------------------------
  PROCEDURE get_timing_info(
    phase IN BINARY_INTEGER,
    elapsed IN OUT NUMBER,
    cpu IN OUT NUMBER
  );
  ------------------------------ format_message ------------------------------
  -- NAME:
  --     format_message
  --
  -- DESCRIPTION:
  --     This function format an Oracle message, for example an error message.
  --
  -- PARAMETERS:
  --     message_number   (IN)     - message number (or error number)
  --     message_facility (IN)     - message facility
  --     language         (IN)     - nls language to use, null for session one
  --     arg1             (IN)     - argument 1 if any
  --     arg2             (IN)     - argument 2 if any
  --     arg3             (IN)     - argument 3 if any
  --     arg4             (IN)     - argument 4 if any
  --     arg5             (IN)     - argument 5 if any
  --     arg6             (IN)     - argument 6 if any
  --     arg7             (IN)     - argument 7 if any
  --     arg8             (IN)     - argument 8 if any
  --     arg9             (IN)     - argument 9 if any
  --     arg10            (IN)     - argument 10 if any
  --     arg11            (IN)     - argument 11 if any
  --     arg12            (IN)     - argument 12 if any
  --
  --
  -- DESCRIPTION
  --   Get the formatted message for the specified parameters
  --
  -- RETURN:
  --   Formatted message
  --
  ----------------------------------------------------------------------------
  FUNCTION format_message(
    message_number IN PLS_INTEGER,
    message_facility IN VARCHAR2 default 'ora',
    language IN VARCHAR2 default NULL,
    arg1 IN VARCHAR2 default NULL,
    arg2 IN VARCHAR2 default NULL,
    arg3 IN VARCHAR2 default NULL,
    arg4 IN VARCHAR2 default NULL,
    arg5 IN VARCHAR2 default NULL,
    arg6 IN VARCHAR2 default NULL,
    arg7 IN VARCHAR2 default NULL,
    arg8 IN VARCHAR2 default NULL,
    arg9 IN VARCHAR2 default NULL,
    arg10 IN VARCHAR2 default NULL,
    arg11 IN VARCHAR2 default NULL,
    arg12 IN VARCHAR2 default NULL
  ) RETURN VARCHAR2;
  ----------------------- get_imported_report_attrs ---------------------
  --  NAME: get_imported_report_attrs
  --    This is the procedure that will return database
  --    attributes from imported AWR data
  --
  -- PARAMETERS:
  --    p_dbid           (IN)   - target database identifier
  --    p_inst_count     (OUT)  - number of instances in RAC
  --    p_cpu_cores      (OUT)  - number of CPU cores
  --    p_hyperthreaded  (OUT)  - 1 if target database is hyperthreaded
  --    p_con_id         (OUT)  - current container id if CDB
  --    p_con_name       (OUT)  - current container name if CDB
  --    p_is_exa         (OUT)  - 1 if target database is exadata
  --    p_timezone_offset(OUT)  - timezone off UTC,
  --    p_packs          (OUT)  - 2 if target database has diag+tunning
  --                              1 if diag pack only
  --                              0 no management packs installed
  --
  -----------------------------------------------------------------------
  PROCEDURE get_imported_report_attrs (
    p_dbid IN NUMBER,
    p_inst_count OUT NUMBER,
    p_cpu_cores OUT NUMBER,
    p_hyperthreaded OUT NUMBER,
    p_con_id OUT NUMBER,
    p_con_name OUT VARCHAR2,
    p_is_exa OUT NUMBER,
    p_timezone_offset OUT NUMBER,
    p_packs OUT NUMBER
  );
  -- -------------------- i_get_snap_id ---------------------------------
  -- NAME:
  --    i_get_snap_id
  --
  -- DESCRIPTION
  --    finds closest snap_id to specified time
  --
  -- PARAMETERS
  --    p_time (IN) - time for which to find the closest snap_id
  --    p_dbid (IN) - dbid to query n AWR
  -- NOTE:
  --
  -- RETURNS:
  --    snap_id
  -- --------------------------------------------------------------------
  FUNCTION get_snap_id(p_time IN date, p_dbid IN NUMBER) RETURN NUMBER;
  -- ----------------------- get_awr_context ----------------------------
  -- NAME:
  --    get_awr_context
  --
  -- DESCRIPTION
  --    gets up AWR begin/end snapshot for the report
  --
  -- PARAMETERS
  --    p_start_time     (IN) - start time for report
  --    p_end_time       (IN) - end time for report
  --    p_dbid       (IN/OUT) - dbid to query. If null default
  --                            is current dbid
  --    p_begin_snap (IN/OUT) - sets begin snap for report
  --    p_end_snap   (IN/OUT) - sets end snap for report
  -- -------------------------------------------------------------------
  PROCEDURE get_awr_context(
    p_start_time IN DATE,
    p_end_time IN DATE,
    p_dbid IN OUT NUMBER,
    p_begin_snap IN OUT NUMBER,
    p_end_snap IN OUT NUMBER
  );
  end;
