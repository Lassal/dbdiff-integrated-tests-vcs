schema: SYS
name: DBMS_ADDM
routineType: PACKAGE
returnParamater:
  name: REAL_TIME_ADDM_REPORT.(--return--)
  dataType: CLOB
  parameterMode: OUT
  ordinalPosition: 0
parameters:
- name: ANALYZE_DB.TASK_NAME
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 1
- name: ANALYZE_DB.BEGIN_SNAPSHOT
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: ANALYZE_DB.END_SNAPSHOT
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 3
- name: ANALYZE_DB.DB_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 4
- name: ANALYZE_INST.TASK_NAME
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 1
- name: ANALYZE_INST.BEGIN_SNAPSHOT
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: ANALYZE_INST.END_SNAPSHOT
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 3
- name: ANALYZE_INST.INSTANCE_NUMBER
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 4
- name: ANALYZE_INST.DB_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 5
- name: ANALYZE_PARTIAL.TASK_NAME
  dataType: VARCHAR2
  parameterMode: INOUT
  ordinalPosition: 1
- name: ANALYZE_PARTIAL.INSTANCE_NUMBERS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: ANALYZE_PARTIAL.BEGIN_SNAPSHOT
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 3
- name: ANALYZE_PARTIAL.END_SNAPSHOT
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 4
- name: ANALYZE_PARTIAL.DB_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 5
- name: COMPARE_CAPTURE_REPLAY_REPORT.REPLAY_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 1
- name: COMPARE_CAPTURE_REPLAY_REPORT.REPORT_TYPE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: COMPARE_DATABASES.BASE_DBID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 1
- name: COMPARE_DATABASES.BASE_BEGIN_SNAP_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: COMPARE_DATABASES.BASE_END_SNAP_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 3
- name: COMPARE_DATABASES.COMP_DBID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 4
- name: COMPARE_DATABASES.COMP_BEGIN_SNAP_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 5
- name: COMPARE_DATABASES.COMP_END_SNAP_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 6
- name: COMPARE_DATABASES.REPORT_TYPE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 7
- name: COMPARE_INSTANCES.BASE_DBID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 1
- name: COMPARE_INSTANCES.BASE_INSTANCE_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: COMPARE_INSTANCES.BASE_BEGIN_SNAP_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 3
- name: COMPARE_INSTANCES.BASE_END_SNAP_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 4
- name: COMPARE_INSTANCES.COMP_DBID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 5
- name: COMPARE_INSTANCES.COMP_INSTANCE_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 6
- name: COMPARE_INSTANCES.COMP_BEGIN_SNAP_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 7
- name: COMPARE_INSTANCES.COMP_END_SNAP_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 8
- name: COMPARE_INSTANCES.REPORT_TYPE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 9
- name: COMPARE_REPLAY_REPLAY_REPORT.REPLAY_ID1
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 1
- name: COMPARE_REPLAY_REPLAY_REPORT.REPLAY_ID2
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: COMPARE_REPLAY_REPLAY_REPORT.REPORT_TYPE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: DELETE.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: DELETE_FINDING_DIRECTIVE.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: DELETE_FINDING_DIRECTIVE.DIR_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: DELETE_PARAMETER_DIRECTIVE.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: DELETE_PARAMETER_DIRECTIVE.DIR_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: DELETE_SEGMENT_DIRECTIVE.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: DELETE_SEGMENT_DIRECTIVE.DIR_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: DELETE_SQL_DIRECTIVE.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: DELETE_SQL_DIRECTIVE.DIR_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: GET_ASH_QUERY.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: GET_ASH_QUERY.FINDING_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: GET_REPORT.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: INSERT_FINDING_DIRECTIVE.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: INSERT_FINDING_DIRECTIVE.DIR_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: INSERT_FINDING_DIRECTIVE.FINDING_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: INSERT_FINDING_DIRECTIVE.MIN_ACTIVE_SESSIONS
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 4
- name: INSERT_FINDING_DIRECTIVE.MIN_PERC_IMPACT
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 5
- name: INSERT_PARAMETER_DIRECTIVE.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: INSERT_PARAMETER_DIRECTIVE.DIR_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: INSERT_PARAMETER_DIRECTIVE.PARAMETER_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: INSERT_SEGMENT_DIRECTIVE(1).TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: INSERT_SEGMENT_DIRECTIVE(1).DIR_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: INSERT_SEGMENT_DIRECTIVE(1).OWNER_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: INSERT_SEGMENT_DIRECTIVE(1).OBJECT_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: INSERT_SEGMENT_DIRECTIVE(1).SUB_OBJECT_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 5
- name: INSERT_SEGMENT_DIRECTIVE(2).TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: INSERT_SEGMENT_DIRECTIVE(2).DIR_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: INSERT_SEGMENT_DIRECTIVE(2).OBJECT_NUMBER
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 3
- name: INSERT_SQL_DIRECTIVE.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: INSERT_SQL_DIRECTIVE.DIR_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: INSERT_SQL_DIRECTIVE.SQL_ID
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: INSERT_SQL_DIRECTIVE.MIN_ACTIVE_SESSIONS
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 4
- name: INSERT_SQL_DIRECTIVE.MIN_RESPONSE_TIME
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 5
routineDefinition: |-
  PACKAGE dbms_addm authid current_user IS --    PROCEDURE DBMS_ADDM.analyze_db
  --    PURPOSE: Create and execute an ADDM task to analyze all instances
  --             of a database for a rango of snapshots.
  --    PARAMETERS:
  --         TASK_NAME
  --            An optional task name.  Task names must be unique to the user.
  --            If not specified, a name will be generated by the system.
  --         BEGIN_SNAPSHOT
  --            The snapshot id for the beginning of the analysis period
  --         END_SNAPSHOT
  --            The snapshot id for the end of the analysis period
  --         DB_ID
  --            The databse to analyze, defaults to current database.
  procedure analyze_db (
    task_name in out varchar2,
    begin_snapshot in number,
    end_snapshot in number,
    db_id in number: = NULL
  );
  --    PROCEDURE DBMS_ADDM.analyze_inst
  --    PURPOSE: Create and execute an ADDM task to analyze a specific instance
  --             of a database for a rango of snapshots.
  --    PARAMETERS:
  --         TASK_NAME
  --            An optional task name.  Task names must be unique to the user.
  --            If not specified, a name will be generated by the system.
  --         BEGIN_SNAPSHOT
  --            The snapshot id for the beginning of the analysis period
  --         END_SNAPSHOT
  --            The snapshot id for the end of the analysis period
  --         INSTANCE_NUMBER
  --            The number of the instance to analyze, defaults to current
  --         DB_ID
  --            The databse to analyze, defaults to current database.
  procedure analyze_inst (
    task_name in out varchar2,
    begin_snapshot in number,
    end_snapshot in number,
    instance_number in number: = NULL,
    db_id in number: = NULL
  );
  --    PROCEDURE DBMS_ADDM.analyze_partial
  --    PURPOSE: Create and execute an ADDM task to analyze a partial list
  --             of instances for a rango of snapshots.
  --    PARAMETERS:
  --         TASK_NAME
  --            An optional task name.  Task names must be unique to the user.
  --            If not specified, a name will be generated by the system.
  --         INSTANCE_NUMBERS
  --            A comma separated list of instance numbers that participate
  --            in the analysis
  --         BEGIN_SNAPSHOT
  --            The snapshot id for the beginning of the analysis period
  --         END_SNAPSHOT
  --            The snapshot id for the end of the analysis period
  --         DB_ID
  --            The databse to analyze, defaults to current database.
  procedure analyze_partial (
    task_name in out varchar2,
    instance_numbers in varchar2,
    begin_snapshot in number,
    end_snapshot in number,
    db_id in number: = NULL
  );
  --    PROCEDURE DBMS_ADDM.insert_finding_directive
  --    PURPOSE:  insert a directive filtering a finding, either for a task or
  --               system wide.
  --    PARAMETERS:
  --         TASK_NAME
  --            An optional task name. If NULL, this is a system directive.
  --         DIR_NAME
  --            A unique name identifying the new directive
  --         FINDING_NAME
  --            A name for the finding, will appear in the "FINDING_NAME"
  --            column of dba_advisor_findings.
  --         MIN_ACTIVE_SESSIONS
  --            Minimal value for active sessions. A finding is filtered out
  --            if it has less active sessions than this value.
  --         MIN_PERC_IMPACT
  --            Minimal value for percentage of impact (0-100). A finding
  --            is filtered out if its impact is less than this percentage of
  --            the database time of the analysis period.
  procedure insert_finding_directive (
    task_name in varchar2,
    dir_name in varchar2,
    finding_name in varchar2,
    min_active_sessions in number: = 0,
    min_perc_impact in number: = 0
  );
  --    PROCEDURE DBMS_ADDM.insert_finding_directive
  --    PURPOSE:  insert a directive filtering sql recommendations,
  --              either for a task or system wide.
  --    PARAMETERS:
  --         TASK_NAME
  --            An optional task name. If NULL, this is a system directive.
  --         DIR_NAME
  --            A unique name identifying the new directive
  --         SQL_ID
  --            A string identifying the SQL (13 characters).
  --         MIN_ACTIVE_SESSIONS
  --            Minimal value for active sessions. Ain action  is filtered out
  --            if the SQL's total db time is less than this value.
  --         MIN_PERC_IMPACT
  --            Minimal value for response time (microseconds).
  --            A SQL action is filtered out if the response time is less than
  --            this value.
  procedure insert_sql_directive (
    task_name in varchar2,
    dir_name in varchar2,
    sql_id in varchar2,
    min_active_sessions in number: = 0,
    min_response_time in number: = 0
  );
  --    PROCEDURE DBMS_ADDM.insert_segment_directive
  --    PURPOSE:  insert a directive filtering recommendations to run segment
  --              advisor.
  --    PARAMETERS:
  --         TASK_NAME
  --            An optional task name. If NULL, this is a system directive.
  --         DIR_NAME
  --            A unique name identifying the new directive
  --         OWNER_NAME
  --            The owner of the segment.
  --         OBJECT_NAME
  --            The name of the main object. If NULL, then all objects for the
  --            specified owner are filtered.
  --         SUB_OBJECT_NAME
  --            The name of a partition of the object. If null, than all
  --            partitions of the object are filtered. Also, if the object is
  --            not partitioned, leave the value as NULL.
  --
  procedure insert_segment_directive (
    task_name in varchar2,
    dir_name in varchar2,
    owner_name in varchar2,
    object_name in varchar2: = NULL,
    sub_object_name in varchar2: = NULL
  );
  --    PROCEDURE DBMS_ADDM.insert_segment_directive
  --    PURPOSE:  insert a directive filtering recommendations to run segment
  --              advisor.
  --    PARAMETERS:
  --         TASK_NAME
  --            An optional task name. If NULL, this is a system directive.
  --         DIR_NAME
  --            A unique name identifying the new directive
  --         OBJECT_NUMBER
  --            The data object number (as appears in OBJ$)
  --
  procedure insert_segment_directive (
    task_name in varchar2,
    dir_name in varchar2,
    object_number in number
  );
  --    PROCEDURE DBMS_ADDM.insert_parameter_directive
  --    PURPOSE:  insert a directive filtering a recommendations to change
  --              a system parameter.
  --    PARAMETERS:
  --         TASK_NAME
  --            An optional task name. If NULL, this is a system directive.
  --         DIR_NAME
  --            A unique name identifying the new directive
  --         PARAMETER_NAME
  --            The name of the system parameter. All actions to change this
  --            parameter are filtered out.
  procedure insert_parameter_directive (
    task_name in varchar2,
    dir_name in varchar2,
    parameter_name in varchar2
  );
  --    PROCEDURE DBMS_ADDM.delete_finding_directive
  --    PURPOSE:  delete an addm directive
  --    PARAMETERS:
  --         TASK_NAME
  --            An optional task name. If NULL, this is a system directive.
  --         DIR_NAME
  --            A unique name identifying the directive
  procedure delete_finding_directive (
    task_name in varchar2,
    dir_name in varchar2
  );
  --    PROCEDURE DBMS_ADDM.delete_sql_directive
  --    PURPOSE:  delete an addm directive
  --    PARAMETERS:
  --         TASK_NAME
  --            An optional task name. If NULL, this is a system directive.
  --         DIR_NAME
  --            A unique name identifying the directive
  procedure delete_sql_directive (
    task_name in varchar2,
    dir_name in varchar2
  );
  --    PROCEDURE DBMS_ADDM.delete_segment_directive
  --    PURPOSE:  delete an addm directive
  --    PARAMETERS:
  --         TASK_NAME
  --            An optional task name. If NULL, this is a system directive.
  --         DIR_NAME
  --            A unique name identifying the directive
  procedure delete_segment_directive (
    task_name in varchar2,
    dir_name in varchar2
  );
  --    PROCEDURE DBMS_ADDM.delete_parameter_directive
  --    PURPOSE:  delete an addm directive
  --    PARAMETERS:
  --         TASK_NAME
  --            An optional task name. If NULL, this is a system directive.
  --         DIR_NAME
  --            A unique name identifying the directive
  procedure delete_parameter_directive (
    task_name in varchar2,
    dir_name in varchar2
  );
  --    PROCEDURE DBMS_ADDM.delete
  --    PURPOSE: delete an ADDM task
  --    PARAMETERS:
  --         TASK_NAME
  --            The name of the task to be deleted.
  procedure
  delete
    (task_name in varchar2);
  --    FUNCTION DBMS_ADDM.get_report
    --    RETURN: a CLOB containing the report.
    --    PURPOSE: get the report of an ADDM task.
    --    PARAMETERS:
    --         TASK_NAME
    --            The name of the task to report on.
    function get_report (task_name in varchar2) return clob;
  --    FUNCTION DBMS_ADDM.get_ash_query
    --    RETURN: a varchar containing an ASH query identifying the rows
    --            in ASH with impact for the finding.
    --    PURPOSE: get a SQL text of an ASH query for a finding
    --    PARAMETERS:
    --         TASK_NAME
    --            The name of the task.
    --         FINDING_ID
    --            The ID of the finding within the task
    function get_ash_query (task_name in varchar2, finding_id in number) return varchar2;
  --    FUNCTION DBMS_ADDM.real_time_addm_report
    --    RETURN: a clob containing a real time addm report for the
    --            past 5 minutes.
    --    PURPOSE: Get Real-Time ADDM report of a system.
    --             Get a full RAC report - assumes SQL over GV$ is possible.
    function real_time_addm_report return clob;
  --    FUNCTION DBMS_ADDM.compare_databases_report
    --    RETURN: a clob containing a compare period addm report comparing the
    --            the performance of a database over two different time periods
    --            or the performance of two different databases over two different
    --            time periods
    --    PURPOSE: Get a compare period addm report for the given two time periods
    --    PARAMETERS:
    --         BASE_DBID
    --            dbid of the base period.Default is NULL in which case
    --            we choose the current dbid.
    --         BASE_BEGIN_SNAP_ID
    --            snapshot id of the beginning of the base period
    --         BASE_END_SNAP_ID
    --            snapshot id of the end of the base period
    --         COMP_DBID
    --            dbid of the comparison period. Default is NULL in
    --            which case we choose the current dbid
    --         COMP_BEGIN_SNAP_ID
    --            snapshot id of the beginning of the comparison period
    --         COMP_END_SNAP_ID
    --            snapshot id of the end of the comparison period
    --         REPORT_TYPE
    --            Output type for the report - XML or HTML.Default is HTML
    function compare_databases (
      base_dbid in number: = NULL,
      base_begin_snap_id in number,
      base_end_snap_id in number,
      comp_dbid in number: = NULL,
      comp_begin_snap_id in number,
      comp_end_snap_id in number,
      report_type in varchar2: = 'HTML'
    ) return clob;
  --    FUNCTION DBMS_ADDM.compare_instances
    --    RETURN: a clob containing a compare period addm report comparing the
    --            the performance of a single instance over two different
    --            time periods or the performance of two different instances
    --            over two different time periods
    --    PURPOSE: Get a compare period addm report for the given two time periods
    --    PARAMETERS:
    --         BASE_DBID
    --            dbid of the base period.Default is NULL in which case
    --            we choose the current dbid.
    --         BASE_INSTANCE_ID
    --            instance id of the base period
    --         BASE_BEGIN_SNAP_ID
    --            snapshot id of the beginning of the base period
    --         BASE_END_SNAP_ID
    --            snapshot id of the end of the base period
    --         COMP_DBID
    --            dbid of the comparison period. Default is NULL in
    --            which case we choose the current dbid
    --         COMP_INSTANCE_ID
    --            instance id of the comparison period
    --         COMP_BEGIN_SNAP_ID
    --            snapshot id of the beginning of the comparison period
    --         COMP_END_SNAP_ID
    --            snapshot id of the end of the comparison period
    --         REPORT_TYPE
    --            Output type for the report - XML or HTML.Default is HTML
    function compare_instances (
      base_dbid in number: = NULL,
      base_instance_id in number,
      base_begin_snap_id in number,
      base_end_snap_id in number,
      comp_dbid in number: = NULL,
      comp_instance_id in number,
      comp_begin_snap_id in number,
      comp_end_snap_id in number,
      report_type in varchar2: = 'HTML'
    ) return clob;
  --    FUNCTION DBMS_ADDM.compare_capture_replay_report
    --    RETURN: a clob containing a compare period addm report comparing the
    --            the performance of a capture to a replay
    --    PURPOSE: Get a compare period addm report
    --    PARAMETERS:
    --         REPLAY_ID
    --            id of the replay to be compared
    --         REPORT_TYPE
    --            Output type for the report - XML or HTML.Default is HTML
    function compare_capture_replay_report(
      replay_id in number,
      report_type in varchar2: = 'HTML'
    ) return clob;
  --    FUNCTION DBMS_ADDM.compare_replay_replay_report
    --    RETURN: a clob containing a compare period addm report comparing the
    --            the performance of a replay to another replay
    --    PURPOSE: Get a compare period addm report
    --    PARAMETERS:
    --         REPLAY_ID1
    --            id of the replay to be compared
    --         REPLAY_ID2
    --            id of the replay to be compared
    --         REPORT_TYPE
    --            Output type for the report - XML or HTML.Default is HTML
    function compare_replay_replay_report(
      replay_id1 in number,
      replay_id2 in number,
      report_type in varchar2: = 'HTML'
    ) return clob;
  END dbms_addm;
