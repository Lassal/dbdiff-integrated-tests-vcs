schema: SYS
name: UTL_CALL_STACK
routineType: PACKAGE
returnParamater:
  name: UNIT_LINE.(--return--)
  dataType: BINARY_INTEGER
  parameterMode: OUT
  ordinalPosition: 0
parameters:
- name: BACKTRACE_LINE.BACKTRACE_DEPTH
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 1
- name: BACKTRACE_UNIT.BACKTRACE_DEPTH
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 1
- name: CONCATENATE_SUBPROGRAM.QUALIFIED_NAME
  dataType: VARRAY
  parameterMode: IN
  ordinalPosition: 1
- name: CURRENT_EDITION.DYNAMIC_DEPTH
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 1
- name: ERROR_MSG.ERROR_DEPTH
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 1
- name: ERROR_NUMBER.ERROR_DEPTH
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 1
- name: LEXICAL_DEPTH.DYNAMIC_DEPTH
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 1
- name: OWNER.DYNAMIC_DEPTH
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 1
- name: SUBPROGRAM.DYNAMIC_DEPTH
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 1
- name: UNIT_LINE.DYNAMIC_DEPTH
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 1
routineDefinition: "PACKAGE utl_call_stack IS\n/*\n\n    Exception: BAD_DEPTH_INDICATOR\n\
  \n\n\n    This exception is raised when a provided depth is out of bounds.\n\n \
  \       - Dynamic and lexical depth are positive integer values.\n\n        - Error\
  \ and backtrace depths are non-negative integer values\n\n        and are zero only\
  \ in the absence of an exception.\n\n\n\n  */\nBAD_DEPTH_INDICATOR\nEXCEPTION;\n\
  pragma EXCEPTION_INIT(BAD_DEPTH_INDICATOR, -64610);\n  /*\n  \n      Type: UNIT_QUALIFIED_NAME\n\
  \  \n  \n  \n      This data structure is a varray whose individual elements are,\
  \ in order,\n  \n      the unit name, any lexical parents of the subprogram, and\
  \ the subprogram\n  \n      name.\n  \n  \n  \n      For example, consider the following\
  \ contrived PL/SQL procedure.\n  \n  \n  \n      > procedure topLevel is\n  \n \
  \     >   function localFunction(...) returns varchar2 is\n  \n      >     function\
  \ innerFunction(...) returns varchar2 is\n  \n      >       begin\n  \n      > \
  \        declare\n  \n      >           localVar pls_integer;\n  \n      >     \
  \    begin\n  \n      >           ... (1)\n  \n      >         end;\n  \n      >\
  \       end;\n  \n      >   begin\n  \n      >     ...\n  \n      >   end;\n  \n\
  \  \n  \n     The unit qualified name at (1) would be\n  \n  \n  \n     >    [\"\
  topLevel\", \"localFunction\", \"innerFunction\"]\n  \n  \n  \n     Note that the\
  \ block enclosing (1) does not figure in the unit qualified\n  \n     name.\n  \n\
  \  \n  \n     If the unit were an anonymous block, the unit name would be \"__anonymous_block\"\
  \n  \n  \n  \n    */\n  TYPE UNIT_QUALIFIED_NAME IS VARRAY(256) OF VARCHAR2(32767);\n\
  \  /*\n  \n      Function: subprogram\n  \n  \n  \n      Returns the unit-qualified\
  \ name of the subprogram at the specified dynamic\n  \n      depth.\n  \n  \n  \n\
  \      Parameters:\n  \n  \n  \n        dynamic_depth - The depth in the call stack.\n\
  \  \n  \n  \n      Returns:\n  \n  \n  \n        The unit-qualified name of the\
  \ subprogram at the specified dynamic depth.\n  \n  \n  \n      Exception:\n  \n\
  \  \n  \n        Raises <BAD_DEPTH_INDICATOR>\n  \n     */\n  FUNCTION subprogram(dynamic_depth\
  \ IN PLS_INTEGER) RETURN UNIT_QUALIFIED_NAME;\n  /*\n  \n      Function: concatenate_subprogram\n\
  \  \n  \n  \n      Convenience function to concatenate a unit-qualified name, a\
  \ varray, into\n  \n      a varchar2 comprising the names in the unit-qualified\
  \ name, separated by\n  \n      dots.\n  \n  \n  \n      Parameters:\n  \n  \n \
  \ \n        qualified_name - A unit-qualified name.\n  \n  \n  \n      Returns:\n\
  \  \n  \n  \n        A string of the form \"UNIT.SUBPROGRAM.SUBPROGRAM...LOCAL_SUBPROGRAM\"\
  .\n  \n  \n  \n     */\n  FUNCTION concatenate_subprogram(qualified_name IN UNIT_QUALIFIED_NAME)\
  \ RETURN VARCHAR2;\n  /*\n  \n      Function: owner\n  \n  \n  \n      Returns the\
  \ owner name of the unit of the subprogram at the specified\n  \n      dynamic depth.\n\
  \  \n  \n  \n      Parameters:\n  \n  \n  \n        dynamic_depth - The depth in\
  \ the call stack.\n  \n  \n  \n      Returns:\n  \n  \n  \n        The owner name\
  \ of the unit of the subprogram at the specified dynamic\n  \n        depth.\n \
  \ \n  \n  \n      Exception:\n  \n  \n  \n        Raises <BAD_DEPTH_INDICATOR>.\n\
  \  \n     */\n  FUNCTION owner(dynamic_depth IN PLS_INTEGER) RETURN VARCHAR2;\n\
  \  /*\n  \n      Function: current_edition\n  \n  \n  \n      Returns the current\
  \ edition name of the unit of the subprogram at the\n  \n      specified dynamic\
  \ depth.\n  \n  \n  \n      Parameters:\n  \n  \n  \n        dynamic_depth - The\
  \ depth in the call stack.\n  \n  \n  \n      Returns:\n  \n  \n  \n        The\
  \ current edition name of the unit of the subprogram at the specified\n  \n    \
  \    dynamic depth.\n  \n  \n  \n      Exception:\n  \n  \n  \n        Raises <BAD_DEPTH_INDICATOR>.\n\
  \  \n     */\n  FUNCTION current_edition(dynamic_depth IN PLS_INTEGER) RETURN VARCHAR2;\n\
  \  /*\n  \n      Function: unit_line\n  \n  \n  \n      Returns the line number\
  \ of the unit of the subprogram at the specified\n  \n      dynamic depth.\n  \n\
  \  \n  \n      Parameters:\n  \n  \n  \n        dynamic_depth - The depth in the\
  \ call stack.\n  \n  \n  \n      Returns:\n  \n  \n  \n        The line number of\
  \ the unit of the subprogram at the specified dynamic\n  \n        depth.\n  \n\
  \  \n  \n      Exception:\n  \n  \n  \n        Raises <BAD_DEPTH_INDICATOR>.\n \
  \ \n     */\n  FUNCTION unit_line(dynamic_depth IN PLS_INTEGER) RETURN PLS_INTEGER;\n\
  \  /*\n  \n      Function: dynamic_depth\n  \n  \n  \n      Returns the number of\
  \ subprograms on the call stack.\n  \n  \n  \n      Parameters:\n  \n  \n  \n  \
  \    Returns:\n  \n  \n  \n        The number of subprograms on the call stack.\n\
  \  \n  \n  \n     */\n  FUNCTION dynamic_depth RETURN PLS_INTEGER;\n  /*\n  \n \
  \     Function: lexical_depth\n  \n  \n  \n      Returns the lexical nesting depth\
  \ of the subprogram at the specified dynamic\n  \n      depth.\n  \n  \n  \n   \
  \   Parameters:\n  \n  \n  \n        dynamic_depth - The depth in the call stack.\n\
  \  \n  \n  \n      Returns:\n  \n  \n  \n        The lexical nesting depth of the\
  \ subprogram at the specified dynamic\n  \n        depth.\n  \n  \n  \n      Exception:\n\
  \  \n  \n  \n        Raises <BAD_DEPTH_INDICATOR>.\n  \n     */\n  FUNCTION lexical_depth(dynamic_depth\
  \ IN PLS_INTEGER) RETURN PLS_INTEGER;\n  /*\n  \n      Function: error_depth\n \
  \ \n  \n  \n      Returns the number of errors on the error stack.\n  \n  \n  \n\
  \      Parameters:\n  \n  \n  \n      Returns:\n  \n  \n  \n        The number of\
  \ errors on the error stack.\n  \n  \n  \n     */\n  FUNCTION error_depth RETURN\
  \ PLS_INTEGER;\n  /*\n  \n      Function: error_number\n  \n  \n  \n      Returns\
  \ the error number of the error at the specified error depth.\n  \n  \n  \n    \
  \  Parameters:\n  \n  \n  \n        error_depth - The depth in the error stack.\n\
  \  \n  \n  \n      Returns:\n  \n  \n  \n        The error number of the error at\
  \ the specified error depth.\n  \n  \n  \n      Exception:\n  \n  \n  \n       \
  \ Raises <BAD_DEPTH_INDICATOR>.\n  \n     */\n  FUNCTION error_number(error_depth\
  \ IN PLS_INTEGER) RETURN PLS_INTEGER;\n  /*\n  \n      Function: error_msg\n  \n\
  \  \n  \n      Returns the error message of the error at the specified error depth.\n\
  \  \n  \n  \n      Parameters:\n  \n  \n  \n        error_depth - The depth in the\
  \ error stack.\n  \n  \n  \n      Returns:\n  \n  \n  \n        The error message\
  \ of the error at the specified error depth.\n  \n  \n  \n      Exception:\n  \n\
  \  \n  \n        Raises <BAD_DEPTH_INDICATOR>.\n  \n     */\n  FUNCTION error_msg(error_depth\
  \ IN PLS_INTEGER) RETURN VARCHAR2;\n  /*\n  \n      Function: backtrace_depth\n\
  \  \n  \n  \n      Returns the number of backtrace items in the backtrace.\n  \n\
  \  \n  \n      Parameters:\n  \n  \n  \n      Returns:\n  \n  \n  \n        The\
  \ number of backtrace items in the backtrace, zero in the absence of\n  \n     \
  \   an exception.\n  \n  \n  \n     */\n  FUNCTION backtrace_depth RETURN PLS_INTEGER;\n\
  \  /*\n  \n      Function: backtrace_unit\n  \n  \n  \n      Returns the name of\
  \ the unit at the specified backtrace depth.\n  \n  \n  \n      Parameters:\n  \n\
  \  \n  \n        backtrace_depth - The depth in the backtrace.\n  \n  \n  \n   \
  \   Returns:\n  \n  \n  \n        The name of the unit at the specified backtrace\
  \ depth.\n  \n  \n  \n      Exception:\n  \n  \n  \n        Raises <BAD_DEPTH_INDICATOR>.\
  \ Note that backtrace_unit(0); always raises\n  \n        this exception.\n  \n\
  \  \n  \n     */\n  FUNCTION backtrace_unit(backtrace_depth IN PLS_INTEGER) RETURN\
  \ VARCHAR2;\n  /*\n  \n      Function: backtrace_line\n  \n  \n  \n      Returns\
  \ the line number of the unit at the specified backtrace depth.\n  \n  \n  \n  \
  \    Parameters:\n  \n  \n  \n        backtrace_depth - The depth in the backtrace.\n\
  \  \n  \n  \n      Returns:\n  \n  \n  \n        The line number of the unit at\
  \ the specified backtrace depth.\n  \n  \n  \n      Exception:\n  \n  \n  \n   \
  \     Raises <BAD_DEPTH_INDICATOR>. Note that backtrace_line(0); always raises\n\
  \  \n        this exception.\n  \n     */\n  FUNCTION backtrace_line(backtrace_depth\
  \ IN PLS_INTEGER) RETURN PLS_INTEGER;\nEND;"
