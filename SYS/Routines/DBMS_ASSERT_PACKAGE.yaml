schema: SYS
name: DBMS_ASSERT
routineType: PACKAGE
returnParamater:
  name: SQL_OBJECT_NAME.(--return--)
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 0
parameters:
- name: ENQUOTE_LITERAL.STR
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: ENQUOTE_NAME.STR
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: ENQUOTE_NAME.CAPITALIZE
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 2
- name: NOOP(1).STR
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: NOOP(2).STR
  dataType: CLOB
  parameterMode: IN
  ordinalPosition: 1
- name: QUALIFIED_SQL_NAME.STR
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: SCHEMA_NAME.STR
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: SIMPLE_SQL_NAME.STR
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: SQL_OBJECT_NAME.STR
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
routineDefinition: |-
  package DBMS_ASSERT AUTHID CURRENT_USER is -- Predefined exceptions
  INVALID_SCHEMA_NAME
  exception;
  pragma EXCEPTION_INIT(INVALID_SCHEMA_NAME, -44001);
  INVALID_OBJECT_NAME
  exception;
  pragma EXCEPTION_INIT(INVALID_OBJECT_NAME, -44002);
  INVALID_SQL_NAME
  exception;
  pragma EXCEPTION_INIT(INVALID_SQL_NAME, -44003);
  INVALID_QUALIFIED_SQL_NAME
  exception;
  pragma EXCEPTION_INIT(INVALID_QUALIFIED_SQL_NAME, -44004);
  --
    -- NOOP.
    --
    -- This function returns the value without any checking.
    --
    function NOOP(
      Str varchar2 CHARACTER
      SET
        ANY_CS
    ) return varchar2 CHARACTER
  SET
    Str % CHARSET;
  function NOOP(
      Str clob CHARACTER
      SET
        ANY_CS
    ) return clob CHARACTER
  SET
    Str % CHARSET;
  --
    -- SIMPLE_SQL_NAME
    --
    -- Verify that the input string is a simple SQL name:
    -- 1. The name must begin with an alphabetic character.
    -- 2. It may contain alphanumeric characters as well as
    --    the characters _, $, and # in the second and subsequent
    --    character positions.
    -- 3. Quoted SQL names are also allowed.
    -- 4. Quoted names must be enclosed in double quotes.
    -- 5. Quoted names allow any characters between the quotes.
    -- 6. Quotes inside the name are represented by two quote
    --    characters in a row, e.g. "a name with "" inside"
    --    is a valid quoted name.
    -- 7. The input parameter may have any number of leading
    --    and/or trailing white space characters.
    --
    -- Note: The length of the name is not checked.
    --
    -- EXCEPTIONS:
    -- ORA-44003: string is not a simple SQL name
    function SIMPLE_SQL_NAME(
      Str varchar2 CHARACTER
      SET
        ANY_CS
    ) return varchar2 CHARACTER
  SET
    Str % CHARSET;
  --
    -- QUALIFIED_SQL_NAME
    --
    -- Verify that the input string is a qualified SQL name.
    -- A qualified SQL name <qualified name> can be expressed by the
    -- following grammar:
    --
    -- <local qualified name> ::= <simple name> {'.' <simple name>}
    -- <database link name> ::= <local qualified name> ['@' <connection string>]
    -- <connection string> ::= <simple name>
    -- <qualified name> ::= <local qualified name> ['@' <database link name>]
    --
    -- EXCEPTIONS:
    -- ORA-44004: string is not a qualified SQL name
    function QUALIFIED_SQL_NAME(
      Str varchar2 CHARACTER
      SET
        ANY_CS
    ) return varchar2 CHARACTER
  SET
    Str % CHARSET;
  --
    -- SCHEMA_NAME
    --
    -- This function verifies that the input string is an existing
    -- schema name.
    -- Note:
    -- Please be aware that by definition, a schema name need not
    -- be just a simple sql name. For example, "FIRST LAST" is a valid
    -- schema name. As a consequence, care must be taken to quote the
    -- output of schema name before concatenating it with SQL text.
    --
    -- EXCEPTIONS:
    -- ORA-44001: Invalid schema name
    function SCHEMA_NAME(
      Str varchar2 CHARACTER
      SET
        ANY_CS
    ) return varchar2 CHARACTER
  SET
    Str % CHARSET;
  --
    -- SQL_OBJECT_NAME
    --
    -- This function verifies that the input parameter string
    -- is a qualified SQL identifier of an existing SQL object.
    --
    -- EXCEPTIONS:
    -- ORA-44002: Invalid object name
    function SQL_OBJECT_NAME(
      Str varchar2 CHARACTER
      SET
        ANY_CS
    ) return varchar2 CHARACTER
  SET
    Str % CHARSET;
  --
    -- ENQUOTE_NAME
    --
    -- This function encloses a name in double quotes.  No additional
    -- quotes are added if the name was already in quotes. Verify that
    -- the resulting quoted identifier is a legal quoted identifier
    -- as defined by SQL.
    -- Str        (IN) - string to enquote
    -- capitalize (IN) - if true or defaulted, alphabetic characters of
    --                   Str which were not in quotes are translated to
    --                   upper case.
    function ENQUOTE_NAME(Str varchar2, capitalize boolean default TRUE) return varchar2;
  --
    -- ENQUOTE_LITERAL
    --
    -- Enquote a string literal.  Add leading and trailing single quotes
    -- to a string literal.  Verify that all single quotes except leading
    -- and trailing characters are paired with adjacent single quotes.
    function ENQUOTE_LITERAL(Str varchar2) return varchar2;
  end DBMS_ASSERT;
