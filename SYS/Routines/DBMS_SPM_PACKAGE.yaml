schema: SYS
name: DBMS_SPM
routineType: PACKAGE
returnParamater:
  name: UNPACK_STGTAB_BASELINE.(--return--)
  dataType: NUMBER
  parameterMode: OUT
  ordinalPosition: 0
parameters:
- name: ACCEPT_SQL_PLAN_BASELINE.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: ACCEPT_SQL_PLAN_BASELINE.OBJECT_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: ACCEPT_SQL_PLAN_BASELINE.TASK_OWNER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: ACCEPT_SQL_PLAN_BASELINE.FORCE
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 4
- name: ALTER_SQL_PLAN_BASELINE.SQL_HANDLE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: ALTER_SQL_PLAN_BASELINE.PLAN_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: ALTER_SQL_PLAN_BASELINE.ATTRIBUTE_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: ALTER_SQL_PLAN_BASELINE.ATTRIBUTE_VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: CANCEL_EVOLVE_TASK.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CONFIGURE.PARAMETER_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CONFIGURE.PARAMETER_VALUE
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: CREATE_EVOLVE_TASK(1).SQL_HANDLE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CREATE_EVOLVE_TASK(1).PLAN_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: CREATE_EVOLVE_TASK(1).TIME_LIMIT
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 3
- name: CREATE_EVOLVE_TASK(1).TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: CREATE_EVOLVE_TASK(1).DESCRIPTION
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 5
- name: CREATE_EVOLVE_TASK(2).PLAN_LIST
  dataType: TABLE
  parameterMode: IN
  ordinalPosition: 1
- name: CREATE_EVOLVE_TASK(2).TIME_LIMIT
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: CREATE_EVOLVE_TASK(2).TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CREATE_EVOLVE_TASK(2).DESCRIPTION
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: CREATE_STGTAB_BASELINE.TABLE_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CREATE_STGTAB_BASELINE.TABLE_OWNER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: CREATE_STGTAB_BASELINE.TABLESPACE_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: DROP_EVOLVE_TASK.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: DROP_SQL_PLAN_BASELINE.SQL_HANDLE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: DROP_SQL_PLAN_BASELINE.PLAN_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: EVOLVE_SQL_PLAN_BASELINE(1).SQL_HANDLE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: EVOLVE_SQL_PLAN_BASELINE(1).PLAN_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: EVOLVE_SQL_PLAN_BASELINE(1).TIME_LIMIT
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 3
- name: EVOLVE_SQL_PLAN_BASELINE(1).VERIFY
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: EVOLVE_SQL_PLAN_BASELINE(1).COMMIT
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 5
- name: EVOLVE_SQL_PLAN_BASELINE(2).PLAN_LIST
  dataType: TABLE
  parameterMode: IN
  ordinalPosition: 1
- name: EVOLVE_SQL_PLAN_BASELINE(2).TIME_LIMIT
  dataType: NUMBER
  numericPrecision: 38
  parameterMode: IN
  ordinalPosition: 2
- name: EVOLVE_SQL_PLAN_BASELINE(2).VERIFY
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: EVOLVE_SQL_PLAN_BASELINE(2).COMMIT
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: EXECUTE_EVOLVE_TASK.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: EXECUTE_EVOLVE_TASK.EXECUTION_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: EXECUTE_EVOLVE_TASK.EXECUTION_DESC
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: IMPLEMENT_EVOLVE_TASK.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: IMPLEMENT_EVOLVE_TASK.TASK_OWNER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: IMPLEMENT_EVOLVE_TASK.EXECUTION_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: IMPLEMENT_EVOLVE_TASK.FORCE
  dataType: PL/SQL BOOLEAN
  parameterMode: IN
  ordinalPosition: 4
- name: INTERRUPT_EVOLVE_TASK.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: LOAD_PLANS_FROM_CURSOR_CACHE(1).ATTRIBUTE_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: LOAD_PLANS_FROM_CURSOR_CACHE(1).ATTRIBUTE_VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: LOAD_PLANS_FROM_CURSOR_CACHE(1).FIXED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: LOAD_PLANS_FROM_CURSOR_CACHE(1).ENABLED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: LOAD_PLANS_FROM_CURSOR_CACHE(2).SQL_ID
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: LOAD_PLANS_FROM_CURSOR_CACHE(2).PLAN_HASH_VALUE
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: LOAD_PLANS_FROM_CURSOR_CACHE(2).FIXED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: LOAD_PLANS_FROM_CURSOR_CACHE(2).ENABLED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: LOAD_PLANS_FROM_CURSOR_CACHE(3).SQL_ID
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: LOAD_PLANS_FROM_CURSOR_CACHE(3).PLAN_HASH_VALUE
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: LOAD_PLANS_FROM_CURSOR_CACHE(3).SQL_TEXT
  dataType: CLOB
  parameterMode: IN
  ordinalPosition: 3
- name: LOAD_PLANS_FROM_CURSOR_CACHE(3).FIXED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: LOAD_PLANS_FROM_CURSOR_CACHE(3).ENABLED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 5
- name: LOAD_PLANS_FROM_CURSOR_CACHE(4).SQL_ID
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: LOAD_PLANS_FROM_CURSOR_CACHE(4).PLAN_HASH_VALUE
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 2
- name: LOAD_PLANS_FROM_CURSOR_CACHE(4).SQL_HANDLE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: LOAD_PLANS_FROM_CURSOR_CACHE(4).FIXED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: LOAD_PLANS_FROM_CURSOR_CACHE(4).ENABLED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 5
- name: LOAD_PLANS_FROM_SQLSET.SQLSET_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: LOAD_PLANS_FROM_SQLSET.SQLSET_OWNER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: LOAD_PLANS_FROM_SQLSET.BASIC_FILTER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: LOAD_PLANS_FROM_SQLSET.FIXED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: LOAD_PLANS_FROM_SQLSET.ENABLED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 5
- name: LOAD_PLANS_FROM_SQLSET.COMMIT_ROWS
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 6
- name: MIGRATE_STORED_OUTLINE(1).ATTRIBUTE_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: MIGRATE_STORED_OUTLINE(1).ATTRIBUTE_VALUE
  dataType: CLOB
  parameterMode: IN
  ordinalPosition: 2
- name: MIGRATE_STORED_OUTLINE(1).FIXED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: MIGRATE_STORED_OUTLINE(2).OUTLN_LIST
  dataType: TABLE
  parameterMode: IN
  ordinalPosition: 1
- name: MIGRATE_STORED_OUTLINE(2).FIXED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: PACK_STGTAB_BASELINE.TABLE_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: PACK_STGTAB_BASELINE.TABLE_OWNER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: PACK_STGTAB_BASELINE.SQL_HANDLE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: PACK_STGTAB_BASELINE.PLAN_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: PACK_STGTAB_BASELINE.SQL_TEXT
  dataType: CLOB
  parameterMode: IN
  ordinalPosition: 5
- name: PACK_STGTAB_BASELINE.CREATOR
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 6
- name: PACK_STGTAB_BASELINE.ORIGIN
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 7
- name: PACK_STGTAB_BASELINE.ENABLED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 8
- name: PACK_STGTAB_BASELINE.ACCEPTED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 9
- name: PACK_STGTAB_BASELINE.FIXED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 10
- name: PACK_STGTAB_BASELINE.MODULE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 11
- name: PACK_STGTAB_BASELINE.ACTION
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 12
- name: REPORT_AUTO_EVOLVE_TASK.TYPE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: REPORT_AUTO_EVOLVE_TASK.LEVEL
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: REPORT_AUTO_EVOLVE_TASK.SECTION
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: REPORT_AUTO_EVOLVE_TASK.OBJECT_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 4
- name: REPORT_AUTO_EVOLVE_TASK.EXECUTION_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 5
- name: REPORT_EVOLVE_TASK.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: REPORT_EVOLVE_TASK.TYPE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: REPORT_EVOLVE_TASK.LEVEL
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: REPORT_EVOLVE_TASK.SECTION
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: REPORT_EVOLVE_TASK.OBJECT_ID
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 5
- name: REPORT_EVOLVE_TASK.TASK_OWNER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 6
- name: REPORT_EVOLVE_TASK.EXECUTION_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 7
- name: RESET_EVOLVE_TASK.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: RESUME_EVOLVE_TASK.TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: SET_EVOLVE_TASK_PARAMETER(1).TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: SET_EVOLVE_TASK_PARAMETER(1).PARAMETER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: SET_EVOLVE_TASK_PARAMETER(1).VALUE
  dataType: NUMBER
  parameterMode: IN
  ordinalPosition: 3
- name: SET_EVOLVE_TASK_PARAMETER(2).TASK_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: SET_EVOLVE_TASK_PARAMETER(2).PARAMETER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: SET_EVOLVE_TASK_PARAMETER(2).VALUE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: UNPACK_STGTAB_BASELINE.TABLE_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: UNPACK_STGTAB_BASELINE.TABLE_OWNER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: UNPACK_STGTAB_BASELINE.SQL_HANDLE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: UNPACK_STGTAB_BASELINE.PLAN_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: UNPACK_STGTAB_BASELINE.SQL_TEXT
  dataType: CLOB
  parameterMode: IN
  ordinalPosition: 5
- name: UNPACK_STGTAB_BASELINE.CREATOR
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 6
- name: UNPACK_STGTAB_BASELINE.ORIGIN
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 7
- name: UNPACK_STGTAB_BASELINE.ENABLED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 8
- name: UNPACK_STGTAB_BASELINE.ACCEPTED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 9
- name: UNPACK_STGTAB_BASELINE.FIXED
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 10
- name: UNPACK_STGTAB_BASELINE.MODULE
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 11
- name: UNPACK_STGTAB_BASELINE.ACTION
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 12
routineDefinition: |-
  PACKAGE dbms_spm AUTHID CURRENT_USER AS -- -------------------------------------------------------------------------
  -- DBMS_SPM CONSTANTS SECTION
  -- -------------------------------------------------------------------------
  --
  -- Special values for time_limit parameter of evolve_sql_plan_baseline().
  --
  NO_LIMIT CONSTANT INTEGER: = 2147483647;
  AUTO_LIMIT CONSTANT INTEGER: = 2147483647 - 1;
  --
  -- List of names as an input parameter to evolve_sql_plan_baseline().
  --
  TYPE name_list IS TABLE OF VARCHAR2(30);
  -- -------------------------------------------------------------------------
  -- DBMS_SPM PUBLIC FUNCTIONS/PROCEDURES
  -- -------------------------------------------------------------------------
  -- -------------------------------------------------------------------------
  -- NAME:
  --   configure
  --
  -- DESCRIPTION:
  --   Set configuration options for the SQL Management Base (SMB) as well as
  --   the maintenance of SQL plan baselines.
  --
  -- PARAMETERS:
  --   parameter_name  - One of the following possible values:
  --                     'SPACE_BUDGET_PERCENT',
  --                     'PLAN_RETENTION_WEEKS'.
  --   parameter_value - One of the following possible values:
  --                     NULL, or a value within the range 1..50 when
  --                       parameter_name = 'SPACE_BUDGET_PERCENT'.
  --                     NULL, or value within the range 5..523 when
  --                       parameter_name = 'PLAN_RETENTION_WEEKS'.
  --
  -- NOTES:
  --   When parameter_value is NULL, the system default value is used.
  --   The default space budget for SMB is 10%, which means no more than 10%
  --   of SYSAUX tablespace is supposed to be used to store sql management
  --   objects (i.e. plan baselines, sql profiles, etc.). When the space usage
  --   exceeds the allowable percentage then alerts are generated.
  --   The default unused plan retention period is one year and one week,
  --   which means a plan will be automatically purged once it has been left
  --   unused for little over a year.
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  -- -------------------------------------------------------------------------
  PROCEDURE configure(
    parameter_name IN VARCHAR2,
    parameter_value IN NUMBER: = NULL
  );
  -- -------------------------------------------------------------------------
  -- NAME:
  --   load_plans_from_sqlset
  --
  -- DESCRIPTION:
  --   Load plans from SQL tuning set as SQL plan baselines.
  --   This function can be used to seed the SQL Management Base (SMB) with
  --   SQL plan baselines created for a set of SQL statements using the plans
  --   that are loaded from a SQL tuning set (STS).
  --   To load plans from a remote system, the user has to first create an STS
  --   with plan information on remote system, export/import the STS from
  --   remote to local system, and then use this function.
  --   To load plans from Automatic Workload Repository (AWR), the user has to
  --   first create an STS using plan information stored in AWR snapshots, and
  --   then use this function.
  --   Upgrade to 11g is an interesting use case of this function. The user
  --   can capture pre-upgrade plans for a set of SQL statements into an STS,
  --   and then use this function to load the plans into SQL plan baselines.
  --
  -- PARAMETERS:
  --   sqlset_name    - Name of the STS from where to load the plans from.
  --   sqlset_owner   - Owner of STS. NULL means current schema is the owner.
  --   basic_filter   - A textual representation of a filter expression to be
  --                    applied to select only the qualifying plans from STS.
  --                    NULL means all plans in STS are selected.
  --   fixed          - Default 'NO' means the loaded plans will not change
  --                    the current 'fixed' property of the SQL plan baseline
  --                    into which they are loaded.
  --   enabled        - Default 'YES' means the loaded plans will be
  --                    considered by the optimizer.
  --   commit_rows    - Number of SQL plans to load before doing a periodic
  --                    commit. This helps to shorten the undo log.
  --
  -- RETURN:
  --   Number of plans loaded.
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  -- -------------------------------------------------------------------------
  FUNCTION load_plans_from_sqlset(
    sqlset_name IN VARCHAR2,
    sqlset_owner IN VARCHAR2: = NULL,
    basic_filter IN VARCHAR2: = NULL,
    fixed IN VARCHAR2: = 'NO',
    enabled IN VARCHAR2: = 'YES',
    commit_rows IN NUMBER: = 1000
  ) RETURN PLS_INTEGER;
  -- -------------------------------------------------------------------------
  -- NAME:
  --   load_plans_from_cursor_cache (multiple statements form)
  --
  -- DESCRIPTION:
  --   Load plans from cursor cache as SQL plan baselines.
  --   This function can be used to load one or more plans present in the
  --   cursor cache for one or more SQL statements based on a plan selection
  --   criterion represented by argument pair attribute_name/attribute_value.
  --   The plans are selected from cursor cache based on the values specified
  --   for attribute_name and attribute_value.
  --
  -- PARAMETERS:
  --   attribute_name   - One of the following possible attribute names:
  --                      'SQL_TEXT',
  --                      'PARSING_SCHEMA_NAME',
  --                      'MODULE',
  --                      'ACTION'
  --   attribute_value  - The attribute value is used as a search pattern of
  --                      LIKE predicate if attribute name is 'SQL_TEXT'.
  --                      Otherwise, it is used as an equality search value.
  --                        (e.g. specifying attribute_name=>'SQL_TEXT', and
  --                        attribute_value=>'% HR-123 %' means applying
  --                        SQL_TEXT LIKE '% HR-123 %' as a selection filter.
  --                        Similarly, specifying attribute_name=>'MODULE',
  --                        and attribute_value=>'HR' means applying
  --                        MODULE = 'HR' as a plan selection filter).
  --                      The attribute value is upper-cased except when it
  --                      is enclosed in double quotes or attribute name is
  --                      'SQL_TEXT'.
  --   fixed            - Default 'NO' means the loaded plans will not change
  --                      the current 'fixed' property of SQL plan baseline
  --                      into which they are loaded.
  --   enabled          - Default 'YES' means the loaded plans will be
  --                      considered by the optimizer.
  --
  -- RETURN:
  --   Number of plans loaded.
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  -- --------------------------------------------------------------------------
  FUNCTION load_plans_from_cursor_cache(
    attribute_name IN VARCHAR2,
    attribute_value IN VARCHAR2,
    fixed IN VARCHAR2: = 'NO',
    enabled IN VARCHAR2: = 'YES'
  ) RETURN PLS_INTEGER;
  -- -------------------------------------------------------------------------
  -- NAME:
  --   load_plans_from_cursor_cache (single statement form)
  --
  -- DESCRIPTION:
  --   Load plans from cursor cache as SQL plan baselines.
  --   This function can be used to load one or more plans present in the
  --   cursor cache for a single SQL statement.
  --
  -- PARAMETERS:
  --   sql_id           - SQL statement identifier, which is used to identify
  --                      the plans in the cursor cache, and the SQL signature
  --                      associated to it is used to identify the SQL plan
  --                      baseline into which the plans are loaded. If the
  --                      SQL plan baseline doesn't exist it is created.
  --   plan_hash_value  - Plan identifier. Default NULL means load all plans
  --                      present in the cursor cache for given SQL statement.
  --   fixed            - Default 'NO' means the loaded plans will not change
  --                      the current 'fixed' property of SQL plan baseline
  --                      into which they are loaded.
  --   enabled          - Default 'YES' means the loaded plans will be
  --                      considered by the optimizer.
  --
  -- RETURN:
  --   Number of plans loaded.
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  -- --------------------------------------------------------------------------
  FUNCTION load_plans_from_cursor_cache(
    sql_id IN VARCHAR2,
    plan_hash_value IN NUMBER: = NULL,
    fixed IN VARCHAR2: = 'NO',
    enabled IN VARCHAR2: = 'YES'
  ) RETURN PLS_INTEGER;
  -- -------------------------------------------------------------------------
  -- NAME:
  --   load_plans_from_cursor_cache (single statement, sql text form)
  --
  -- DESCRIPTION:
  --   Load plans from cursor cache as SQL plan baselines.
  --   This function can be used to load one or more plans present in the
  --   cursor cache for a single SQL statement.
  --
  -- PARAMETERS:
  --   sql_id           - SQL statement identifier, which is used to identify
  --                      the plans in the cursor cache.
  --   plan_hash_value  - Plan identifier. Default NULL means load all plans
  --                      present in the cursor cache for given SQL statement.
  --   sql_text         - SQL text to use in identifying the SQL plan baseline
  --                      into which the plans are loaded. If the SQL plan
  --                      baseline does not exist, it is created. The use of
  --                      SQL text is crucial when the user tunes a statement
  --                      possibly by adding hints to it and then wants to load
  --                      the resulting plan(s) into SQL plan baseline of the
  --                      original SQL statement.
  --   fixed            - Default 'NO' means the loaded plans will not change
  --                      the current 'fixed' property of SQL plan baseline
  --                      into which they are loaded.
  --   enabled          - Default 'YES' means the loaded plans will be
  --                      considered by the optimizer.
  --
  -- RETURN:
  --   Number of plans loaded.
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  -- --------------------------------------------------------------------------
  FUNCTION load_plans_from_cursor_cache(
    sql_id IN VARCHAR2,
    plan_hash_value IN NUMBER: = NULL,
    sql_text IN CLOB,
    fixed IN VARCHAR2: = 'NO',
    enabled IN VARCHAR2: = 'YES'
  ) RETURN PLS_INTEGER;
  -- -------------------------------------------------------------------------
  -- NAME:
  --   load_plans_from_cursor_cache (single statement, sql handle form)
  --
  -- DESCRIPTION:
  --   Load plans from cursor cache as SQL plan baselines.
  --   This function can be used to load one or more plans present in the
  --   cursor cache for a single SQL statement.
  --
  -- PARAMETERS:
  --   sql_id           - SQL statement identifier, which is used to identify
  --                      the plans in the cursor cache.
  --   plan_hash_value  - Plan identifier. Default NULL means load all plans
  --                      present in the cursor cache for given SQL statement.
  --   sql_handle       - SQL handle to use in identifying the plan baseline
  --                      into which the plans are loaded. The sql handle must
  --                      denote an existing SQL plan baseline. The use of sql
  --                      handle is crucial when the user tunes a SQL statement
  --                      possibly by adding hints to it and then wants to load
  --                      the resulting plan(s) into the SQL plan baseline of
  --                      original SQL statement.
  --   fixed            - Default 'NO' means the loaded plans will not change
  --                      the current 'fixed' property of SQL plan baseline
  --                      into which they are loaded.
  --   enabled          - Default 'YES' means the loaded plans will be
  --                      considered by the optimizer.
  --
  -- RETURN:
  --   Number of plans loaded.
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  -- --------------------------------------------------------------------------
  FUNCTION load_plans_from_cursor_cache(
    sql_id IN VARCHAR2,
    plan_hash_value IN NUMBER: = NULL,
    sql_handle IN VARCHAR2,
    fixed IN VARCHAR2: = 'NO',
    enabled IN VARCHAR2: = 'YES'
  ) RETURN PLS_INTEGER;
  -- -------------------------------------------------------------------------
  -- NAME:
  --   alter_sql_plan_baseline
  --
  -- DESCRIPTION:
  --   This function can be used to change the status/name/description of a
  --   single plan, or status/description of all plans of a SQL statement
  --   using the attribute name/value format. The function can be called
  --   numerous times, each time altering a different attribute of same plan
  --   or different plans of a sql statement.
  --
  -- PARAMETERS:
  --   sql_handle       - SQL statement handle. It identifies plans associated
  --                      with a SQL statement that are to be altered. If NULL
  --                      then plan name must be specified.
  --   plan_name        - Unique plan name. It identifies a specific plan.
  --                      Default NULL means alter all plans associated with
  --                      the SQL statement identified by sql_handle. If NULL
  --                      then sql handle must be specified.
  --   attribute_name   - One of the following possible attribute names:
  --                      'ENABLED',
  --                      'FIXED',
  --                      'AUTOPURGE',
  --                      'PLAN_NAME',
  --                      'DESCRIPTION'
  --   attribute_value  - If the attribute name denotes a plan status then
  --                      the legal values are: 'YES', 'NO'.
  --                      If the attribute name denotes a plan name then the
  --                      supplied value should not conflict with already
  --                      stored plan name.
  --                      If the attribute name denotes plan description then
  --                      any character string is allowed.
  --
  -- RETURN:
  --   Number of plans altered.
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  -- -------------------------------------------------------------------------
  FUNCTION alter_sql_plan_baseline(
    sql_handle IN VARCHAR2: = NULL,
    plan_name IN VARCHAR2: = NULL,
    attribute_name IN VARCHAR2,
    attribute_value IN VARCHAR2
  ) RETURN PLS_INTEGER;
  -- -------------------------------------------------------------------------
  -- NAME:
  --   drop_sql_plan_baseline
  --
  -- DESCRIPTION:
  --   This function can be used to drop a single plan, or all plans of a
  --   SQL statement.
  --
  -- PARAMETERS:
  --   sql_handle       - SQL statement handle. It identifies plans associated
  --                      with a SQL statement that are to be dropped. If NULL
  --                      then plan_name must be specified.
  --   plan_name        - Unique plan name. It identifies a specific plan.
  --                      Default NULL means drop all plans associated with
  --                      the SQL statement identified by sql_handle. If NULL
  --                      then sql handle must be specified.
  --
  -- RETURN:
  --   Number of plans dropped.
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  -- -------------------------------------------------------------------------
  FUNCTION drop_sql_plan_baseline(
    sql_handle IN VARCHAR2: = NULL,
    plan_name IN VARCHAR2: = NULL
  ) RETURN PLS_INTEGER;
  -- -------------------------------------------------------------------------
  -- NAME:
  --   evolve_sql_plan_baseline
  --
  -- DESCRIPTION:
  --   This function can be used to evolve SQL plan baselines associated with
  --   one or more SQL statements. A SQL plan baseline is evolved when one or
  --   more of its non-accepted plans are changed to accepted plans. If asked
  --   by the user (i.e. parameter verify = 'YES'), the execution performance
  --   of each non-accepted plan is compared against the performance of a plan
  --   chosen from the associated SQL plan baseline. If the non-accepted plan
  --   performance is found to be better than SQL plan baseline performance
  --   then non-accepted plan is changed to an accepted plan, provided such
  --   action is permitted by the user (i.e. parameter commit = 'YES').
  --
  -- PARAMETERS:
  --   sql_handle     - SQL statement identifier. Unless plan_name specified,
  --                    NULL means consider all statements with non-accepted
  --                    plans in their SQL plan baselines.
  --   plan_name      - Plan identifier. Default NULL means consider all non-
  --                    accepted plans in the SQL plan baseline of either the
  --                    identified SQL statement or all SQL statements if
  --                    sql_handle is NULL.
  --   time_limit     - Time limit in number of minutes. This applies only if
  --                    verify = 'YES' (see next parameter). The time limit
  --                    is global and it is used in the following manner. The
  --                    time limit for first non-accepted plan verification
  --                    is set equal to the input value. The time limit for
  --                    second non-accepted plan verification is set equal to
  --                    (input value - time spent in first plan verification)
  --                    and so on. The default DBMS_SPM.AUTO_LIMIT means let
  --                    the system choose an appropriate time limit based on
  --                    the number of plan verifications required to be done.
  --                    The value DBMS_SPM.NO_LIMIT means no time limit.
  --                    A positive integer value represents a user specified
  --                    time limit.
  --   verify         - Whether to actually execute the plans and compare the
  --                    performance before changing non-accepted plans into
  --                    accepted plans. A performance verification involves
  --                    executing a non-accepted plan and a plan chosen from
  --                    corresponding SQL plan baseline and comparing their
  --                    performance statistics. If non-accepted plan shows
  --                    performance improvement, it is changed to an accepted
  --                    plan. Default 'YES' means verify that a non-accepted
  --                    plan gives better performance before changing it to
  --                    an accepted plan. And 'NO' means do not execute plans
  --                    but simply change non-accepted plans into accepted
  --                    plans.
  --   commit         - Whether to update the ACCEPTED status of non-accepted
  --                    plans from 'NO' to 'YES'. Default 'YES' means perform
  --                    updates of qualifying non-accepted plans and generate
  --                    a report that shows the updates and the result of
  --                    performance verification when verify = 'YES'. And
  --                    'NO' means generate a report without any updates.
  --                    Note that commit = 'NO' and verify = 'NO' represents
  --                    a no-op.
  --
  -- RETURN:
  --     A CLOB containing a formatted text report showing non-accepted plans
  --     in sequence, each with a possible change of its ACCEPTED status, and
  --     if verify = 'YES' the result of their performance verification.
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  -- -------------------------------------------------------------------------
  FUNCTION evolve_sql_plan_baseline(
    sql_handle IN VARCHAR2: = NULL,
    plan_name IN VARCHAR2: = NULL,
    time_limit IN INTEGER: = DBMS_SPM.AUTO_LIMIT,
    verify IN VARCHAR2: = 'YES',
    commit IN VARCHAR2: = 'YES'
  ) RETURN CLOB;
  -- -------------------------------------------------------------------------
  -- NAME:
  --   evolve_sql_plan_baseline (plan list format)
  --
  -- DESCRIPTION:
  --   This function can be used to evolve SQL plan baselines associated with
  --   one or more SQL statements. A SQL plan baseline is evolved when one or
  --   more of its non-accepted plans are changed to accepted plans. If asked
  --   by the user (i.e. parameter verify = 'YES'), the execution performance
  --   of each non-accepted plan is compared against the performance of a plan
  --   chosen from the associated SQL plan baseline. If the non-accepted plan
  --   performance is found to be better than SQL plan baseline performance
  --   then non-accepted plan is changed to an accepted plan, provided such
  --   action is permitted by the user (i.e. parameter commit = 'YES').
  --
  -- PARAMETERS:
  --   plan_list      - A list of plan names. Each plan in the list can belong
  --                    to same or different SQL statement.
  --   time_limit     - Time limit in number of minutes. This applies only if
  --                    verify = 'YES' (see next parameter). The time limit
  --                    is global and it is used in the following manner. The
  --                    time limit for first non-accepted plan verification
  --                    is set equal to the input value. The time limit for
  --                    second non-accepted plan verification is set equal to
  --                    (input value - time spent in first plan verification)
  --                    and so on. The default DBMS_SPM.AUTO_LIMIT means let
  --                    the system choose an appropriate time limit based on
  --                    the number of plan verifications required to be done.
  --                    The value DBMS_SPM.NO_LIMIT means no time limit.
  --                    A positive integer value represents a user specified
  --                    time limit.
  --   verify         - Whether to actually execute the plans and compare the
  --                    performance before changing non-accepted plans into
  --                    accepted plans. A performance verification involves
  --                    executing a non-accepted plan and a plan chosen from
  --                    corresponding SQL plan baseline and comparing their
  --                    performance statistics. If non-accepted plan shows
  --                    performance improvement, it is changed to an accepted
  --                    plan. Default 'YES' means verify that a non-accepted
  --                    plan gives better performance before changing it to
  --                    an accepted plan. And 'NO' means do not execute plans
  --                    but simply change non-accepted plans into accepted
  --                    plans.
  --   commit         - Whether to update the ACCEPTED status of non-accepted
  --                    plans from 'NO' to 'YES'. Default 'YES' means perform
  --                    updates of qualifying non-accepted plans and generate
  --                    a report that shows the updates and the result of
  --                    performance verification when verify = 'YES'. And
  --                    'NO' means generate a report without any updates.
  --                    Note that commit = 'NO' and verify = 'NO' represents
  --                    a no-op.
  --
  -- RETURN:
  --     A CLOB containing a formatted text report showing non-accepted plans
  --     in sequence, each with a possible change of its ACCEPTED status, and
  --     if verify = 'YES' the result of their performance verification.
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  -- -------------------------------------------------------------------------
  FUNCTION evolve_sql_plan_baseline(
    plan_list IN DBMS_SPM.NAME_LIST,
    time_limit IN INTEGER: = DBMS_SPM.AUTO_LIMIT,
    verify IN VARCHAR2: = 'YES',
    commit IN VARCHAR2: = 'YES'
  ) RETURN CLOB;
  -- -------------------------------------------------------------------------
  --  NAME:
  --     create_stgtab_baseline
  --
  --  DESCRIPTION:
  --    This procedure creates a staging table that will be used to pack
  --    (import) SQL plan baselines into it.
  --
  --  PARAMETERS:
  --    table_name       - Name of staging table.
  --    table_owner      - Name of schema owner of staging table.
  --                       Default NULL means current schema is the owner.
  --    tablespace_name  - Name of tablespace.
  --                       Default NULL means create staging table in the
  --                       default tablespace.
  --
  -- REQUIRE:
  --    1. 'CREATE TABLE' and 'ADMINISTER SQL MANAGEMENT OBJECT' privilege
  --    2. tablespace quota
  -- -------------------------------------------------------------------------
  PROCEDURE create_stgtab_baseline(
    table_name IN VARCHAR2,
    table_owner IN VARCHAR2: = NULL,
    tablespace_name IN VARCHAR2: = NULL
  );
  -- -------------------------------------------------------------------------
  -- NAME:
  --    pack_stgtab_baseline
  --
  -- DESCRIPTION:
  --    This function packs (exports) SQL plan baselines into a staging table.
  --
  -- PARAMETERS:
  --    table_name              - name of the staging table (case insensitive
  --                              unless double quoted)
  --    table_owner             - name of the schema owner of staging table
  --                              (case insensitive unless double quoted)
  --    sql_handle              - sql handle (case sensitive)
  --    plan_name               - plan name (case sensitive, % wildcards OK)
  --    sql_text                - sql text (case sensitive, % wildcards OK)
  --    creator                 - creator of plan baseline (case insensitive
  --                              unless double quoted)
  --    origin                  - origin of plan baseline, should be
  --                              'MANUAL-LOAD', 'AUTO-CAPTURE',
  --                              'MANUAL_SQLTUNE' or 'AUTO-SQLTUNE' (case
  --                              insensitive)
  --    enabled                 - should be either 'YES' or 'NO' (case
  --                              insensitive)
  --    accepted                - should be either 'YES' or 'NO' (case
  --                              insensitive)
  --    fixed                   - should be either 'YES' or 'NO' (case
  --                              insensitive)
  --    module                  - module (case sensitive)
  --    action                  - action (case sensitive)
  --
  -- RETURN:
  --   Number of plan baselines packed
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  --
  -- Note:
  --   We support predefined filters rather than user-defined filters. We do
  --   not allow users to inject an arbitrary filter into the query.
  -- -------------------------------------------------------------------------
  FUNCTION pack_stgtab_baseline (
    table_name IN VARCHAR2,
    table_owner IN VARCHAR2: = NULL,
    sql_handle IN VARCHAR2: = NULL,
    plan_name IN VARCHAR2: = '%',
    sql_text IN CLOB: = '%',
    creator IN VARCHAR2: = NULL,
    origin IN VARCHAR2: = NULL,
    enabled IN VARCHAR2: = NULL,
    accepted IN VARCHAR2: = NULL,
    fixed IN VARCHAR2: = NULL,
    module IN VARCHAR2: = NULL,
    action IN VARCHAR2: = NULL
  ) RETURN NUMBER;
  -- -------------------------------------------------------------------------
  -- NAME:
  --   unpack_stgtab_baseline
  --
  -- DESCRIPTION:
  --   This function unpacks (imports) plan baselines from a staging table.
  --
  -- Parameters:
  --    table_name              - name of the staging table (case insensitive
  --                              unless double quoted)
  --    table_owner             - name of the schema owner of staging table
  --                              (case insensitive unless double quoted)
  --    sql_handle              - sql handle (case sensitive)
  --    plan_name               - plan name (case sensitive, % wildcards OK)
  --    sql_text                - sql text (case sensitive, % wildcards OK)
  --    creator                 - creator of plan baseline (case insensitive
  --                              unless double quoted)
  --    origin                  - origin of plan baseline, should be
  --                              'MANUAL-LOAD', 'AUTO-CAPTURE',
  --                              'MANUAL-SQLTUNE' or 'AUTO-SQLTUNE' (case
  --                              insensitive)
  --    enabled                 - should be either 'YES' or 'NO' (case
  --                              insensitive)
  --    accepted                - should be either 'YES' or 'NO' (case
  --                              insensitive)
  --    fixed                   - should be either 'YES' or 'NO' (case
  --                              insensitive)
  --    module                  - module (case sensitive)
  --    action                  - action (case sensitive)
  --
  -- RETURN:
  --   Number of plans unpacked
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  --
  -- Note:
  --   We support predefined filters rather than user-defined filters. We do
  --   not allow users to inject an arbitrary filter into the query.
  -- -------------------------------------------------------------------------
  FUNCTION unpack_stgtab_baseline (
    table_name IN VARCHAR2,
    table_owner IN VARCHAR2: = NULL,
    sql_handle IN VARCHAR2: = NULL,
    plan_name IN VARCHAR2: = '%',
    sql_text IN CLOB: = '%',
    creator IN VARCHAR2: = NULL,
    origin IN VARCHAR2: = NULL,
    enabled IN VARCHAR2: = NULL,
    accepted IN VARCHAR2: = NULL,
    fixed IN VARCHAR2: = NULL,
    module IN VARCHAR2: = NULL,
    action IN VARCHAR2: = NULL
  ) RETURN NUMBER;
  -- -------------------------------------------------------------------------
  -- NAME:
  --   migrate_stored_outline
  --
  -- DESCRIPTION:
  --   This function can be used to migrate stored outlines for one or more
  --   sql statements to sql plan baselines in SMB.
  --
  -- PARAMETERS:
  --   attribute_name   - One of the following possible attribute names:
  --                      'OUTLINE_NAME',
  --                      'SQL_TEXT',
  --                      'CATEGORY',
  --                      'ALL'
  --   attribute_value  - The attribute value is used as an equality search
  --                      value. The attribute value used as a search pattern
  --                      of LIKE predicate is NOT supported, mainly because
  --                      sql_text of a stored outline is internally stored as
  --                      LONG instead of CLOB.
  --
  --                      (e.g., specifying attribute_name=>'CATEGORY',
  --                       and attribute_value=>'HR' means applying
  --                       CATEGORY = 'HR' as an outline selection filter. In
  --                       this case all the outlines under the 'HR' category
  --                       will be migrated to SQL plan baselines).
  --
  --                       Similarly, specifying attribute_name=>'SQL_TEXT',
  --                       and attribute_value=>'% HR-123 %' will result in
  --                       applying SQL_TEXT = '% HR-123 %' as an outline
  --                       selection filter. The LIKE predicate will not be
  --                       applied in this case.
  --
  --                      attribute_value cannot be NULL if attribute_name is
  --                      set to 'OUTLINE_NAME', 'SQL_TEXT' or 'CATEGORY'.
  --
  --                      attribute_value wrapped in single quotes will be
  --                      converted to upper case. e.g. specifying
  --                      attribute_name=>'outline_name' and
  --                      attribute_value=>'ms01' will result in applying
  --                      OUTLINE_NAME = 'MS01' as selection filter.
  --
  --                      attribute_value wrapped in double quotes will retain
  --                      its upper and lower cases. The double quotes will be
  --                      stripped off before applying the attribute_value as
  --                      selection filter. e.g. specifying
  --                      attribute_name=>'outline_name' and
  --                      attribute_value=>'"ms01"' will result in applying
  --                      OUTLINE_NAME = 'ms01' as selection filter.
  --
  --   fixed            - Whether the new SQL plan baselines created as the
  --                      results of migration should be fixed or not. A fixed
  --                      SQL plan baseline has higher priority to be chosen
  --                      over other non-fixed plans for the same SQL
  --                      statement. However, a SQL plan baseline containing a
  --                      fixed plan cannot be evolved. The default value is
  --                      'NO'.
  -- RETURN:
  --   A CLOB containing a text summary report showing the number of successes
  --   and number of failures during the stored outline migration. In case of
  --   failures, the report will also show the causes of failure.
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  --   "ALTER ANY OUTLINE" privilege
  -- -------------------------------------------------------------------------
  FUNCTION migrate_stored_outline(
    attribute_name IN VARCHAR2,
    attribute_value IN CLOB: = NULL,
    fixed IN VARCHAR2: = 'NO'
  ) RETURN CLOB;
  -- -------------------------------------------------------------------------
  -- NAME:
  --   migrate_stored_outline (outline list format)
  --
  -- DESCRIPTION:
  --   This function can be used to migrate stored outlines to sql plan
  --   baselines in SMB given one or more outline names.
  --
  -- PARAMETERS:
  --   outln_list   - a list of stored outline names
  --
  --   fixed        - Whether the new SQL plan baselines created as the
  --                  results of migration should be fixed or not. A fixed
  --                  SQL plan baseline has higher priority to be chosen
  --                  over other non-fixed plans for the same SQL
  --                  statement. However, a SQL plan baseline containing a
  --                  fixed plan cannot be evolved. The default value is 'NO'.
  -- RETURN:
  --   A CLOB containing a text summary report showing the number of successes
  --   and number of failures during the stored outline migration. In case of
  --   failures, the report will also show the causes of failure.
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  --   "ALTER ANY OUTLINE" privilege
  -- -------------------------------------------------------------------------
  FUNCTION migrate_stored_outline(
    outln_list IN DBMS_SPM.NAME_LIST,
    fixed IN VARCHAR2: = 'NO'
  ) RETURN CLOB;
  -- -------------------------------------------------------------------------
  -- NAME:
  --   drop_migrated_stored_outline
  --
  -- DESCRIPTION:
  --   This function can be used to drop all stored outlines that are already
  --   migrated to SQL plan baselines.
  --
  -- PARAMETERS:
  --   None
  -- RETURN:
  --   Number of outlines dropped.
  --
  -- REQUIRE:
  --   "Administer SQL Management Object" privilege
  --   "DROP ANY OUTLINE" privilege
  --   "select on dba_outlines" privilege
  -- -------------------------------------------------------------------------
  FUNCTION drop_migrated_stored_outline RETURN PLS_INTEGER;
  ----------------- create_evolve_task - SQL handle format -------------------
  -- NAME:
  --     create_evolve_task - Create an evolve task in order to evolve one or
  --     more plans for a given SQL statement (SQL handle format)
  --
  -- DESCRIPTION
  --     This function is called to prepare the evolution of one or more plans
  --     for a SQL statement given its handle.  The function mainly creates an
  --     advisor task and sets its parameters.
  --
  -- PARAMETERS:
  --     sql_handle  (IN) - Handle of a SQL statement.  The default NULL means
  --                        consider all SQL statements with non-accepted
  --                        plans.
  --     plan_name   (IN) - Plan identifier.  The default NULL means consider
  --                        all non-accepted plans of the specified SQL handle
  --                        or all SQL statements if the SQL handle is NULL.
  --     time_limit  (IN) - Time limit in number of minutes.  The time limit
  --                        is global and it is used in the following manner.
  --                        The time limit for first non-accepted plan is equal
  --                        to the input value. The time limit for the second
  --                        non-accepted plan is equal to (input value - time
  --                        spent in first plan verification) and so on. The
  --                        default DBMS_SPM.AUTO_LIMIT means let the system
  --                        choose an appropriate time limit based on the
  --                        number of plan verifications required to be done.
  --                        The value DBMS_SPM.NO_LIMIT means no time limit.
  --     task_name   (IN) - Evolve task name
  --     description (IN) - Description of the task (maximum 256 characters)
  --
  -- RETURNS:
  --     SQL evolve task unique name
  --
  -- EXCEPTIONS:
  --     To be done
  -----------------------------------------------------------------------------
  FUNCTION create_evolve_task(
    sql_handle IN VARCHAR2: = NULL,
    plan_name IN VARCHAR2: = NULL,
    time_limit IN NUMBER: = DBMS_SPM.AUTO_LIMIT,
    task_name IN VARCHAR2: = NULL,
    description IN VARCHAR2: = NULL
  ) RETURN VARCHAR2;
  ------------------- create_evolve_task - plan list format -------------------
  -- NAME:
  --     create_evolve_task - Create an evolve task in order to evolve one or
  --     more given plans (plan list format)
  --
  -- DESCRIPTION
  --     This function is called to prepare the evolution of one or more given
  --     plans.  The function mainly creates an advisor task and sets its
  --     parameters.
  --
  -- PARAMETERS:
  --     plan_list   (IN) - A list of plan names.  The plans may belong to
  --                        different SQL statements.
  --     time_limit  (IN) - Time limit in number of minutes.  The time limit
  --                        is global and it is used in the following manner.
  --                        The time limit for first non-accepted plan is equal
  --                        to the input value. The time limit for the second
  --                        non-accepted plan is equal to (input value - time
  --                        spent in first plan verification) and so on. The
  --                        default DBMS_SPM.AUTO_LIMIT means let the system
  --                        choose an appropriate time limit based on the
  --                        number of plan verifications required to be done.
  --                        The value DBMS_SPM.NO_LIMIT means no time limit.
  --     task_name   (IN) - Evolve task name
  --     description (IN) - Description of the task (maximum 256 characters)
  --
  -- RETURNS:
  --     SQL evolve task unique name
  --
  -- EXCEPTIONS:
  --     To be done
  -----------------------------------------------------------------------------
  FUNCTION create_evolve_task(
    plan_list IN DBMS_SPM.NAME_LIST,
    time_limit IN NUMBER: = DBMS_SPM.AUTO_LIMIT,
    task_name IN VARCHAR2: = NULL,
    description IN VARCHAR2: = NULL
  ) RETURN VARCHAR2;
  -------------------------- set_evolve_task_parameter ------------------------
  -- NAME:
  --     set_evolve_task_parameter - Set a parameter of an evolve task
  --
  -- DESCRIPTION
  --     This procedure is called to update the value of an evolve task
  --     parameter of type NUMBER.  The possible parameters are:
  --       TIME_LIMIT     : Global time limit (default DBMS_SPM.AUTO_LIMIT) in
  --                        minutes.  This is the total time allowed for the
  --                        task.
  --
  -- PARAMETERS:
  --     task_name    (IN) - Identifier of task
  --     parameter    (IN) - Name of the parameter to set
  --     value        (IN) - New value of the parameter
  --
  -- RETURNS:
  --     Nothing
  --
  -- EXCEPTIONS:
  --     To be done
  -----------------------------------------------------------------------------
  PROCEDURE set_evolve_task_parameter(
    task_name IN VARCHAR2,
    parameter IN VARCHAR2,
    value IN NUMBER
  );
  -------------------------- set_evolve_task_parameter ------------------------
  -- NAME:
  --     set_evolve_task_parameter - Set a parameter of an evolve task
  --
  -- DESCRIPTION
  --     This procedure is called to update the value of an evolve task
  --     parameter of type VARCHAR2.  The possible parameters are:
  --       ACCEPT_PLANS   : This parameter is only valid for the automatic
  --                        evolve task, SYS_AUTO_SPM_EVOLVE_TASK.  When
  --                        set to TRUE, all plans recommended by the task
  --                        will be automatically accepted.  When set to FALSE,
  --                        the task will verify the plans, but will not
  --                        implement any recommendations.  The default value
  --                        is TRUE.
  --
  -- PARAMETERS:
  --     task_name    (IN) - Identifier of task
  --     parameter    (IN) - Name of the parameter to set
  --     value        (IN) - New value of the parameter
  --
  -- RETURNS:
  --     Nothing
  --
  -- EXCEPTIONS:
  --     To be done
  -----------------------------------------------------------------------------
  PROCEDURE set_evolve_task_parameter(
    task_name IN VARCHAR2,
    parameter IN VARCHAR2,
    value IN VARCHAR2
  );
  ----------------------------- execute_evolve_task ---------------------------
  -- NAME:
  --     execute_evolve_task - Execute an evolve task
  --
  -- DESCRIPTION
  --     This function is called to execute a previously created evolve task.
  --
  -- PARAMETERS:
  --     task_name       (IN) - Identifier of task to execute
  --     execution_name  (IN) - A name to qualify and identify an execution.
  --                            If not specified, it is generated by the
  --                            advisor and returned by the function.
  --     execution_desc  (IN) - Description of the execution (maximum 256
  --                            characters)
  --
  -- RETURNS:
  --     Name of the new execution
  --
  -- EXCEPTIONS:
  --     To be done
  -----------------------------------------------------------------------------
  FUNCTION execute_evolve_task(
    task_name IN VARCHAR2,
    execution_name IN VARCHAR2: = NULL,
    execution_desc IN VARCHAR2: = NULL
  ) RETURN VARCHAR2;
  ---------------------------- interrupt_evolve_task --------------------------
  -- NAME:
  --     interrupt_evolve_task - Interrupt an evolve task
  --
  -- DESCRIPTION
  --     This function is called to interrupt a currently executing evolve
  --     task.  The task will end its operations as it would at a normal exit
  --     and the user will be able to access the intermediate results.  The
  --     task may also be later resumed.
  --
  -- PARAMETERS:
  --     task_name       (IN) - Identifier of task to interrupt
  --
  -- RETURNS:
  --     Nothing
  --
  -- EXCEPTIONS:
  --     If the task is not currently executing, you will get an ORA-13609
  --     error.
  -----------------------------------------------------------------------------
  PROCEDURE interrupt_evolve_task(
    task_name IN VARCHAR2
  );
  ----------------------------- cancel_evolve_task ----------------------------
  -- NAME:
  --     cancel_evolve_task - Cancel an evolve task
  --
  -- DESCRIPTION
  --     This function is called to cancel a currently executing evolve task.
  --     All intermediate results will be removed from the task.
  --
  -- PARAMETERS:
  --     task_name       (IN) - Identifier of task to cancel
  --
  -- RETURNS:
  --     Nothing
  --
  -- EXCEPTIONS:
  --     If the task is not currently executing, you will get an ORA-13609
  --     error.
  -----------------------------------------------------------------------------
  PROCEDURE cancel_evolve_task(
    task_name IN VARCHAR2
  );
  ----------------------------- reset_evolve_task -----------------------------
  -- NAME:
  --     reset_evolve_task - Reset an evolve task
  --
  -- DESCRIPTION
  --     This function is called to reset an evolve task to its initial state.
  --     All intermediate results will be removed from the task.  Call this
  --     procedure on a task that is not currently executing.
  --
  -- PARAMETERS:
  --     task_name       (IN) - Identifier of task to reset
  --
  -- RETURNS:
  --     Nothing
  --
  -- EXCEPTIONS:
  --     To be done
  -----------------------------------------------------------------------------
  PROCEDURE reset_evolve_task(
    task_name IN VARCHAR2
  );
  ----------------------------- resume_evolve_task ----------------------------
  -- NAME:
  --     resume_evolve_task - Resume an evolve task
  --
  -- DESCRIPTION
  --     This function is called to resume a previously interrupted task.
  --
  -- PARAMETERS:
  --     task_name       (IN) - Identifier of task to resume
  --
  -- RETURNS:
  --     Nothing
  --
  -- EXCEPTIONS:
  --     To be done
  -----------------------------------------------------------------------------
  PROCEDURE resume_evolve_task(
    task_name IN VARCHAR2
  );
  ------------------------------ drop_evolve_task -----------------------------
  -- NAME:
  --     drop_evolve_task - Drop an evolve task
  --
  -- DESCRIPTION
  --     This function is called to drop an evolve task.
  --
  -- PARAMETERS:
  --     task_name       (IN) - Identifier of task to drop
  --
  -- RETURNS:
  --     Nothing
  --
  -- EXCEPTIONS:
  --     To be done
  -----------------------------------------------------------------------------
  PROCEDURE drop_evolve_task(
    task_name IN VARCHAR2
  );
  ----------------------------- report_evolve_task ----------------------------
  -- NAME:
  --     report_evolve_task - Report an evolve task
  --
  -- DESCRIPTION
  --     This function is called to display the results of an evolve task.
  --
  -- PARAMETERS:
  --     task_name       (IN) - Identifier of task to report
  --     type            (IN) - Type of the report.  Possible values are TEXT,
  --                            HTML, XML.
  --     level           (IN) - Format of the report.  Possible values are
  --                            BASIC, TYPICAL, ALL.
  --     section         (IN) - Particular section in the report.
  --                            Possible values are:
  --                              SUMMARY,
  --                              FINDINGS,
  --                              PLANS,
  --                              INFORMATION,
  --                              ERRORS,
  --                              ALL.
  --     object_id       (IN) - Identifier of the advisor framework object that
  --                            represents a single plan.  If NULL, the report
  --                            will be generated for all objects.
  --     task_owner      (IN) - Owner of the evolve task.  Defaults to the
  --                            current schema owner.
  --     execution_name  (IN) - A name to qualify and identify an execution.
  --                            If NULL, the report will be generated for the
  --                            last task execution.
  --
  -- RETURNS:
  --     The report
  --
  -- EXCEPTIONS:
  --     To be done
  -----------------------------------------------------------------------------
  FUNCTION report_evolve_task(
    task_name IN VARCHAR2,
    type IN VARCHAR2: = 'TEXT',
    level IN VARCHAR2: = 'TYPICAL',
    section IN VARCHAR2: = 'ALL',
    object_id IN NUMBER: = NULL,
    task_owner IN VARCHAR2: = NULL,
    execution_name IN VARCHAR2: = NULL
  ) RETURN CLOB;
  -------------------------- accept_sql_plan_baseline -------------------------
  -- NAME:
  --     accept_sql_plan_baseline - Accept plan based on recommendation of
  --                                evolve task
  --
  -- DESCRIPTION
  --     This function is called to accept a plan based on the recommendation
  --     of an evolve task.
  --
  -- PARAMETERS:
  --     task_name       (IN) - Identifier of task to implement
  --     object_id       (IN) - Identifier of the advisor framework object that
  --                            represents a single plan
  --     task_owner      (IN) - Owner of the evolve task.  Defaults to the
  --                            current schema owner.
  --     force           (IN) - Accept the plan even if the advisor did not
  --                            recommend such an action.  The default is
  --                            FALSE meaning only accept the plan if the
  --                            plan was verified and showed sufficient
  --                            improvement in benefit.
  --
  -- EXCEPTIONS:
  --     To be done
  -----------------------------------------------------------------------------
  PROCEDURE accept_sql_plan_baseline(
    task_name IN VARCHAR2,
    object_id IN NUMBER,
    task_owner IN VARCHAR2: = NULL,
    force IN BOOLEAN: = FALSE
  );
  --------------------------- implement_evolve_task ---------------------------
  -- NAME:
  --     implement_evolve_task - Implement recommendations of evolve task
  --
  -- DESCRIPTION
  --     This function is called to implement the recommendations of an evolve
  --     task.
  --
  -- PARAMETERS:
  --     task_name       (IN) - Identifier of task to implement
  --     task_owner      (IN) - Owner of the evolve task.  Defaults to the
  --                            current schema owner.
  --     execution_name  (IN) - A name to qualify and identify an execution.
  --                            If NULL, the action will be taken for the
  --                            last task execution.
  --     force           (IN) - Accept all plans even if the advisor did not
  --                            recommend such an action.  The default is
  --                            FALSE meaning only accept those plans that
  --                            were verified and showed sufficient
  --                            improvement in benefit.
  --
  -- RETURNS:
  --     The number of plans accepted
  --
  -- EXCEPTIONS:
  --     To be done
  -----------------------------------------------------------------------------
  FUNCTION implement_evolve_task(
    task_name IN VARCHAR2,
    task_owner IN VARCHAR2: = NULL,
    execution_name IN VARCHAR2: = NULL,
    force IN BOOLEAN: = FALSE
  ) RETURN NUMBER;
  --------------------------- report_auto_evolve_task -------------------------
  -- NAME:
  --     report_auto_evolve_task - Report automatic evolve task
  --
  -- DESCRIPTION
  --     This function is called to display the results of an execution of
  --     the automatic evolve task.
  --
  -- PARAMETERS:
  --     type            (IN) - Type of the report.  Possible values are TEXT,
  --                            HTML, XML.
  --     level           (IN) - Format of the report.  Possible values are
  --                            BASIC, TYPICAL, ALL.
  --     section         (IN) - Particular section in the report.
  --                            Possible values are:
  --                              SUMMARY,
  --                              FINDINGS,
  --                              PLANS,
  --                              INFORMATION,
  --                              ERRORS,
  --                              ALL.
  --     object_id       (IN) - Identifier of the advisor framework object that
  --                            represents a single plan.  If NULL, the report
  --                            will be generated for all objects.
  --     execution_name  (IN) - A name to qualify and identify an execution.
  --                            If NULL, the report will be generated for the
  --                            last task execution.
  --
  -- RETURNS:
  --     The report
  --
  -- EXCEPTIONS:
  --     To be done
  -----------------------------------------------------------------------------
  FUNCTION report_auto_evolve_task(
    type IN VARCHAR2: = 'TEXT',
    level IN VARCHAR2: = 'TYPICAL',
    section IN VARCHAR2: = 'ALL',
    object_id IN NUMBER: = NULL,
    execution_name IN VARCHAR2: = NULL
  ) RETURN CLOB;
  END dbms_spm;
