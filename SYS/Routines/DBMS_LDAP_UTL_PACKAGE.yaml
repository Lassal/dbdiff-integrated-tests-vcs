schema: SYS
name: DBMS_LDAP_UTL
routineType: PACKAGE
returnParamater:
  name: UNSUBSCRIBE_USER.(--return--)
  dataType: BINARY_INTEGER
  parameterMode: OUT
  ordinalPosition: 0
parameters:
- name: AUTHENTICATE_USER.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: AUTHENTICATE_USER.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: AUTHENTICATE_USER.AUTH_TYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 3
- name: AUTHENTICATE_USER.CREDENTIALS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: AUTHENTICATE_USER.BINARY_CREDENTIALS
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 5
- name: AUTHENTICATE_USER_EXT.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: AUTHENTICATE_USER_EXT.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: AUTHENTICATE_USER_EXT.AUTH_TYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 3
- name: AUTHENTICATE_USER_EXT.PASSWORD_ATTR
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 4
- name: AUTHENTICATE_USER_EXT.PASSWORD
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 5
- name: CHECK_GROUP_MEMBERSHIP.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: CHECK_GROUP_MEMBERSHIP.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: CHECK_GROUP_MEMBERSHIP.GROUP_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 3
- name: CHECK_GROUP_MEMBERSHIP.NESTED
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 4
- name: CHECK_INTERFACE_VERSION.INTERFACE_VERSION
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: CHECK_USER_SUBSCRIPTION.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: CHECK_USER_SUBSCRIPTION.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: CHECK_USER_SUBSCRIPTION.SERVICE_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 3
- name: CREATE_GROUP_HANDLE.GROUP_HD
  dataType: RAW
  parameterMode: OUT
  ordinalPosition: 1
- name: CREATE_GROUP_HANDLE.GROUP_TYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: CREATE_GROUP_HANDLE.GROUP_ID
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CREATE_MOD_PROPERTYSET.PSET_TYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 1
- name: CREATE_MOD_PROPERTYSET.PSET_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: CREATE_MOD_PROPERTYSET.MOD_PSET
  dataType: RAW
  parameterMode: OUT
  ordinalPosition: 3
- name: CREATE_SERVICE_HANDLE.SERVICE_HANDLE
  dataType: RAW
  parameterMode: OUT
  ordinalPosition: 1
- name: CREATE_SERVICE_HANDLE.SERVICE_TYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: CREATE_SERVICE_HANDLE.SERVICE_ID
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CREATE_SUBSCRIBER_HANDLE.SUBSCRIBER_HD
  dataType: RAW
  parameterMode: OUT
  ordinalPosition: 1
- name: CREATE_SUBSCRIBER_HANDLE.SUBSCRIBER_TYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: CREATE_SUBSCRIBER_HANDLE.SUBSCRIBER_ID
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: CREATE_USER_HANDLE.USER_HD
  dataType: RAW
  parameterMode: OUT
  ordinalPosition: 1
- name: CREATE_USER_HANDLE.USER_TYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: CREATE_USER_HANDLE.USER_ID
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: FREE_HANDLE.HANDLE
  dataType: RAW
  parameterMode: INOUT
  ordinalPosition: 1
- name: FREE_MOD_PROPERTYSET.MOD_PSET
  dataType: RAW
  parameterMode: INOUT
  ordinalPosition: 1
- name: FREE_PROPERTYSET_COLLECTION.PSET_COLLECTION
  dataType: PL/SQL TABLE
  parameterMode: INOUT
  ordinalPosition: 1
- name: GET_AVAILABLE_SERVICES.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_AVAILABLE_SERVICES.SUBSCRIBER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: GET_AVAILABLE_SERVICES.SERVICES
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 3
- name: GET_GROUP_DN.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_GROUP_DN.GROUP_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: GET_GROUP_DN.DN
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 3
- name: GET_GROUP_MEMBERSHIP.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_GROUP_MEMBERSHIP.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: GET_GROUP_MEMBERSHIP.NESTED
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 3
- name: GET_GROUP_MEMBERSHIP.ATTR_LIST
  dataType: PL/SQL TABLE
  parameterMode: IN
  ordinalPosition: 4
- name: GET_GROUP_MEMBERSHIP.RET_GROUPS
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 5
- name: GET_GROUP_PROPERTIES.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_GROUP_PROPERTIES.GROUP_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: GET_GROUP_PROPERTIES.ATTRS
  dataType: PL/SQL TABLE
  parameterMode: IN
  ordinalPosition: 3
- name: GET_GROUP_PROPERTIES.PTYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 4
- name: GET_GROUP_PROPERTIES.RET_PSET_COLL
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 5
- name: GET_PROPERTY_NAMES.PSET
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_PROPERTY_NAMES.PROPERTY_NAMES
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 2
- name: GET_PROPERTY_VALUES.PSET
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_PROPERTY_VALUES.PROPERTY_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: GET_PROPERTY_VALUES.PROPERTY_VALUES
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 3
- name: GET_PROPERTY_VALUES_BLOB.PSET
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_PROPERTY_VALUES_BLOB.PROPERTY_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: GET_PROPERTY_VALUES_BLOB.PROPERTY_VALUES
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 3
- name: GET_PROPERTY_VALUES_LEN.PSET
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_PROPERTY_VALUES_LEN.PROPERTY_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 2
- name: GET_PROPERTY_VALUES_LEN.PROPERTY_VALUES
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 3
- name: GET_SUBSCRIBED_SERVICES.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_SUBSCRIBED_SERVICES.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: GET_SUBSCRIBED_SERVICES.SERVICES
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 3
- name: GET_SUBSCRIBED_USERS.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_SUBSCRIBED_USERS.SERVICE_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: GET_SUBSCRIBED_USERS.USERS
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 3
- name: GET_SUBSCRIBER_DN.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_SUBSCRIBER_DN.SUBSCRIBER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: GET_SUBSCRIBER_DN.DN
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 3
- name: GET_SUBSCRIBER_EXT_PROPERTIES.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_SUBSCRIBER_EXT_PROPERTIES.SUBSCRIBER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: GET_SUBSCRIBER_EXT_PROPERTIES.ATTRS
  dataType: PL/SQL TABLE
  parameterMode: IN
  ordinalPosition: 3
- name: GET_SUBSCRIBER_EXT_PROPERTIES.PTYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 4
- name: GET_SUBSCRIBER_EXT_PROPERTIES.FILTER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 5
- name: GET_SUBSCRIBER_EXT_PROPERTIES.RET_PSET_COLL
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 6
- name: GET_SUBSCRIBER_PROPERTIES.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_SUBSCRIBER_PROPERTIES.SUBSCRIBER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: GET_SUBSCRIBER_PROPERTIES.ATTRS
  dataType: PL/SQL TABLE
  parameterMode: IN
  ordinalPosition: 3
- name: GET_SUBSCRIBER_PROPERTIES.PTYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 4
- name: GET_SUBSCRIBER_PROPERTIES.RET_PSET_COLL
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 5
- name: GET_USER_DN.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_USER_DN.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: GET_USER_DN.DN
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 3
- name: GET_USER_EXTENDED_PROPERTIES.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_USER_EXTENDED_PROPERTIES.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: GET_USER_EXTENDED_PROPERTIES.ATTRS
  dataType: PL/SQL TABLE
  parameterMode: IN
  ordinalPosition: 3
- name: GET_USER_EXTENDED_PROPERTIES.PTYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 4
- name: GET_USER_EXTENDED_PROPERTIES.FILTER
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 5
- name: GET_USER_EXTENDED_PROPERTIES.RET_PSET_COLL
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 6
- name: GET_USER_PROPERTIES.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_USER_PROPERTIES.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: GET_USER_PROPERTIES.ATTRS
  dataType: PL/SQL TABLE
  parameterMode: IN
  ordinalPosition: 3
- name: GET_USER_PROPERTIES.PTYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 4
- name: GET_USER_PROPERTIES.RET_PSET_COLL
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 5
- name: GET_USER_PROPS_AND_AUTH.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: GET_USER_PROPS_AND_AUTH.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: GET_USER_PROPS_AND_AUTH.AUTH_TYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 3
- name: GET_USER_PROPS_AND_AUTH.ATTRS
  dataType: PL/SQL TABLE
  parameterMode: IN
  ordinalPosition: 4
- name: GET_USER_PROPS_AND_AUTH.CREDENTIALS
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 5
- name: GET_USER_PROPS_AND_AUTH.BINARY_CREDENTIALS
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 6
- name: GET_USER_PROPS_AND_AUTH.RET_PSET_COLL
  dataType: PL/SQL TABLE
  parameterMode: OUT
  ordinalPosition: 7
- name: LOCATE_SUBSCRIBER_FOR_USER.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: LOCATE_SUBSCRIBER_FOR_USER.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: LOCATE_SUBSCRIBER_FOR_USER.SUBSCRIBER_HANDLE
  dataType: RAW
  parameterMode: OUT
  ordinalPosition: 3
- name: NORMALIZE_DN_WITH_CASE.DN
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 1
- name: NORMALIZE_DN_WITH_CASE.LOWER_CASE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: NORMALIZE_DN_WITH_CASE.NORM_DN
  dataType: VARCHAR2
  parameterMode: OUT
  ordinalPosition: 3
- name: POPULATE_MOD_PROPERTYSET.MOD_PSET
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: POPULATE_MOD_PROPERTYSET.PROPERTY_MOD_OP
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: POPULATE_MOD_PROPERTYSET.PROPERTY_NAME
  dataType: VARCHAR2
  parameterMode: IN
  ordinalPosition: 3
- name: POPULATE_MOD_PROPERTYSET.PROPERTY_VALUES
  dataType: PL/SQL TABLE
  parameterMode: IN
  ordinalPosition: 4
- name: PROPERTY_VALUE_FREE_BLOB.VALS
  dataType: PL/SQL TABLE
  parameterMode: INOUT
  ordinalPosition: 1
- name: SET_GROUP_HANDLE_PROPERTIES.GROUP_HD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: SET_GROUP_HANDLE_PROPERTIES.PROPERTY_TYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: SET_GROUP_HANDLE_PROPERTIES.PROPERTY
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 3
- name: SET_USER_HANDLE_PROPERTIES.USER_HD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: SET_USER_HANDLE_PROPERTIES.PROPERTY_TYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 2
- name: SET_USER_HANDLE_PROPERTIES.PROPERTY
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 3
- name: SET_USER_PROPERTIES.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: SET_USER_PROPERTIES.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: SET_USER_PROPERTIES.PSET_TYPE
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 3
- name: SET_USER_PROPERTIES.MOD_PSET
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 4
- name: SET_USER_PROPERTIES.MOD_OP
  dataType: BINARY_INTEGER
  parameterMode: IN
  ordinalPosition: 5
- name: SUBSCRIBE_USER.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: SUBSCRIBE_USER.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: SUBSCRIBE_USER.SERVICE_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 3
- name: UNSUBSCRIBE_USER.LD
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 1
- name: UNSUBSCRIBE_USER.USER_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 2
- name: UNSUBSCRIBE_USER.SERVICE_HANDLE
  dataType: RAW
  parameterMode: IN
  ordinalPosition: 3
routineDefinition: |-
  PACKAGE DBMS_LDAP_UTL AS
  /**

  *************************************************************************************************

  *   NAME

  *     DBMS_LDAP_UTL

  *

  *   DESCRIPTION

  *     Package specification for DBMS_LDAP_UTL

  *     This pakcage contains Oracle EXtension utility functions.

  *     These functions can be used for authentication or querying information

  *     on users, groups or subscribers in the LDAP server.

  *

  *   SYNTAX

  *     N/A

  *

  *   REQUIRES

  *   1.  Most of the functions accept a valid ldap session as an argument.

  *       This ldap session has to be obtained from DBMS_LDAP.init() function.

  *   2.  The functions in the package lookup the Oracle Context schema in the

  *       LDAP server to query information on users, groups and subscribers.

  *

  *   PARAMETERS

  *     NONE

  *

  *   RETURNS

  *     This package returns error codes and does not raise any exceptions.

  *     See the documentation on individual functions for corresponding

  *     error codes returned.

  *

  *   EXCEPTIONS

  *     THIS PACKAGE DOES NOT RAISE ANY EXCEPTIONS.

  *

  *   USAGE

  *     This Package can be used for querying information on users, groups

  *     and subscribers in the LDAP server.

  *

  *   EXAMPLES

  *

  *   SEE

  *

  ****************************************************************************************************

  */
  VERSION CONSTANT VARCHAR2(256): = '2';
  INTERFACE_VERSION CONSTANT VARCHAR2(256): = '2';
  --
  -- DBMS_LDAP_UTL data type definitions
  --
  -- We use RAW(32) as a data structure to store external pointers
  -- It is big enough to store 256 bit pointers!
  -- this data structure holds a pointer to Handle.
  SUBTYPE HANDLE IS RAW(32);
  -- this data structure holds a pointer to List of Properties.
  SUBTYPE PROPERTY_SET IS RAW(32);
  -- this data structure holds a pointer to List of Properties.
  SUBTYPE MOD_PROPERTY_SET IS RAW(32);
  -- this data structure holds a pointer to List of Property sets.
  TYPE PROPERTY_SET_COLLECTION is TABLE of PROPERTY_SET INDEX BY BINARY_INTEGER;
  -- String collection.
  SUBTYPE STRING_COLLECTION IS DBMS_LDAP.STRING_COLLECTION;
  -- Binval collection.
  SUBTYPE BINVAL_COLLECTION IS DBMS_LDAP.BINVAL_COLLECTION;
  -- BLOB collection.
  SUBTYPE BLOB_COLLECTION IS DBMS_LDAP.BLOB_COLLECTION;
  -- Session.
  SUBTYPE SESSION IS DBMS_LDAP.SESSION;
  --
  -- DBMS_LDAP_UTL function definitions
  --
  /**

  *******************************************************************************

  *   NAME

  *    check_interface_version

  *

  *   DESCRIPTION

  *     Checks for the support of interface version.

  *

  *   SYNTAX

  *   FUNCTION check_interface_version

  *   (

  *

  *   interface_version IN  VARCHAR2

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (VARCHAR2 )           interface_version   - Version of the Interface.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   Version Supported.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -   Version not Supported.

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.create_user_handle()

  *

  ******************************************************************************

  */
  FUNCTION check_interface_version (interface_version IN VARCHAR2) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    create_subscriber_handle

  *

  *   DESCRIPTION

  *     This function creates a subscriber handle.

  *

  *   SYNTAX

  *   FUNCTION create_subscriber_handle

  *   (

  *

  *   subscriber_hd   OUT HANDLE,

  *   subscriber_type IN  PLS_INTEGER,

  *   subscriber_id   IN  VARCHAR2

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (HANDLE )  subscriber_hd     - A pointer to a handle to

  *                                                   subscriber.

  *    (PLS_INTEGER )           subscriber_type   - The type of subscriber id that

  *                                               is passed.

  *                                             Valid values for this argument are:

  *                                                - DBMS_LDAP_UTL.TYPE_DN

  *                                                - DBMS_LDAP_UTL.TYPE_GUID

  *                                                - DBMS_LDAP_UTL.TYPE_NICKNAME

  *                                                - DBMS_LDAP_UTL.TYPE_DEFAULT

  *    (VARCHAR2 )              subscriber_id      - The subscriber id representing

  *                                               the subscriber entry.

  *                                               This can be NULL if

  *                                                subscriber_type is :

  *                                                 - DBMS_LDAP_UTL.TYPE_DEFAULT

  *                                                then the default subscriber

  *                                                would be fetched from

  *                                                Root Oracle Context.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.LDAP_SUCCESS                   -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_subscriber_properties().

  *

  ******************************************************************************

  */
  FUNCTION create_subscriber_handle (
    subscriber_hd OUT HANDLE,
    subscriber_type IN PLS_INTEGER,
    subscriber_id IN VARCHAR2
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_subscriber_properties

  *

  *   DESCRIPTION

  *     Retrieves the subsciber properties for the given subscriber handle.

  *

  *   SYNTAX

  *   FUNCTION get_subscriber_properties

  *   (

  *

  *   ld                IN   SESSION,

  *   subscriber_handle IN   HANDLE,

  *   attrs             IN   STRING_COLLECTION,

  *   ptype             IN   PLS_INTEGER,

  *   ret_pset_coll     OUT  PROPERTY_SET_COLLECTION,

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from DBMS_LDAP.init() function.

  *

  *   PARAMETERS

  *    (SESSION )           ld                 - A valid ldap session handle.

  *    (HANDLE )        subscriber_handle      - The subscriber handle

  *    (STRING_COLLECTION ) attrs              - List of Attributes that

  *                                                        need to be fetched for

  *                                                        the subscriber.

  *    (PLS_INTEGER )                 ptype              - Type of properties to be

  *                                                        returned.

  *                                                        Valid values:

  *                                                         - DBMS_LDAP_UTL.ENTRY_PROPERITES

  *                                                         - DBMS_LDAP_UTL.COMMON_PROPERITES : To retrieve Subscriber's Oracle Context Properties.

  *    (PROPERTY_SET_COLLECTION )  ret_pset_coll      - The subscriber details

  *                                                        containing the requested

  *                                                        attributes by the caller.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.NO_SUCH_SUBSCRIBER             -   Subscriber doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_SUBSCRIBER_ENTRIES    -   Multiple number of subscriber

  *                                                  DN entries exist in the

  *                                                  directory for the given

  *                                                  subscriber.

  *     DBMS_LDAP_UTL.INVALID_ROOT_ORCL_CTX          -    Invalid Root Oracle Context.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *     DBMS_LDAP error codes                      -    Returns proper LDAP error codes

  *                                                for unconditional failures

  *                                                while carrying out

  *                                                LDAP operations by the ldap

  *                                                server.

  *

  *

  *   USAGE

  *   This function can only be called after a valid

  *   ldap session is obtained from a call to DBMS_LDAP.init().

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init(), DBMS_LDAP_UTL.create_subscriber_handle().

  *

  ******************************************************************************

  */
  FUNCTION get_subscriber_properties(
    ld IN SESSION,
    subscriber_handle IN HANDLE,
    attrs IN STRING_COLLECTION,
    ptype IN PLS_INTEGER,
    ret_pset_coll OUT PROPERTY_SET_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_subscriber_ext_properties

  *

  *   DESCRIPTION

  *     Retrieves the subsciber extended properties for the given subscriber handle.

  *

  *   SYNTAX

  *   FUNCTION get_subscriber_ext_properties

  *   (

  *

  *   ld                IN   SESSION,

  *   subscriber_handle IN   HANDLE,

  *   attrs             IN   STRING_COLLECTION,

  *   ptype             IN   PLS_INTEGER,

  *   filter            IN   VARCHAR2,

  *   ret_pset_coll     OUT  PROPERTY_SET_COLLECTION,

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from DBMS_LDAP.init() function.

  *

  *   PARAMETERS

  *    (SESSION )           ld                 - A valid ldap session handle.

  *    (HANDLE )        subscriber_handle      - The subscriber handle

  *    (STRING_COLLECTION ) attrs              - List of Attributes that

  *                                                        need to be fetched for

  *                                                        the subscriber.

  *    (PLS_INTEGER )                 ptype              - Type of properties to be

  *                                                        returned.

  *                                                        Valid values:

  *                                                         - DBMS_LDAP_UTL.DEFAULT_RAD_PROPERTIES

  *                                                         - DBMS_LDAP_UTL.COMMON_PROPERITES : To retrieve Subscriber's Oracle Context Properties.

  *    (VARCHAR2)                    filter              - Ldap filter to further

  *                                                        refine the user properties

  *                                                        returned by function.

  *    (PROPERTY_SET_COLLECTION )  ret_pset_coll      - The subscriber details

  *                                                        containing the requested

  *                                                        attributes by the caller.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.NO_SUCH_SUBSCRIBER             -   Subscriber doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_SUBSCRIBER_ENTRIES    -   Multiple number of subscriber

  *                                                  DN entries exist in the

  *                                                  directory for the given

  *                                                  subscriber.

  *     DBMS_LDAP_UTL.INVALID_ROOT_ORCL_CTX          -    Invalid Root Oracle Context.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *     DBMS_LDAP error codes                      -    Returns proper LDAP error codes

  *                                                for unconditional failures

  *                                                while carrying out

  *                                                LDAP operations by the ldap

  *                                                server.

  *

  *

  *   USAGE

  *   This function can only be called after a valid

  *   ldap session is obtained from a call to DBMS_LDAP.init().

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init(), DBMS_LDAP_UTL.create_subscriber_handle().

  *

  ******************************************************************************

  */
  FUNCTION get_subscriber_ext_properties(
    ld IN SESSION,
    subscriber_handle IN HANDLE,
    attrs IN STRING_COLLECTION,
    ptype IN PLS_INTEGER,
    filter IN VARCHAR2,
    ret_pset_coll OUT PROPERTY_SET_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_subscriber_dn

  *

  *   DESCRIPTION

  *     Returns the subscriber DN.

  *

  *   SYNTAX

  *   FUNCTION get_subscriber_dn

  *   (

  *

  *   ld                IN     SESSION,

  *   subscriber_handle IN     HANDLE,

  *   dn                OUT    VARCHAR2

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from DBMS_LDAP.init() function.

  *

  *   PARAMETERS

  *    (SESSION )     ld                 - A valid ldap session handle.

  *    (HANDLE )  subscriber_handle  - The subscriber handle

  *    (VARCHAR2 )              dn                 - The subscriber DN

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.NO_SUCH_SUBSCRIBER             -   Subscriber doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_SUBSCRIBER_ENTRIES    -   Multiple number of subscriber

  *                                                  DN entries exist in the

  *                                                  directory for the given

  *                                                  subscriber.

  *     DBMS_LDAP_UTL.INVALID_ROOT_ORCL_CTX          -    Invalid Root Oracle Context.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *     DBMS_LDAP error codes                      -    Returns proper LDAP error codes

  *                                                for unconditional failures

  *                                                while carrying out

  *                                                LDAP operations by the ldap

  *                                                server.

  *

  *

  *   USAGE

  *   This function can only be called after a valid

  *   ldap session is obtained from a call to DBMS_LDAP.init().

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init().

  *

  ******************************************************************************

  */
  FUNCTION get_subscriber_dn(
    ld IN SESSION,
    subscriber_handle IN HANDLE,
    dn OUT VARCHAR2
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    free_propertyset_collection

  *

  *   DESCRIPTION

  *     Frees the memory associated with Property set collection.

  *

  *   SYNTAX

  *   PROCEDURE free_propertyset_collection

  *   (

  *

  *   pset_collection      IN OUT   PROPERTY_SET_COLLECTION

  *

  *   );

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (PROPERTY_SET_COLLECTION )      pset_collection    - Property set collection

  *                                                     returned from one of the

  *                                                     following functions:

  *                                                       - DBMS_LDAP_UTL.get_group_membership().

  *                                                       - DBMS_LDAP_UTL.get_subscriber_properties().

  *                                                       - DBMS_LDAP_UTL.get_user_properties().

  *                                                       - DBMS_LDAP_UTL.get_group_properties().

  *

  *   RETURNS

  *     NONE

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_group_membership(), DBMS_LDAP_UTL.get_subscriber_properties(), DBMS_LDAP_UTL.get_user_properties(), DBMS_LDAP_UTL.get_group_properties().

  *

  ******************************************************************************

  */
  PROCEDURE free_propertyset_collection (
    pset_collection IN OUT PROPERTY_SET_COLLECTION
  );
  /**

  *******************************************************************************

  *   NAME

  *    create_user_handle

  *

  *   DESCRIPTION

  *     This function creates a user handle.

  *

  *   SYNTAX

  *   FUNCTION create_user_handle

  *   (

  *

  *   user_hd   OUT HANDLE,

  *   user_type IN  PLS_INTEGER,

  *   user_id   IN  VARCHAR2

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (HANDLE )  user_hd     - A pointer to a handle to

  *                                                   user.

  *    (PLS_INTEGER )           user_type   - The type of user id that

  *                                               is passed.

  *                                             Valid values for this argument are:

  *                                                - DBMS_LDAP_UTL.TYPE_DN

  *                                                - DBMS_LDAP_UTL.TYPE_GUID

  *                                                - DBMS_LDAP_UTL.TYPE_NICKNAME

  *    (VARCHAR2 )              user_id      - The user id representing

  *                                               the user entry.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_user_properties(), DBMS_LDAP_UTL.set_user_handle_properties().

  *

  ******************************************************************************

  */
  FUNCTION create_user_handle (
    user_hd OUT HANDLE,
    user_type IN PLS_INTEGER,
    user_id IN VARCHAR2
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    set_user_handle_properties

  *

  *   DESCRIPTION

  *     Configures the user handle properties.

  *

  *   SYNTAX

  *   FUNCTION set_user_handle_properties

  *   (

  *

  *   user_hd         IN  HANDLE,

  *   property_type   IN  PLS_INTEGER,

  *   property        IN  HANDLE

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (HANDLE )       user_hd           - A pointer to a handle to

  *                                               user.

  *    (PLS_INTEGER )  property_type     - The type of property that

  *                                               is passed.

  *                                             Valid values for this argument are:

  *                                                - DBMS_LDAP_UTL.SUBSCRIBER_HANDLE

  *    (HANDLE )       property          - The property describing

  *                                                the user entry.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.RESET_HANDLE                   -   When caller tries to reset

  *                                                  the existing handle

  *                                                  properties.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   Subscriber Handle need not be set in User Handle Properties

  *   if the User Handle is created with TYPE_DN or TYPE_GUID as user_type.

  *

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_user_properties().

  *

  ******************************************************************************

  */
  FUNCTION set_user_handle_properties (
    user_hd IN HANDLE,
    property_type IN PLS_INTEGER,
    property IN HANDLE
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_user_properties

  *

  *   DESCRIPTION

  *     Retrieves the user properties.

  *

  *   SYNTAX

  *   FUNCTION get_user_properties

  *   (

  *

  *   ld                IN   SESSION,

  *   user_handle       IN   HANDLE,

  *   attrs             IN   STRING_COLLECTION,

  *   ptype             IN   PLS_INTEGER,

  *   ret_pset_coll     OUT  PROPERTY_SET_COLLECTION

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from DBMS_LDAP.init() function.

  *

  *

  *   PARAMETERS

  *    (SESSION )         ld                   - A valid ldap session handle.

  *    (HANDLE )          user_handle          - The user handle

  *    (STRING_COLLECTION ) attrs              - List of Attributes that

  *                                                        need to be fetched for

  *                                                        the user.

  *    (PLS_INTEGER )                 ptype              - Type of properties to be

  *                                                        returned.

  *                                                        Valid values:

  *                                                         - DBMS_LDAP_UTL.ENTRY_PROPERITES

  *                                                         - DBMS_LDAP_UTL.NICKNAME_PROPERTY

  *    (PROPERTY_SET_COLLECTION )    ret_pset_collection - The user details

  *                                                        containing the requested

  *                                                        attributes by the caller.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.NO_SUCH_USER                   -   User doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_USER_ENTRIES          -   Multiple number of user

  *                                                  DN entries exist in the

  *                                                  directory for the given

  *                                                  user.

  *     DBMS_LDAP_UTL.INVALID_ROOT_ORCL_CTX          -    Invalid Root Oracle Context.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *     DBMS_LDAP error codes                      -    Returns proper LDAP error codes

  *                                                for unconditional failures

  *                                                while carrying out

  *                                                LDAP operations by the ldap

  *                                                server.

  *

  *

  *   USAGE

  *    This function requires a valid ldap session handle which

  *    has to be obtained from DBMS_LDAP.init() function.

  *

  *    This function requires a valid subscriber handle to be set

  *       in the user handle properties if the user type is of:

  *        - DBMS_LDAP_UTL.TYPE_NICKNAME.

  *       This function doesn't identify a NULL subscriber handle

  *       as a default subscriber.

  *       Default subscriber can be obtained from :

  *        - DBMS_LDAP_UTL.create_subscriber_handle()

  *       where a NULL subscriber_id is passed as an argument.

  *    If the user type is any of the following:

  *        - DBMS_LDAP_UTL.TYPE_GUID.

  *        - DBMS_LDAP_UTL.TYPE_DN.

  *       then the subscriber handle need not be set in the user

  *       handle properties, even if set it would be ignored.

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init(), DBMS_LDAP_UTL.create_user_handle().

  *

  ******************************************************************************

  */
  FUNCTION get_user_properties(
    ld IN SESSION,
    user_handle IN HANDLE,
    attrs IN STRING_COLLECTION,
    ptype IN PLS_INTEGER,
    ret_pset_coll OUT PROPERTY_SET_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_user_dn

  *

  *   DESCRIPTION

  *     Returns the user DN.

  *

  *   SYNTAX

  *   FUNCTION get_user_dn

  *   (

  *

  *   ld                IN     SESSION,

  *   user_handle       IN     HANDLE,

  *   dn                OUT    VARCHAR2

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from DBMS_LDAP.init() function.

  *

  *   PARAMETERS

  *    (SESSION )     ld                 - A valid ldap session handle.

  *    (HANDLE )  user_handle        - The user handle

  *    (VARCHAR2 )              dn                 - The user DN

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.NO_SUCH_USER                   -   User doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_USER_ENTRIES    -   Multiple number of user

  *                                                  DN entries exist in the

  *                                                  directory for the given

  *                                                  user.

  *     DBMS_LDAP_UTL.INVALID_ROOT_ORCL_CTX          -    Invalid Root Oracle Context.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *     DBMS_LDAP error codes                      -    Returns proper LDAP error codes

  *                                                for unconditional failures

  *                                                while carrying out

  *                                                LDAP operations by the ldap

  *                                                server.

  *

  *

  *   USAGE

  *   This function can only be called after a valid

  *   ldap session is obtained from a call to DBMS_LDAP.init().

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init().

  *

  ******************************************************************************

  */
  FUNCTION get_user_dn(
    ld IN SESSION,
    user_handle IN HANDLE,
    dn OUT VARCHAR2
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    create_group_handle

  *

  *   DESCRIPTION

  *     This function creates a group handle.

  *

  *   SYNTAX

  *   FUNCTION create_group_handle

  *   (

  *

  *   group_hd   OUT HANDLE,

  *   group_type IN  PLS_INTEGER,

  *   group_id   IN  VARCHAR2

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (HANDLE )  group_hd     - A pointer to a handle to

  *                                                   group.

  *    (PLS_INTEGER )           group_type   - The type of group id that

  *                                               is passed.

  *                                             Valid values for this argument are:

  *                                                - DBMS_LDAP_UTL.TYPE_DN

  *                                                - DBMS_LDAP_UTL.TYPE_GUID

  *                                                - DBMS_LDAP_UTL.TYPE_NICKNAME

  *    (VARCHAR2 )              group_id      - The group id representing

  *                                               the group entry.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   N/A

  *

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_group_properties(), DBMS_LDAP_UTL.set_group_handle_properties().

  *

  ******************************************************************************

  */
  FUNCTION create_group_handle (
    group_hd OUT HANDLE,
    group_type IN PLS_INTEGER,
    group_id IN VARCHAR2
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    set_group_handle_properties

  *

  *   DESCRIPTION

  *     Configures the group handle properties.

  *

  *   SYNTAX

  *   FUNCTION set_group_handle_properties

  *   (

  *

  *   group_hd       IN  HANDLE,

  *   property_type  IN  PLS_INTEGER,

  *   property       IN  HANDLE

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (HANDLE )        group_hd          - A pointer to a handle to

  *                                               group.

  *    (PLS_INTEGER )   property_type     - The type of property that

  *                                               is passed.

  *                                             Valid values for this argument are:

  *                                                - DBMS_LDAP_UTL.GROUP_HANDLE

  *    (HANDLE )        property          - The property describing

  *                                                the group entry.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.RESET_HANDLE                   -   When caller tries to reset

  *                                                  the existing handle

  *                                                  properties.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   Subscriber Handle need not be set in Group Handle Properties

  *   if the Group Handle is created with TYPE_DN or TYPE_GUID as group_type.

  *

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_group_properties().

  *

  ******************************************************************************

  */
  FUNCTION set_group_handle_properties (
    group_hd IN HANDLE,
    property_type IN PLS_INTEGER,
    property IN HANDLE
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_group_properties

  *

  *   DESCRIPTION

  *     Retrieves the group properties.

  *

  *   SYNTAX

  *   FUNCTION get_group_properties

  *   (

  *

  *   ld                IN   SESSION,

  *   group_handle      IN   HANDLE,

  *   attrs             IN   STRING_COLLECTION,

  *   ptype             IN   PLS_INTEGER,

  *   ret_pset_coll     OUT  PROPERTY_SET_COLLECTION

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *       has to be obtained from DBMS_LDAP.init() function.

  *

  *   PARAMETERS

  *    (SESSION )         ld                  - A valid ldap session handle.

  *    (HANDLE )          group_handle        - The group handle

  *    (STRING_COLLECTION ) attrs             - List of Attributes that

  *                                                        need to be fetched for

  *                                                        the group.

  *    (PLS_INTEGER )                 ptype              - Type of properties to be

  *                                                        returned.

  *                                                        Valid values:

  *                                                         - DBMS_LDAP_UTL.ENTRY_PROPERITES

  *    (PROPERTY_SET_COLLECTION )    ret_pset_coll      - The group details

  *                                                        containing the requested

  *                                                        attributes by the caller.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.NO_SUCH_GROUP                  -   Group doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_GROUP_ENTRIES         -   Multiple number of group

  *                                                  DN entries exist in the

  *                                                  directory for the given

  *                                                  group.

  *     DBMS_LDAP_UTL.INVALID_ROOT_ORCL_CTX          -    Invalid Root Oracle Context.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *     DBMS_LDAP error codes                      -    Returns proper LDAP error codes

  *                                                for unconditional failures

  *                                                while carrying out

  *                                                LDAP operations by the ldap

  *                                                server.

  *

  *

  *   USAGE

  *    This function requires a valid ldap session handle which

  *       has to be obtained from DBMS_LDAP.init() function.

  *    This function requires a valid subscriber handle to be set

  *       in the group handle properties if the group type is of:

  *        - DBMS_LDAP_UTL.TYPE_NICKNAME.

  *       This function doesn't identify a NULL subscriber handle

  *       as a default subscriber.

  *       Default subscriber can be obtained from :

  *        - DBMS_LDAP_UTL.create_subscriber_handle()

  *       where a NULL subscriber_id is passed as an argument.

  *    If the group type is any of the following:

  *        - DBMS_LDAP_UTL.TYPE_GUID.

  *        - DBMS_LDAP_UTL.TYPE_DN.

  *       then the subscriber handle need not be set in the group

  *       handle properties, even if set it would be ignored.

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init(), DBMS_LDAP_UTL.create_group_handle().

  *

  ******************************************************************************

  */
  FUNCTION get_group_properties(
    ld IN SESSION,
    group_handle IN HANDLE,
    attrs IN STRING_COLLECTION,
    ptype IN PLS_INTEGER,
    ret_pset_coll OUT PROPERTY_SET_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_group_dn

  *

  *   DESCRIPTION

  *     Returns the group DN.

  *

  *   SYNTAX

  *   FUNCTION get_group_dn

  *   (

  *

  *   ld                IN     SESSION,

  *   group_handle      IN     HANDLE,

  *   dn                OUT    VARCHAR2

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from DBMS_LDAP.init() function.

  *

  *   PARAMETERS

  *    (SESSION )     ld                 - A valid ldap session handle.

  *    (HANDLE )  group_handle        - The group handle

  *    (VARCHAR2 )              dn                 - The group DN

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.NO_SUCH_GROUP                  -   Group doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_GROUP_ENTRIES    -   Multiple number of group

  *                                                  DN entries exist in the

  *                                                  directory for the given

  *                                                  group.

  *     DBMS_LDAP_UTL.INVALID_ROOT_ORCL_CTX          -    Invalid Root Oracle Context.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *     DBMS_LDAP error codes                      -    Returns proper LDAP error codes

  *                                                for unconditional failures

  *                                                while carrying out

  *                                                LDAP operations by the ldap

  *                                                server.

  *

  *

  *   USAGE

  *   This function can only be called after a valid

  *   ldap session is obtained from a call to DBMS_LDAP.init().

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init().

  *

  ******************************************************************************

  */
  FUNCTION get_group_dn(
    ld IN SESSION,
    group_handle IN HANDLE,
    dn OUT VARCHAR2
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    authenticate_user

  *

  *   DESCRIPTION

  *     This function Authenticates the user against OiD.

  *

  *   SYNTAX

  *    FUNCTION authenticate_user

  *    (

  *

  *    ld                  IN SESSION,

  *    user_handle         IN HANDLE,

  *    auth_type           IN PLS_INTEGER,

  *    credentials         IN VARCHAR2,

  *    binary_credentials  IN RAW

  *

  *    )

  *    RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from init() function.

  *

  *   PARAMETERS

  *     (SESSION )       ld                  - A valid ldap session handle.

  *     (HANDLE )    user                - User handle.

  *     (PLS_INTEGER )             auth_type           - Type of authentication,

  *                                                      Valid values are:

  *                                                       - DBMS_LDAP_UTL.AUTH_SIMPLE

  *     (VARCHAR2 )                credentials         - The user credentials,

  *                                                       Valid values :

  *                                                       for DBMS_LDAP_UTL.AUTH_SIMPLE - password

  *     (RAW )                     binary_credentials  - The binary credentials,

  *                                                       Valid values :

  *                                                       for DBMS_LDAP_UTL.AUTH_SIMPLE - NULL

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -   Authentication failed.

  *     DBMS_LDAP_UTL.NO_SUCH_USER                   -   User doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_USER_ENTRIES          -   Multiple number of user DN

  *                                                entries exist in the

  *                                                directory for the given user.

  *     DBMS_LDAP_UTL.INVALID_SUBSCRIBER_ORCL_CTX    -   Invalid Subscriber Oracle Context.

  *     DBMS_LDAP_UTL.NO_SUCH_SUBSCRIBER             -   Subscriber doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_SUBSCRIBER_ENTRIES    -   Multiple number of subscriber

  *                                                DN entries exist in the

  *                                                directory for the given

  *                                                subscriber.

  *     DBMS_LDAP_UTL.INVALID_ROOT_ORCL_CTX          -   Invalid Root Oracle Context.

  *     DBMS_LDAP_UTL.ACCT_TOTALLY_LOCKED_EXCP       -   User account is locked.

  *     DBMS_LDAP_UTL.AUTH_PASSWD_CHANGE_WARN        -   Password should be changed.

  *     DBMS_LDAP_UTL.AUTH_FAILURE_EXCP              -   Authentication failed.

  *     DBMS_LDAP_UTL.PWD_EXPIRED_EXCP               -   User password has expired.

  *     DBMS_LDAP_UTL.PWD_GRACELOGIN_WARN             -   Grace login for User.

  *     LDAP error codes                      -   Returns proper DBMS_LDAP error

  *                                               codes for unconditional

  *                                               failures while carrying out

  *                                               LDAP operations by the ldap

  *                                               server.

  *

  *   USAGE

  *   This function can only be called after a valid

  *   ldap session is obtained from a call to DBMS_LDAP.init().

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init(), DBMS_LDAP_UTL.create_user_handle().

  *

  ****************************************************************************

  */
  FUNCTION authenticate_user(
    ld IN SESSION,
    user_handle IN HANDLE,
    auth_type IN PLS_INTEGER,
    credentials IN VARCHAR2,
    binary_credentials IN RAW
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_user_props_and_auth

  *

  *   DESCRIPTION

  *     This function Authenticates the user against OiD.

  *

  *   SYNTAX

  *    FUNCTION get_user_props_and_auth

  *    (

  *

  *    ld                  IN   SESSION,

  *    user_handle         IN   HANDLE,

  *    auth_type           IN   PLS_INTEGER,

  *    attrs               IN   STRING_COLLECTION,

  *    credentials         IN   VARCHAR2,

  *    binary_credentials  IN   RAW,

  *    ret_pset_coll       OUT  PROPERTY_SET_COLLECTION

  *

  *    )

  *    RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from init() function.

  *

  *   PARAMETERS

  *     (SESSION )       ld                  - A valid ldap session handle.

  *     (HANDLE )    user                - User handle.

  *     (PLS_INTEGER )             auth_type           - Type of authentication,

  *                                                      Valid values are:

  *                                                       - DBMS_LDAP_UTL.AUTH_SIMPLE

  *     (STRING_COLLECTION)        attrs               - List of required attributes

  *                                                      of user.

  *     (VARCHAR2 )                credentials         - The user credentials,

  *                                                       Valid values :

  *                                                       for DBMS_LDAP_UTL.AUTH_SIMPLE - password

  *     (RAW )                     binary_credentials  - The binary credentials,

  *                                                       Valid values :

  *                                                       for DBMS_LDAP_UTL.AUTH_SIMPLE - NULL

  *    (PROPERTY_SET_COLLECTION )  ret_pset_coll       - The user details

  *                                                        containing the attributes

  *                                                        requested by the caller.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -   Authentication failed.

  *     DBMS_LDAP_UTL.NO_SUCH_USER                   -   User doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_USER_ENTRIES          -   Multiple number of user DN

  *                                                entries exist in the

  *                                                directory for the given user.

  *     DBMS_LDAP_UTL.INVALID_SUBSCRIBER_ORCL_CTX    -   Invalid Subscriber Oracle Context.

  *     DBMS_LDAP_UTL.NO_SUCH_SUBSCRIBER             -   Subscriber doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_SUBSCRIBER_ENTRIES    -   Multiple number of subscriber

  *                                                DN entries exist in the

  *                                                directory for the given

  *                                                subscriber.

  *     DBMS_LDAP_UTL.INVALID_ROOT_ORCL_CTX          -   Invalid Root Oracle Context.

  *     DBMS_LDAP_UTL.ACCT_TOTALLY_LOCKED_EXCP       -   User account is locked.

  *     DBMS_LDAP_UTL.AUTH_PASSWD_CHANGE_WARN        -   Password should be changed.

  *     DBMS_LDAP_UTL.AUTH_FAILURE_EXCP              -   Authentication failed.

  *     DBMS_LDAP_UTL.PWD_EXPIRED_EXCP               -   User password has expired.

  *     DBMS_LDAP_UTL.PWD_GRACELOGIN_WARN             -   Grace login for User.

  *     LDAP error codes                      -   Returns proper DBMS_LDAP error

  *                                               codes for unconditional

  *                                               failures while carrying out

  *                                               LDAP operations by the ldap

  *                                               server.

  *

  *   USAGE

  *   This function can only be called after a valid

  *   ldap session is obtained from a call to DBMS_LDAP.init().

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init(), DBMS_LDAP_UTL.create_user_handle().

  *

  ****************************************************************************

  */
  FUNCTION get_user_props_and_auth(
    ld IN SESSION,
    user_handle IN HANDLE,
    auth_type IN PLS_INTEGER,
    attrs IN STRING_COLLECTION,
    credentials IN VARCHAR2,
    binary_credentials IN RAW,
    ret_pset_coll OUT PROPERTY_SET_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    authenticate_user_ext

  *

  *   DESCRIPTION

  *     This function Authenticates the user against OiD.

  *

  *   SYNTAX

  *    FUNCTION authenticate_user_ext

  *    (

  *

  *    ld                  IN SESSION,

  *    user_handle         IN HANDLE,

  *    auth_type           IN PLS_INTEGER,

  *    password_attr       IN VARCHAR2,

  *    password            IN VARCHAR2,

  *

  *    )

  *    RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from init() function.

  *

  *   PARAMETERS

  *     (SESSION )       ld                  - A valid ldap session handle.

  *     (HANDLE )    user                - User handle.

  *     (PLS_INTEGER )             auth_type           - Type of authentication,

  *                                                      Valid values are:

  *                                                       - DBMS_LDAP_UTL.AUTH_EXTENDED

  *     (VARCHAR2 )                password_attr       - The password attribute

  *                                                       for comparision.

  *     (VARCHAR2)                 password            - User Credentials.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -   Authentication failed.

  *     DBMS_LDAP_UTL.NO_SUCH_USER                   -   User doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_USER_ENTRIES          -   Multiple number of user DN

  *                                                entries exist in the

  *                                                directory for the given user.

  *     DBMS_LDAP_UTL.INVALID_SUBSCRIBER_ORCL_CTX    -   Invalid Subscriber Oracle Context.

  *     DBMS_LDAP_UTL.NO_SUCH_SUBSCRIBER             -   Subscriber doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_SUBSCRIBER_ENTRIES    -   Multiple number of subscriber

  *                                                DN entries exist in the

  *                                                directory for the given

  *                                                subscriber.

  *     DBMS_LDAP_UTL.INVALID_ROOT_ORCL_CTX          -   Invalid Root Oracle Context.

  *     DBMS_LDAP_UTL.ACCT_TOTALLY_LOCKED_EXCP       -   User account is locked.

  *     DBMS_LDAP_UTL.AUTH_PASSWD_CHANGE_WARN        -   Password should be changed.

  *     DBMS_LDAP_UTL.AUTH_FAILURE_EXCP              -   Authentication failed.

  *     DBMS_LDAP_UTL.PWD_EXPIRED_EXCP               -   User password has expired.

  *     DBMS_LDAP_UTL.PWD_GRACELOGIN_WARN             -   Grace login for User.

  *     LDAP error codes                      -   Returns proper DBMS_LDAP error

  *                                               codes for unconditional

  *                                               failures while carrying out

  *                                               LDAP operations by the ldap

  *                                               server.

  *

  *   USAGE

  *   This function can only be called after a valid

  *   ldap session is obtained from a call to DBMS_LDAP.init().

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init(), DBMS_LDAP_UTL.create_user_handle().

  *

  ****************************************************************************

  */
  FUNCTION authenticate_user_ext(
    ld IN SESSION,
    user_handle IN HANDLE,
    auth_type IN PLS_INTEGER,
    password_attr IN VARCHAR2,
    password IN VARCHAR2
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_group_membership

  *

  *   DESCRIPTION

  *     This function returns the list of groups of which the user

  *     is a member.

  *

  *   SYNTAX

  *    FUNCTION get_group_membership

  *    (

  *

  *    ld           IN  SESSION,

  *    user_handle  IN  HANDLE,

  *    nested       IN  PLS_INTEGER,

  *    attr_list    IN  STRING_COLLECTION,

  *    ret_groups   OUT PROPERTY_SET_COLLECTION,

  *

  *    )

  *    RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from DBMS_LDAP.init() function.

  *

  *   PARAMETERS

  *    (SESSION )            ld          - LDAP session handle.

  *    (HANDLE )         user_handle - User handle.

  *    (PLS_INTEGER )                  nested      - Type of membership the

  *                                                 user holds in groups

  *                                                 valid values are :

  *                                                  DBMS_LDAP_UTL.NESTED_MEMBERSHIP

  *                                                  DBMS_LDAP_UTL.DIRECT_MEMBERSHIP

  *    (STRING_COLLECTION )        attr_list  - List of attributes to be

  *                                                returned.

  *    (PROPERTY_SET_COLLECTION )  ret_groups - Pointer to pointer to a

  *                                               array of group entries.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS              -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR        -    Other Error

  *

  *

  *   USAGE

  *   This function can only be called after a valid

  *   ldap session is obtained from a call to DBMS_LDAP.init().

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init().

  *

  ******************************************************************************

  */
  FUNCTION get_group_membership (
    ld IN SESSION,
    user_handle IN HANDLE,
    nested IN PLS_INTEGER,
    attr_list IN STRING_COLLECTION,
    ret_groups OUT PROPERTY_SET_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    free_handle

  *

  *   DESCRIPTION

  *     Frees the memory associated with the handle.

  *

  *   SYNTAX

  *   PROCEDURE free_handle

  *   (

  *

  *   handle    IN OUT  HANDLE

  *

  *   );

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (HANDLE *)        handle         - Pointer to handle.

  *

  *   RETURNS

  *     NONE

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.create_user_handle(), DBMS_LDAP_UTL.create_subscriber_handle(), DBMS_LDAP_UTL.create_group_handle().

  *

  ******************************************************************************

  */
  PROCEDURE free_handle (handle IN OUT HANDLE);
  /**

  *******************************************************************************

  *   NAME

  *    check_group_membership

  *

  *   DESCRIPTION

  *     This function checks the membership of the user to a group.

  *

  *   SYNTAX

  *    FUNCTION check_group_membership

  *    (

  *

  *    ld             IN  SESSION,

  *    user_handle    IN  HANDLE,

  *    group_handle   IN  HANDLE,

  *    nested         IN  PLS_INTEGER

  *

  *    )

  *    RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from DBMS_LDAP.init() function.

  *

  *   PARAMETERS

  *    (SESSION )     ld                 - LDAP session handle.

  *    (HANDLE )  user_handle        - User handle.

  *    (HANDLE )  group_handle       - Group Handle.

  *    (PLS_INTEGER )           nested             - Type of membership the

  *                                                user holds in groups

  *                                                valid values are :

  *                                                 DBMS_LDAP_UTL.NESTED_MEMBERSHIP

  *                                                 DBMS_LDAP_UTL.DIRECT_MEMBERSHIP

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   If user is a member.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.NO_GROUP_MEMBERSHIP            -   If user is not a member.

  *

  *

  *   USAGE

  *   This function can only be called after a valid

  *   ldap session is obtained from a call to DBMS_LDAP_UTL.init().

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_group_membership().

  *

  ******************************************************************************

  */
  FUNCTION check_group_membership(
    ld IN SESSION,
    user_handle IN HANDLE,
    group_handle IN HANDLE,
    nested IN PLS_INTEGER
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_property_names

  *

  *   DESCRIPTION

  *     Retrieves the list of property names in the propertyset.

  *

  *   SYNTAX

  *   FUNCTION get_property_names

  *   (

  *

  *   pset                   IN   PROPERTY_SET,

  *   property_names         OUT  STRING_COLLECTION

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (PROPERTY_SET )      pset           - PropertySet in the PropertySet collection

  *                                                        returned from any of

                                                           the following functions:

  *                                                         - DBMS_LDAP_UTL.get_group_membership()

  *                                                         - DBMS_LDAP_UTL.get_subscriber_properties()

  *                                                         - DBMS_LDAP_UTL.get_user_properties()

  *                                                         - DBMS_LDAP_UTL.get_group_properties()

  *    (STRING_COLLECTION)  property_names   - List of Property Names associated

  *                                            with PropertySet.

  *

  *   RETURNS

  *

  *    DBMS_LDAP_UTL.SUCCESS             - On successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR        -   Invalid input parameters.

  *    DBMS_LDAP_UTL.GENERAL_ERROR       - On Error.

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_property_values().

  *

  ******************************************************************************

  */
  FUNCTION get_property_names(
    pset IN PROPERTY_SET,
    property_names OUT STRING_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_property_values

  *

  *   DESCRIPTION

  *     Retrieves the property values(strings) for a given property name

  *     and property.

  *

  *   SYNTAX

  *   FUNCTION get_property_values

  *   (

  *

  *   pset              IN   PROPERTY_SET,

  *   property_name     IN   VARCHAR2,

  *   property_values   OUT  STRING_COLLECTION

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (VARCHAR2 )       property_name        - Property name.

  *    (PROPERTY_SET )   pset                 - PropertySet in PropertySet Collection obtained from

  *                                             any of the following function returns:

  *                                               - DBMS_LDAP_UTL.get_group_membership()

  *                                               - DBMS_LDAP_UTL.get_subscriber_properties()

  *                                               - DBMS_LDAP_UTL.get_user_properties()

  *                                               - DBMS_LDAP_UTL.get_group_properties()

  *    (STRING_COLLECTION ) property_values   - List of property values(strings).

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                  - On successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR            - On failure.

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_property_values_len().

  *

  ******************************************************************************

  */
  FUNCTION get_property_values(
    pset IN PROPERTY_SET,
    property_name IN VARCHAR2,
    property_values OUT STRING_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_property_values_len

  *

  *   DESCRIPTION

  *     Retrieves the binary property values for a given property name

  *     and property.

  *

  *   SYNTAX

  *   FUNCTION get_property_values_len

  *   (

  *

  *   pset              IN   PROPERTY_SET,

  *   property_name     IN   VARCHAR2,

  *   property_values   OUT  BINVAL_COLLECTION

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (VARCHAR2 )       property_name        - Property name.

  *    (PROPERTY_SET )   pset                 - PropertySet in PropertySet Collection obtained from

  *                                             any of the following function returns:

  *                                               - DBMS_LDAP_UTL.get_group_membership()

  *                                               - DBMS_LDAP_UTL.get_subscriber_properties()

  *                                               - DBMS_LDAP_UTL.get_user_properties()

  *                                               - DBMS_LDAP_UTL.get_group_properties()

  *    (BINVAL_COLLECTION ) property_values   - List of binary property values.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                  - On successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR            - On failure.

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_property_values().

  *

  ******************************************************************************

  */
  FUNCTION get_property_values_len(
    pset IN PROPERTY_SET,
    property_name IN VARCHAR2,
    property_values OUT BINVAL_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_property_values_blob

  *

  *   DESCRIPTION

  *     Retrieves the binary property values for a given property name

  *     and property.

  *

  *   SYNTAX

  *   FUNCTION get_property_values_blob

  *   (

  *

  *   pset              IN   PROPERTY_SET,

  *   property_name     IN   VARCHAR2,

  *   property_values   OUT  BLOB_COLLECTION

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (VARCHAR2 )       property_name        - Property name.

  *    (PROPERTY_SET )   pset                 - PropertySet in PropertySet Collection obtained from

  *                                             any of the following function returns:

  *                                               - DBMS_LDAP_UTL.get_group_membership()

  *                                               - DBMS_LDAP_UTL.get_subscriber_properties()

  *                                               - DBMS_LDAP_UTL.get_user_properties()

  *                                               - DBMS_LDAP_UTL.get_group_properties()

  *    (BLOB_COLLECTION ) property_values     - List of binary property values.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                  - On successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR            - On failure.

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_property_values().

  *

  ******************************************************************************

  */
  FUNCTION get_property_values_blob(
    pset IN PROPERTY_SET,
    property_name IN VARCHAR2,
    property_values OUT BLOB_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    property_value_free_blob

  *

  *   DESCRIPTION

  *     Frees the property value memory

  *

  *   SYNTAX

  *   PROCEDURE property_value_free_blob

  *   (

  *

  *   vals              IN OUT   BLOB_COLLECTION

  *

  *   );

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (BLOB_COLLECTION )       vals        - Property values obtained from

  *                                           get_property_values_len

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                  - On successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR            - On failure.

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_property_values_len().

  *

  ******************************************************************************

  */
  PROCEDURE property_value_free_blob(vals IN OUT BLOB_COLLECTION);
  /**

  *******************************************************************************

  *   NAME

  *    locate_subscriber_for_user

  *

  *   DESCRIPTION

  *     Retrieves the subsciber for the given user and returns a handle to it.

  *

  *   SYNTAX

  *   FUNCTION locate_subscriber_for_user

  *   (

  *

  *   ld                IN  SESSION,

  *   user_handle       IN  HANDLE,

  *   subscriber_handle OUT HANDLE

  *

  *   )

  *   RETURN PLS_INTEGER

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from ldap_init() function.

  *

  *   PARAMETERS

  *    (SESSION )           ld                 - A valid ldap session handle.

  *    (HANDLE )            user_handle        - The user handle

  *    (HANDLE )            subscriber_handle  - The subscriber handle.



  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.NO_SUCH_SUBSCRIBER             -   Subscriber doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_SUBSCRIBER_ENTRIES    -   Multiple number of subscriber

  *                                                  DN entries exist in the

  *                                                  directory for the given

  *                                                  subscriber.

  *     DBMS_LDAP_UTL.NO_SUCH_USER                   -   User doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_USER_ENTRIES          -   Multiple number of user

  *                                                  DN entries exist in the

  *                                                  directory for the given

  *                                                  user.

  *     DBMS_LDAP_UTL.SUBSCRIBER_NOT_FOUND           -   Unable to locate subscriber

  *                                                      for the given user.

  *     DBMS_LDAP_UTL.INVALID_ROOT_ORCL_CTX          -    Invalid Root Oracle Context.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *     LDAP error codes                      -    Returns proper LDAP error codes

  *                                                for unconditional failures

  *                                                while carrying out

  *                                                LDAP operations by the ldap

  *                                                server.

  *

  *

  *   USAGE

  *   This function can only be called after a valid

  *   ldap session is obtained from a call to ldap_init().

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init(), DBMS_LDAP_UTL.create_user_handle().

  *

  ******************************************************************************

  */
  FUNCTION locate_subscriber_for_user (
    ld IN SESSION,
    user_handle IN HANDLE,
    subscriber_handle OUT HANDLE
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    set_user_properties

  *

  *   DESCRIPTION

  *     Modifies the properties of a user.

  *

  *   SYNTAX

  *   FUNCTION set_user_properties

  *   (

  *

  *   ld                IN  SESSION,

  *   user_handle       IN  HANDLE,

  *   pset_type         IN  PLS_INTEGER,

  *   mod_pset          IN  PROPERTY_SET,

  *   mod_op            IN  PLS_INTEGER

  *

  *   )

  *   RETURN PLS_INTEGER

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from ldap_init() function.

  *

  *   PARAMETERS

  *    (SESSION )           ld                 - A valid ldap session handle.

  *    (HANDLE )            user_handle        - The user handle

  *    (PLS_INTEGER)        pset_type          - Type of PropertySet being

  *                                              Modified:

  *                                              Valid Values:

  *                                               - ENTRY_PROPERTIES

  *    (PROPERTY_SET)       mod_pset           - Data Structure containing

  *                                              Modify operations to be

  *                                              performed on PropertySet.

  *    (PLS_INTEGER)        mod_op             - Type of Modify operation to be

  *                                              performed on the PropertySet:

  *                                              Valid Values are:

  *                                               - ADD_PROPERTYSET

  *                                               - MODIFY_PROPERTYSET

  *                                               - DELETE_PROPERTYSET

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.NO_SUCH_USER                   -   User doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_USER_ENTRIES          -   Multiple number of user

  *                                                  DN entries exist in the

  *                                                  directory for the given

  *                                                  user.

  *     DBMS_LDAP_UTL.INVALID_ROOT_ORCL_CTX          -    Invalid Root Oracle Context.

  *     DBMS_LDAP_UTL.PWD_MIN_LENGTH_ERROR          -  Password length is less

  *                                                    than minimum required

  *                                                    length.

  *     DBMS_LDAP_UTL.PWD_NUMERIC_ERROR             -  Password must contain

  *                                                    numeric characters.

  *     DBMS_LDAP_UTL.PWD_NULL_ERROR                -  Password cannot be NULL.

  *     DBMS_LDAP_UTL.PWD_INHISTORY_ERROR           -  Password cannot not be

  *                                                    the same as the one

  *                                                    that is being replaced.

  *     DBMS_LDAP_UTL.PWD_ILLEGALVALUE_ERROR        -  Password contains

  *                                                    illegal characters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *     LDAP error codes                      -    Returns proper LDAP error codes

  *                                                for unconditional failures

  *                                                while carrying out

  *                                                LDAP operations by the ldap

  *                                                server.

  *

  *

  *   USAGE

  *   This function can only be called after a valid

  *   ldap session is obtained from a call to ldap_init().

  *

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init(), DBMS_LDAP_UTL.get_user_properties().

  *

  ******************************************************************************

  */
  FUNCTION set_user_properties (
    ld IN SESSION,
    user_handle IN HANDLE,
    pset_type IN PLS_INTEGER,
    mod_pset IN PROPERTY_SET,
    mod_op IN PLS_INTEGER
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    create_mod_propertyset

  *

  *   DESCRIPTION

  *     Creates a MOD_PROPERTY_SET data structure.

  *

  *   SYNTAX

  *   FUNCTION create_mod_propertyset

  *   (

  *

  *   pset_type         IN   PLS_INTEGER,

  *   pset_name         IN   VARCHAR2,

  *   mod_pset          OUT  MOD_PROPERTY_SET

  *

  *   )

  *   RETURN PLS_INTEGER

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from ldap_init() function.

  *

  *   PARAMETERS

  *    (PLS_INTEGER)        pset_type          - Type of PropertySet being

  *                                              Modified:

  *                                              Valid Values:

  *                                               - ENTRY_PROPERTIES

  *    (VARCHAR2)           pset_name          - Name of PropertySet.

  *                                              This can be NULL if

  *                                              ENTRY_PROPERTIES are being

  *                                              modified.

  *    (MOD_PROPERTY_SET)       mod_pset           - Data Structure to contain

  *                                              Modify operations to be

  *                                              performed on PropertySet.

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.populate_mod_propertyset().

  *

  ******************************************************************************

  */
  FUNCTION create_mod_propertyset (
    pset_type IN PLS_INTEGER,
    pset_name IN VARCHAR2,
    mod_pset OUT MOD_PROPERTY_SET
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    populate_mod_propertyset

  *

  *   DESCRIPTION

  *     Populates the MOD_PROPERTY_SET data structure.

  *

  *   SYNTAX

  *   FUNCTION populate_mod_propertyset

  *   (

  *

  *   mod_pset          IN   MOD_PROPERTY_SET,

  *   property_mod_op   IN   PLS_INTEGER,

  *   property_name     IN   VARCHAR2,

  *   property_values   IN   STRING_COLLECTION

  *

  *   )

  *   RETURN PLS_INTEGER

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from ldap_init() function.

  *

  *   PARAMETERS

  *    (MOD_PROPERTY_SET)       mod_pset           - Mod-PropertySet data structure.

  *    (PLS_INTEGER)        property_mod_op    - Type of Modify operation

  *                                              to be performed on a Property.

  *                                              Valid Values:

  *                                               - ADD_PROPERTY

  *                                               - REPLACE_PROPERTY

  *                                               - DELETE_PROPERTY

  *    (VARCHAR2)           property_name      - Name of the Property.

  *    (STRING_COLLECTION)  propery_values     - Values associated to the

  *                                              Property.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   N/A

  *

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.create_mod_propertyset().

  *

  ******************************************************************************

  */
  FUNCTION populate_mod_propertyset (
    mod_pset IN MOD_PROPERTY_SET,
    property_mod_op IN PLS_INTEGER,
    property_name IN VARCHAR2,
    property_values IN STRING_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    free_mod_propertyset

  *

  *   DESCRIPTION

  *     Frees the MOD_PROPERTY_SET data structure.

  *

  *   SYNTAX

  *   PROCEDURE free_mod_propertyset

  *   (

  *

  *   mod_pset          IN   MOD_PROPERTY_SET

  *

  *   );

  *

  *   REQUIRES

  *   NONE

  *

  *   PARAMETERS

  *    (PROPERTY_SET)       mod_pset           - Mod-PropertySet data structure.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.create_mod_propertyset().

  *

  ******************************************************************************

  */
  PROCEDURE free_mod_propertyset (mod_pset IN OUT MOD_PROPERTY_SET);
  /**

  *******************************************************************************

  *   NAME

  *    get_user_extended_properties

  *

  *   DESCRIPTION

  *     Retrives user extended Properties.

  *

  *   SYNTAX

  *   FUNCTION get_user_extended_properties

  *   (

  *

  *   ld                IN   SESSION,

  *   user_handle       IN   HANDLE,

  *   attrs             IN   STRING_COLLECTION,

  *   ptype             IN   PLS_INTEGER,

  *   filter            IN   VARCHAR2,

  *   ret_pset_coll     OUT  PROPERTY_SET_COLLECTION

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *    This function requires a valid ldap session handle which

  *    has to be obtained from ldap_init() function.

  *

  *   PARAMETERS

  *    (SESSION )         ld                   - A valid ldap session handle.

  *    (HANDLE )          user_handle          - The user handle

  *    (STRING_COLLECTION ) attrs              - List of Attributes that

  *                                                        need to be fetched for

  *                                                        the user.

  *    (PLS_INTEGER )                 ptype              - Type of properties to be

  *                                                        returned.

  *                                                        Valid values:

  *                                                         - DBMS_LDAP_UTL.EXTPROPTYPE_RAD

  *    (VARCHAR2)                    filter              - Ldap filter to further

  *                                                        refine the user properties

  *                                                        returned by function.

  *    (PROPERTY_SET_COLLECTION )    ret_pset_collection - The user details

  *                                                        containing the requested

  *                                                        attributes by the caller.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.NO_SUCH_USER                   -   User doesn't exist.

  *     DBMS_LDAP_UTL.MULTIPLE_USER_ENTRIES          -   Multiple number of user

  *                                                  DN entries exist in the

  *                                                  directory for the given

  *                                                  user.

  *     USER_PROPERTY_NOT_FOUND                      -    User Extended Property

  *                                                       doesn't exist.

  *     DBMS_LDAP_UTL.INVALID_ROOT_ORCL_CTX          -    Invalid Root Oracle Context.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *     DBMS_LDAP error codes                      -    Returns proper LDAP error codes

  *                                                for unconditional failures

  *                                                while carrying out

  *                                                LDAP operations by the ldap

  *                                                server.

  *

  *   USAGE

  *   This function can only be called after a valid

  *   ldap session is obtained from a call to DBMS_LDAP.init().

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP.init(), DBMS_LDAP_UTL.get_user_properties().

  *

  ******************************************************************************

  */
  FUNCTION get_user_extended_properties (
    ld IN SESSION,
    user_handle IN HANDLE,
    attrs IN STRING_COLLECTION,
    ptype IN PLS_INTEGER,
    filter IN VARCHAR2,
    ret_pset_coll OUT PROPERTY_SET_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    normalize_dn_with_case

  *

  *   DESCRIPTION

  *     Normalizes the given DN.

  *

  *   SYNTAX

  *    FUNCTION normalize_dn_with_case

  *    (

  *

  *    dn              IN  VARCHAR2,

  *    lower_case      IN  PLS_INTEGER,

  *    norm_dn         OUT VARCHAR2

  *

  *    )

  *    RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *     (VARCHAR2 )                  dn                - DN.

  *     (PLS_INTEGER )               lower_case        - If set to 1 : The

  *                                                         normalized DN would

  *                                                         be returned in

  *                                                         lower case.

  *                                                      If set to 0 : The case

  *                                                         would be preserved

  *                                                         in the normalized

  *                                                         DN string.

  *

  *     (VARCHAR2 )                  norm_dn           - Normalized DN.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -   On failure.

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   N/A

  *

  ****************************************************************************

  */
  FUNCTION normalize_dn_with_case (
    dn IN VARCHAR2,
    lower_case IN PLS_INTEGER,
    norm_dn OUT VARCHAR2
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    create_service_handle

  *

  *   DESCRIPTION

  *     This function creates a service handle.

  *

  *   SYNTAX

  *   FUNCTION create_service_handle

  *   (

  *

  *   service_handle   OUT HANDLE,

  *   service_type     IN  PLS_INTEGER,

  *   service_id       IN  VARCHAR2

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (HANDLE )             service_handle    - A pointer to a handle to

  *                                                   service.

  *    (PLS_INTEGER )           service_type   - The type of service id that

  *                                               is passed.

  *                                             Valid values for this argument are:

  *                                                - DBMS_LDAP_UTL.TYPE_DN

  *    (VARCHAR2 )              service_id      - The service id representing

  *                                               the service entry.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_subscribed_users().

  *

  ******************************************************************************

  */
  FUNCTION create_service_handle (
    service_handle OUT HANDLE,
    service_type IN PLS_INTEGER,
    service_id IN VARCHAR2
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_subscribed_users

  *

  *   DESCRIPTION

  *     This function retrieves all the users subscribed to a service.

  *

  *   SYNTAX

  *   FUNCTION get_subscribed_users

  *   (

  *

  *   ld              IN  SESSION,

  *   service_handle  IN  HANDLE,

  *   users           OUT STRING_COLLECTION

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *

  *    (SESSION )         ld             - A valid ldap session handle.

  *

  *    (HANDLE )  service_handle         - A pointer to a handle to

  *                                                   service.

  *    (STRING_COLLECTION )      users   - List of users subscribed to a service.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.NO_SUCH_SERVICE                -   Service doesn't exist.

  *     DBMS_LDAP_UTL.NO_USER_SUBSCRIPTIONS          -   No users have been

  *                                                      subscribed for this

  *                                                      service.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.check_user_subscription(), DBMS_LDAP_UTL.subscribe_user(), DBMS_LDAP_UTL.unsubscribe_user().

  *

  ******************************************************************************

  */
  FUNCTION get_subscribed_users (
    ld IN SESSION,
    service_handle IN HANDLE,
    users OUT STRING_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_subscribed_services

  *

  *   DESCRIPTION

  *     This function retrieves all the services to which a user is subscribed.

  *

  *   SYNTAX

  *   FUNCTION get_subscribed_services

  *   (

  *

  *   ld           IN  SESSION,

  *   user_handle  IN  HANDLE,

  *   services     OUT STRING_COLLECTION

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *

  *    (SESSION )             ld              - A valid ldap session handle.

  *

  *    (HANDLE )              user_handle     - A pointer to a handle to

  *                                                   user.

  *    (STRING_COLLECTION )   services        - List of services to which a user is subscribed.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.NO_SUBSCRIPTIONS_TO_SERVICES   -   User hasen't been

  *                                                      subscribed to any

  *                                                      services.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_available_services().

  *

  ******************************************************************************

  */
  FUNCTION get_subscribed_services (
    ld IN SESSION,
    user_handle IN HANDLE,
    services OUT STRING_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    get_available_services

  *

  *   DESCRIPTION

  *     This function retrieves all the Distinguished Names of services under

  *     a subscriber.

  *

  *   SYNTAX

  *   FUNCTION get_available_services

  *   (

  *

  *   ld                 IN  SESSION,

  *   subscriber_handle  IN  HANDLE,

  *   services           OUT STRING_COLLECTION

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *    (SESSION )             ld                    - A valid ldap session handle.

  *    (HANDLE )              subscriber_handle     - A pointer to a handle to

  *                                                   subscriber.

  *    (STRING_COLLECTION )   services      - List of services under a subscriber.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.NO_SERVICES_INSTALLED          -   No services are

  *                                                      available for this

  *                                                      Subscriber.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.get_subscribed_services().

  *

  ******************************************************************************

  */
  FUNCTION get_available_services (
    ld IN SESSION,
    subscriber_handle IN HANDLE,
    services OUT STRING_COLLECTION
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    check_user_subscription

  *

  *   DESCRIPTION

  *     This function checks if a user is subscribed to a service.

  *

  *   SYNTAX

  *   FUNCTION check_user_subscription

  *   (

  *

  *   ld             IN  SESSION,

  *   user_handle    IN  HANDLE,

  *   service_handle IN  HANDLE

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *

  *    (SESSION )         ld      - A valid ldap session handle.

  *

  *    (HANDLE )  user_handle     - A pointer to a handle to

  *                                                   user.

  *    (HANDLE )  service_handle  - A pointer to a handle to

  *                                                   service.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.USER_NOT_SUBSCRIBED            -   User is not subscribed

  *                                                      to the Service.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.subscribe_user(), DBMS_LDAP_UTL.unsubscribe_user().

  *

  ******************************************************************************

  */
  FUNCTION check_user_subscription (
    ld IN SESSION,
    user_handle IN HANDLE,
    service_handle IN HANDLE
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    subscribe_user

  *

  *   DESCRIPTION

  *     This function subscribes a user to a service.

  *

  *   SYNTAX

  *   FUNCTION subscribe_user

  *   (

  *

  *   ld             IN  SESSION,

  *   user_handle    IN  HANDLE,

  *   service_handle IN  HANDLE

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *

  *    (SESSION )         ld      - A valid ldap session handle.

  *

  *    (HANDLE )  user_handle     - A pointer to a handle to

  *                                                   user.

  *    (HANDLE )  service_handle  - A pointer to a handle to

  *                                                   service.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.INVALID_SERVICE_SCHEMA         -   Unable to subscribe

  *                                                      the user due to

  *                                                      invalid service schema

  *                                                      in Subscriber Oracle

  *                                                      Context.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.unsubscribe_user(), DBMS_LDAP_UTL.check_user_subscription().

  *

  ******************************************************************************

  */
  FUNCTION subscribe_user (
    ld IN SESSION,
    user_handle IN HANDLE,
    service_handle IN HANDLE
  ) RETURN PLS_INTEGER;
  /**

  *******************************************************************************

  *   NAME

  *    unsubscribe_user

  *

  *   DESCRIPTION

  *     This function unsubscribes a user from a service.

  *

  *   SYNTAX

  *   FUNCTION unsubscribe_user

  *   (

  *

  *   ld             IN  SESSION,

  *   user_handle    IN  HANDLE,

  *   service_handle IN  HANDLE

  *

  *   )

  *   RETURN PLS_INTEGER;

  *

  *   REQUIRES

  *

  *   PARAMETERS

  *

  *    (SESSION )         ld      - A valid ldap session handle.

  *

  *    (HANDLE )  user_handle     - A pointer to a handle to

  *                                                   user.

  *    (HANDLE )  service_handle  - A pointer to a handle to

  *                                                   service.

  *

  *   RETURNS

  *

  *     DBMS_LDAP_UTL.SUCCESS                        -   On a successful completion.

  *     DBMS_LDAP_UTL.PARAM_ERROR                    -   Invalid input parameters.

  *     DBMS_LDAP_UTL.GENERAL_ERROR                  -    Other Error

  *

  *

  *   USAGE

  *   N/A

  *

  *   EXAMPLES

  *

  *   SEE

  *   DBMS_LDAP_UTL.subscribe_user().

  *

  ******************************************************************************

  */
  FUNCTION unsubscribe_user (
    ld IN SESSION,
    user_handle IN HANDLE,
    service_handle IN HANDLE
  ) RETURN PLS_INTEGER;
  -- Error Code Constants
  -- Except for DBMS_LDAP_UTL.SUCCESS all error codes are negative,
  -- (this is to distinguish them from DBMS_LDAP error codes)
  -- Successful completion
  SUCCESS CONSTANT NUMBER: = 0;
  -- Other error
  GENERAL_ERROR CONSTANT NUMBER: = -1;
  -- Invalid input parameters.
  PARAM_ERROR CONSTANT NUMBER: = -2;
  -- User doesn't have any group membership.
  NO_GROUP_MEMBERSHIP CONSTANT NUMBER: = -3;
  -- SUBSCRIBER doesn't exist.
  NO_SUCH_SUBSCRIBER CONSTANT NUMBER: = -4;
  -- User DN doesn't exist.
  NO_SUCH_USER CONSTANT NUMBER: = -5;
  -- Root oracle context doesn't exist.
  NO_ROOT_ORCL_CTX CONSTANT NUMBER: = -6;
  -- More than one SUBSCRIBER entries
  MULTIPLE_SUBSCRIBER_ENTRIES CONSTANT NUMBER: = -7;
  -- Root oracle context
  -- either doesn't contain
  --   all the required attributes and entries
  -- or
  --   does not have valid attribute values.
  INVALID_ROOT_ORCL_CTX CONSTANT NUMBER: = -8;
  -- SUBSCRIBER's oracle context dosen't exist.
  NO_SUBSCRIBER_ORCL_CTX CONSTANT NUMBER: = -9;
  -- Subscriber's oracle context
  -- either doesn't contain
  --   all the required attributes and entries
  -- or
  --   does not have valid attribute values.
  INVALID_SUBSCRIBER_ORCL_CTX CONSTANT NUMBER: = -10;
  -- More than one SUBSCRIBER entries
  MULTIPLE_USER_ENTRIES CONSTANT NUMBER: = -11;
  -- GROUP does not exist.
  NO_SUCH_GROUP CONSTANT NUMBER: = -12;
  -- Multiple group entries.
  MULTIPLE_GROUP_ENTRIES CONSTANT NUMBER: = -13;
  -- Password Policy Error Codes
  AUTH_FAILURE_EXCEPTION CONSTANT NUMBER: = -16;
  -- Error Codes Returned by Server.
  ACCT_TOTALLY_LOCKED_EXCEPTION CONSTANT NUMBER: = 9001;
  PWD_EXPIRED_EXCEPTION CONSTANT NUMBER: = 9000;
  PWD_EXPIRE_WARN CONSTANT NUMBER: = 9002;
  PWD_MINLENGTH_ERROR CONSTANT NUMBER: = 9003;
  PWD_NUMERIC_ERROR CONSTANT NUMBER: = 9004;
  PWD_NULL_ERROR CONSTANT NUMBER: = 9005;
  PWD_INHISTORY_ERROR CONSTANT NUMBER: = 9006;
  PWD_ILLEGALVALUE_ERROR CONSTANT NUMBER: = 9007;
  PWD_GRACELOGIN_WARN CONSTANT NUMBER: = 9008;
  PWD_MUSTCHANGE_ERROR CONSTANT NUMBER: = 9009;
  USER_ACCT_DISABLED_ERROR CONSTANT NUMBER: = 9050;
  -- Deprecated
  AUTH_PASSWD_CHANGE_WARN CONSTANT NUMBER: = -15;
  RESET_HANDLE CONSTANT NUMBER: = -18;
  SUBSCRIBER_NOT_FOUND CONSTANT NUMBER: = -19;
  USER_PROPERTY_NOT_FOUND CONSTANT NUMBER: = -28;
  PROPERTY_NOT_FOUND CONSTANT NUMBER: = -30;
  -- Errors Related to Service Entity
  NO_SUCH_SERVICE CONSTANT NUMBER: = -31;
  NO_USER_SUBSCRIPTIONS CONSTANT NUMBER: = -32;
  NO_SUBSCRIPTIONS_TO_SERVICES CONSTANT NUMBER: = -33;
  NO_SERVICES_INSTALLED CONSTANT NUMBER: = -34;
  USER_NOT_SUBSCRIBED CONSTANT NUMBER: = -35;
  INVALID_SERVICE_SCHEMA CONSTANT NUMBER: = -36;
  -- Cannot Allocate Memory
  ERR_MEM_ALLOC CONSTANT NUMBER: = -37;
  -- Internal Error
  ERR_INTERNAL CONSTANT NUMBER: = -38;
  -- Options for various input arguments to functions
  --  nested levels
  NESTED_MEMBERSHIP CONSTANT NUMBER: = 0;
  DIRECT_MEMBERSHIP CONSTANT NUMBER: = 1;
  -- Type of User properties
  ENTRY_PROPERTIES CONSTANT NUMBER: = 0;
  DETACHED_PROPERTIES CONSTANT NUMBER: = 1;
  COMMON_PROPERTIES CONSTANT NUMBER: = 2;
  NICKNAME_PROPERTY CONSTANT NUMBER: = 3;
  EXTPROPTYPE_RAD CONSTANT NUMBER: = 4;
  DEFAULT_RAD_PROPERTIES CONSTANT NUMBER: = 5;
  IDENTIFICATION_PROPERTIES CONSTANT NUMBER: = 6;
  -- Modify
  ADD_PROPERTY CONSTANT NUMBER: = 0;
  REPLACE_PROPERTY CONSTANT NUMBER: = 1;
  DELETE_PROPERTY CONSTANT NUMBER: = 2;
  ADD_PROPERTY_SET CONSTANT NUMBER: = 0;
  MODIFY_PROPERTY_SET CONSTANT NUMBER: = 1;
  DELETE_PROPERTY_SET CONSTANT NUMBER: = 2;
  --  Auth types
  AUTH_SIMPLE CONSTANT NUMBER: = 0;
  AUTH_EXTENDED CONSTANT NUMBER: = 1;
  --  Hint types
  TYPE_NICKNAME CONSTANT NUMBER: = 1;
  TYPE_GUID CONSTANT NUMBER: = 2;
  TYPE_DN CONSTANT NUMBER: = 3;
  TYPE_DEFAULT CONSTANT NUMBER: = 4;
  -- Handle Types
  SUBSCRIBER_HANDLE CONSTANT NUMBER: = 1;
  USER_HANDLE CONSTANT NUMBER: = 2;
  GROUP_HANDLE CONSTANT NUMBER: = 3;
  APP_HANDLE CONSTANT NUMBER: = 4;
  ORCLCTX_HANDLE CONSTANT NUMBER: = 5;
  SERVICE_HANDLE CONSTANT NUMBER: = 6;
  END DBMS_LDAP_UTL;
