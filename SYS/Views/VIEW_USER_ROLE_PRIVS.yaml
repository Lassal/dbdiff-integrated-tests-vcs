schema: SYS
name: USER_ROLE_PRIVS
updatedAllowed: true
insertAllowed: true
columns:
- name: ADMIN_OPTION
  dataType: VARCHAR2
  textMaxLength: 3
  nullable: true
  ordinalPosition: 3
  dataTypeLength: 3
- name: COMMON
  dataType: VARCHAR2
  textMaxLength: 3
  nullable: true
  ordinalPosition: 7
  dataTypeLength: 3
- name: DEFAULT_ROLE
  dataType: VARCHAR2
  textMaxLength: 3
  nullable: true
  ordinalPosition: 5
  dataTypeLength: 3
- name: DELEGATE_OPTION
  dataType: VARCHAR2
  textMaxLength: 3
  nullable: true
  ordinalPosition: 4
  dataTypeLength: 3
- name: GRANTED_ROLE
  dataType: VARCHAR2
  textMaxLength: 128
  nullable: true
  ordinalPosition: 2
  dataTypeLength: 128
- name: OS_GRANTED
  dataType: VARCHAR2
  textMaxLength: 3
  nullable: true
  ordinalPosition: 6
  dataTypeLength: 3
- name: USERNAME
  dataType: VARCHAR2
  textMaxLength: 128
  nullable: true
  ordinalPosition: 1
  dataTypeLength: 128
referencedTables:
- schema: SYS
  name: DEFROLE$
- schema: SYS
  name: PROXY_INFO$
- schema: SYS
  name: PROXY_ROLE_INFO$
- schema: SYS
  name: SYSAUTH$
- schema: SYS
  name: USER$
- schema: SYS
  name: X$KZDOS
viewDefinition: |-
  select
    groles.username,
    groles.granted_role,
    groles.admin_option,
    groles.delegate_option,
    groles.default_role,
    groles.os_granted,
    groles.common
  from
    (
      select
        /*+ ordered */
        decode(sa.grantee#, 1, 'PUBLIC', u1.name) username,
        u2.name granted_role,
        decode(min(bitand(nvl(option $, 0), 1)), 1, 'YES', 'NO') admin_option,
        decode(min(bitand(nvl(option $, 0), 2)), 2, 'YES', 'NO') delegate_option,
        decode(
          min(u1.defrole),
          0,
          'NO',
          1,
          decode(
            min(u2.password),
            NULL,
            decode(min(u2.spare4), NULL, 'YES', 'NO'),
            'NO'
          ),
          2,
          decode(
            min(ud.role#),
            NULL,
            'NO',
            decode(
              min(u2.password),
              NULL,
              decode(min(u2.spare4), NULL, 'YES', 'NO'),
              'NO'
            )
          ),
          3,
          decode(
            min(ud.role#),
            NULL,
            decode(
              min(u2.password),
              NULL,
              decode(min(u2.spare4), NULL, 'YES', 'NO'),
              'NO'
            ),
            'NO'
          ),
          'NO'
        ) default_role,
        'NO' os_granted,
        'NO' common
      from
        sysauth$ sa,
        user $ u1,
        user $ u2,
        defrole$ ud
      where
        sa.grantee# in (userenv('SCHEMAID'), 1)
        and sa.grantee# = ud.user#(+)
        and sa.privilege# = ud.role#(+)
        and u1.user# = sa.grantee#
        and u2.user# = sa.privilege#
        and bitand(nvl(option $, 0), 4) = 0
        /* Local, and maybe Common, Privs */
      group by
        decode(sa.grantee#, 1, 'PUBLIC', u1.name),
        u2.name
      union all
        /* Common Privileges */
      select
        /*+ ordered */
        decode(sa.grantee#, 1, 'PUBLIC', u1.name) username,
        u2.name granted_role,
        decode(
          min(bitand(nvl(option $, 0), 16)),
          16,
          'YES',
          'NO'
        ) admin_option,
        decode(
          min(bitand(nvl(option $, 0), 32)),
          32,
          'YES',
          'NO'
        ) delegate_option,
        decode(
          min(u1.defrole),
          0,
          'NO',
          1,
          decode(
            min(u2.password),
            NULL,
            decode(min(u2.spare4), NULL, 'YES', 'NO'),
            'NO'
          ),
          2,
          decode(
            min(ud.role#),
            NULL,
            'NO',
            decode(
              min(u2.password),
              NULL,
              decode(min(u2.spare4), NULL, 'YES', 'NO'),
              'NO'
            )
          ),
          3,
          decode(
            min(ud.role#),
            NULL,
            decode(
              min(u2.password),
              NULL,
              decode(min(u2.spare4), NULL, 'YES', 'NO'),
              'NO'
            ),
            'NO'
          ),
          'NO'
        ) default_role,
        'NO' os_granted,
        'YES' common
      from
        sysauth$ sa,
        user $ u1,
        user $ u2,
        defrole$ ud
      where
        sa.grantee# in (userenv('SCHEMAID'), 1)
        and sa.grantee# = ud.user#(+)
        and sa.privilege# = ud.role#(+)
        and u1.user# = sa.grantee#
        and u2.user# = sa.privilege#
        and bitand(nvl(option $, 0), 8) = 8
        /* Common, and maybe Local, priv */
      group by
        decode(sa.grantee#, 1, 'PUBLIC', u1.name),
        u2.name
      union
      select
        su.name username,
        u.name granted_role,
        decode(kzdosadm, 'A', 'YES', 'NO') admin_option,
        NULL delegate_option,
        decode(kzdosdef, 'Y', 'YES', 'NO') default_role,
        'YES' os_granted,
        'NO' common
      from
        sys.user$ u,
        x$kzdos,
        sys.user$ su
      where
        u.user# = x$kzdos.kzdosrol
        and su.user# = userenv('SCHEMAID')
    ) groles
  where
    sys_context('userenv', 'proxy_user') is null
    or (
      sys_context('userenv', 'proxy_user') is not null
      and EXISTS (
        select
          1
        from
          sys.proxy_info$ p
        where
          p.client# = userenv('SCHEMAID')
          and p.proxy# = sys_context('userenv', 'proxy_userid')
          and BITAND(p.flags, 2) = 0
          and (
            BITAND(p.flags, 1) > 0
            or EXISTS (
              select
                1
              from
                sys.proxy_role_info$ pr,
                sys.user$ u
              where
                p.client# = pr.client#
                and p.proxy# = pr.proxy#
                and (
                  (
                    BITAND(p.flags, 4) > 0
                    and (
                      pr.role# = u.user#
                      and u.name = groles.granted_role
                    )
                  )
                  or (
                    BITAND(p.flags, 8) > 0
                    and (
                      pr.role# = u.user#
                      and u.name != groles.granted_role
                    )
                  )
                )
            )
          )
      )
    )
